// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatcleaner.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chatcleaner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_chatcleaner_2eproto() {
  delete CleanerInitMessage::default_instance_;
  delete CleanerInitAckMessage::default_instance_;
  delete CleanerChatRequestMessage::default_instance_;
  delete CleanerChatReplyMessage::default_instance_;
  delete ChatCleanerMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_chatcleaner_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_chatcleaner_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CleanerInitMessage::default_instance_ = new CleanerInitMessage();
  CleanerInitAckMessage::default_instance_ = new CleanerInitAckMessage();
  CleanerChatRequestMessage::default_instance_ = new CleanerChatRequestMessage();
  CleanerChatReplyMessage::default_instance_ = new CleanerChatReplyMessage();
  ChatCleanerMessage::default_instance_ = new ChatCleanerMessage();
  CleanerInitMessage::default_instance_->InitAsDefaultInstance();
  CleanerInitAckMessage::default_instance_->InitAsDefaultInstance();
  CleanerChatRequestMessage::default_instance_->InitAsDefaultInstance();
  CleanerChatReplyMessage::default_instance_->InitAsDefaultInstance();
  ChatCleanerMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chatcleaner_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_chatcleaner_2eproto_once_);
void protobuf_AddDesc_chatcleaner_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_chatcleaner_2eproto_once_,
                 &protobuf_AddDesc_chatcleaner_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chatcleaner_2eproto {
  StaticDescriptorInitializer_chatcleaner_2eproto() {
    protobuf_AddDesc_chatcleaner_2eproto();
  }
} static_descriptor_initializer_chatcleaner_2eproto_;
#endif
bool CleanerChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForCleanerInitMessage(
    CleanerInitMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanerInitMessage::kRequestedVersionFieldNumber;
const int CleanerInitMessage::kClientSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanerInitMessage::CleanerInitMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CleanerInitMessage)
}

void CleanerInitMessage::InitAsDefaultInstance() {
}

CleanerInitMessage::CleanerInitMessage(const CleanerInitMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CleanerInitMessage)
}

void CleanerInitMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestedversion_ = 0u;
  clientsecret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CleanerInitMessage::~CleanerInitMessage() {
  // @@protoc_insertion_point(destructor:CleanerInitMessage)
  SharedDtor();
}

void CleanerInitMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientsecret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CleanerInitMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CleanerInitMessage& CleanerInitMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chatcleaner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chatcleaner_2eproto();
#endif
  return *default_instance_;
}

CleanerInitMessage* CleanerInitMessage::default_instance_ = NULL;

CleanerInitMessage* CleanerInitMessage::New(::google::protobuf::Arena* arena) const {
  CleanerInitMessage* n = new CleanerInitMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanerInitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerInitMessage)
  if (_has_bits_[0 / 32] & 3u) {
    requestedversion_ = 0u;
    if (has_clientsecret()) {
      clientsecret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CleanerInitMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCleanerInitMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:CleanerInitMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestedVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestedversion_)));
          set_has_requestedversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_clientSecret;
        break;
      }

      // required string clientSecret = 2;
      case 2: {
        if (tag == 18) {
         parse_clientSecret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientsecret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CleanerInitMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CleanerInitMessage)
  return false;
#undef DO_
}

void CleanerInitMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CleanerInitMessage)
  // required uint32 requestedVersion = 1;
  if (has_requestedversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestedversion(), output);
  }

  // required string clientSecret = 2;
  if (has_clientsecret()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientsecret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CleanerInitMessage)
}

int CleanerInitMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerInitMessage)
  int total_size = 0;

  if (has_requestedversion()) {
    // required uint32 requestedVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestedversion());
  }

  if (has_clientsecret()) {
    // required string clientSecret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientsecret());
  }

  return total_size;
}
int CleanerInitMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerInitMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 requestedVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestedversion());

    // required string clientSecret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientsecret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanerInitMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CleanerInitMessage*>(&from));
}

void CleanerInitMessage::MergeFrom(const CleanerInitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerInitMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestedversion()) {
      set_requestedversion(from.requestedversion());
    }
    if (from.has_clientsecret()) {
      set_has_clientsecret();
      clientsecret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientsecret_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CleanerInitMessage::CopyFrom(const CleanerInitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerInitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerInitMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CleanerInitMessage::Swap(CleanerInitMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanerInitMessage::InternalSwap(CleanerInitMessage* other) {
  std::swap(requestedversion_, other->requestedversion_);
  clientsecret_.Swap(&other->clientsecret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CleanerInitMessage::GetTypeName() const {
  return "CleanerInitMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanerInitMessage

// required uint32 requestedVersion = 1;
bool CleanerInitMessage::has_requestedversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CleanerInitMessage::set_has_requestedversion() {
  _has_bits_[0] |= 0x00000001u;
}
void CleanerInitMessage::clear_has_requestedversion() {
  _has_bits_[0] &= ~0x00000001u;
}
void CleanerInitMessage::clear_requestedversion() {
  requestedversion_ = 0u;
  clear_has_requestedversion();
}
 ::google::protobuf::uint32 CleanerInitMessage::requestedversion() const {
  // @@protoc_insertion_point(field_get:CleanerInitMessage.requestedVersion)
  return requestedversion_;
}
 void CleanerInitMessage::set_requestedversion(::google::protobuf::uint32 value) {
  set_has_requestedversion();
  requestedversion_ = value;
  // @@protoc_insertion_point(field_set:CleanerInitMessage.requestedVersion)
}

// required string clientSecret = 2;
bool CleanerInitMessage::has_clientsecret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CleanerInitMessage::set_has_clientsecret() {
  _has_bits_[0] |= 0x00000002u;
}
void CleanerInitMessage::clear_has_clientsecret() {
  _has_bits_[0] &= ~0x00000002u;
}
void CleanerInitMessage::clear_clientsecret() {
  clientsecret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientsecret();
}
 const ::std::string& CleanerInitMessage::clientsecret() const {
  // @@protoc_insertion_point(field_get:CleanerInitMessage.clientSecret)
  return clientsecret_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanerInitMessage::set_clientsecret(const ::std::string& value) {
  set_has_clientsecret();
  clientsecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CleanerInitMessage.clientSecret)
}
 void CleanerInitMessage::set_clientsecret(const char* value) {
  set_has_clientsecret();
  clientsecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CleanerInitMessage.clientSecret)
}
 void CleanerInitMessage::set_clientsecret(const char* value, size_t size) {
  set_has_clientsecret();
  clientsecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CleanerInitMessage.clientSecret)
}
 ::std::string* CleanerInitMessage::mutable_clientsecret() {
  set_has_clientsecret();
  // @@protoc_insertion_point(field_mutable:CleanerInitMessage.clientSecret)
  return clientsecret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CleanerInitMessage::release_clientsecret() {
  // @@protoc_insertion_point(field_release:CleanerInitMessage.clientSecret)
  clear_has_clientsecret();
  return clientsecret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanerInitMessage::set_allocated_clientsecret(::std::string* clientsecret) {
  if (clientsecret != NULL) {
    set_has_clientsecret();
  } else {
    clear_has_clientsecret();
  }
  clientsecret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientsecret);
  // @@protoc_insertion_point(field_set_allocated:CleanerInitMessage.clientSecret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCleanerInitAckMessage(
    CleanerInitAckMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanerInitAckMessage::kServerVersionFieldNumber;
const int CleanerInitAckMessage::kServerSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanerInitAckMessage::CleanerInitAckMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CleanerInitAckMessage)
}

void CleanerInitAckMessage::InitAsDefaultInstance() {
}

CleanerInitAckMessage::CleanerInitAckMessage(const CleanerInitAckMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CleanerInitAckMessage)
}

void CleanerInitAckMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverversion_ = 0u;
  serversecret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CleanerInitAckMessage::~CleanerInitAckMessage() {
  // @@protoc_insertion_point(destructor:CleanerInitAckMessage)
  SharedDtor();
}

void CleanerInitAckMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serversecret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CleanerInitAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CleanerInitAckMessage& CleanerInitAckMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chatcleaner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chatcleaner_2eproto();
#endif
  return *default_instance_;
}

CleanerInitAckMessage* CleanerInitAckMessage::default_instance_ = NULL;

CleanerInitAckMessage* CleanerInitAckMessage::New(::google::protobuf::Arena* arena) const {
  CleanerInitAckMessage* n = new CleanerInitAckMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanerInitAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerInitAckMessage)
  if (_has_bits_[0 / 32] & 3u) {
    serverversion_ = 0u;
    if (has_serversecret()) {
      serversecret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CleanerInitAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCleanerInitAckMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:CleanerInitAckMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serverVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverversion_)));
          set_has_serverversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serverSecret;
        break;
      }

      // required string serverSecret = 2;
      case 2: {
        if (tag == 18) {
         parse_serverSecret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serversecret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CleanerInitAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CleanerInitAckMessage)
  return false;
#undef DO_
}

void CleanerInitAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CleanerInitAckMessage)
  // required uint32 serverVersion = 1;
  if (has_serverversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverversion(), output);
  }

  // required string serverSecret = 2;
  if (has_serversecret()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serversecret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CleanerInitAckMessage)
}

int CleanerInitAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerInitAckMessage)
  int total_size = 0;

  if (has_serverversion()) {
    // required uint32 serverVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverversion());
  }

  if (has_serversecret()) {
    // required string serverSecret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serversecret());
  }

  return total_size;
}
int CleanerInitAckMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerInitAckMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 serverVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverversion());

    // required string serverSecret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serversecret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanerInitAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CleanerInitAckMessage*>(&from));
}

void CleanerInitAckMessage::MergeFrom(const CleanerInitAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerInitAckMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverversion()) {
      set_serverversion(from.serverversion());
    }
    if (from.has_serversecret()) {
      set_has_serversecret();
      serversecret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serversecret_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CleanerInitAckMessage::CopyFrom(const CleanerInitAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerInitAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerInitAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CleanerInitAckMessage::Swap(CleanerInitAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanerInitAckMessage::InternalSwap(CleanerInitAckMessage* other) {
  std::swap(serverversion_, other->serverversion_);
  serversecret_.Swap(&other->serversecret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CleanerInitAckMessage::GetTypeName() const {
  return "CleanerInitAckMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanerInitAckMessage

// required uint32 serverVersion = 1;
bool CleanerInitAckMessage::has_serverversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CleanerInitAckMessage::set_has_serverversion() {
  _has_bits_[0] |= 0x00000001u;
}
void CleanerInitAckMessage::clear_has_serverversion() {
  _has_bits_[0] &= ~0x00000001u;
}
void CleanerInitAckMessage::clear_serverversion() {
  serverversion_ = 0u;
  clear_has_serverversion();
}
 ::google::protobuf::uint32 CleanerInitAckMessage::serverversion() const {
  // @@protoc_insertion_point(field_get:CleanerInitAckMessage.serverVersion)
  return serverversion_;
}
 void CleanerInitAckMessage::set_serverversion(::google::protobuf::uint32 value) {
  set_has_serverversion();
  serverversion_ = value;
  // @@protoc_insertion_point(field_set:CleanerInitAckMessage.serverVersion)
}

// required string serverSecret = 2;
bool CleanerInitAckMessage::has_serversecret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CleanerInitAckMessage::set_has_serversecret() {
  _has_bits_[0] |= 0x00000002u;
}
void CleanerInitAckMessage::clear_has_serversecret() {
  _has_bits_[0] &= ~0x00000002u;
}
void CleanerInitAckMessage::clear_serversecret() {
  serversecret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serversecret();
}
 const ::std::string& CleanerInitAckMessage::serversecret() const {
  // @@protoc_insertion_point(field_get:CleanerInitAckMessage.serverSecret)
  return serversecret_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanerInitAckMessage::set_serversecret(const ::std::string& value) {
  set_has_serversecret();
  serversecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CleanerInitAckMessage.serverSecret)
}
 void CleanerInitAckMessage::set_serversecret(const char* value) {
  set_has_serversecret();
  serversecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CleanerInitAckMessage.serverSecret)
}
 void CleanerInitAckMessage::set_serversecret(const char* value, size_t size) {
  set_has_serversecret();
  serversecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CleanerInitAckMessage.serverSecret)
}
 ::std::string* CleanerInitAckMessage::mutable_serversecret() {
  set_has_serversecret();
  // @@protoc_insertion_point(field_mutable:CleanerInitAckMessage.serverSecret)
  return serversecret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CleanerInitAckMessage::release_serversecret() {
  // @@protoc_insertion_point(field_release:CleanerInitAckMessage.serverSecret)
  clear_has_serversecret();
  return serversecret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanerInitAckMessage::set_allocated_serversecret(::std::string* serversecret) {
  if (serversecret != NULL) {
    set_has_serversecret();
  } else {
    clear_has_serversecret();
  }
  serversecret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serversecret);
  // @@protoc_insertion_point(field_set_allocated:CleanerInitAckMessage.serverSecret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCleanerChatRequestMessage(
    CleanerChatRequestMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanerChatRequestMessage::kRequestIdFieldNumber;
const int CleanerChatRequestMessage::kCleanerChatTypeFieldNumber;
const int CleanerChatRequestMessage::kGameIdFieldNumber;
const int CleanerChatRequestMessage::kPlayerIdFieldNumber;
const int CleanerChatRequestMessage::kPlayerNameFieldNumber;
const int CleanerChatRequestMessage::kChatMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanerChatRequestMessage::CleanerChatRequestMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CleanerChatRequestMessage)
}

void CleanerChatRequestMessage::InitAsDefaultInstance() {
}

CleanerChatRequestMessage::CleanerChatRequestMessage(const CleanerChatRequestMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CleanerChatRequestMessage)
}

void CleanerChatRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0u;
  cleanerchattype_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CleanerChatRequestMessage::~CleanerChatRequestMessage() {
  // @@protoc_insertion_point(destructor:CleanerChatRequestMessage)
  SharedDtor();
}

void CleanerChatRequestMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CleanerChatRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CleanerChatRequestMessage& CleanerChatRequestMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chatcleaner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chatcleaner_2eproto();
#endif
  return *default_instance_;
}

CleanerChatRequestMessage* CleanerChatRequestMessage::default_instance_ = NULL;

CleanerChatRequestMessage* CleanerChatRequestMessage::New(::google::protobuf::Arena* arena) const {
  CleanerChatRequestMessage* n = new CleanerChatRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanerChatRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerChatRequestMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CleanerChatRequestMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CleanerChatRequestMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(requestid_, playerid_);
    if (has_playername()) {
      playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chatmessage()) {
      chatmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CleanerChatRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCleanerChatRequestMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:CleanerChatRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cleanerChatType;
        break;
      }

      // required .CleanerChatType cleanerChatType = 2;
      case 2: {
        if (tag == 16) {
         parse_cleanerChatType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CleanerChatType_IsValid(value)) {
            set_cleanerchattype(static_cast< ::CleanerChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameId;
        break;
      }

      // optional uint32 gameId = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 4;
      case 4: {
        if (tag == 32) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_playerName;
        break;
      }

      // required string playerName = 5;
      case 5: {
        if (tag == 42) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_chatMessage;
        break;
      }

      // required string chatMessage = 6;
      case 6: {
        if (tag == 50) {
         parse_chatMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CleanerChatRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CleanerChatRequestMessage)
  return false;
#undef DO_
}

void CleanerChatRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CleanerChatRequestMessage)
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // required .CleanerChatType cleanerChatType = 2;
  if (has_cleanerchattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cleanerchattype(), output);
  }

  // optional uint32 gameId = 3 [default = 0];
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameid(), output);
  }

  // required uint32 playerId = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }

  // required string playerName = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->playername(), output);
  }

  // required string chatMessage = 6;
  if (has_chatmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->chatmessage(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CleanerChatRequestMessage)
}

int CleanerChatRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerChatRequestMessage)
  int total_size = 0;

  if (has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }

  if (has_cleanerchattype()) {
    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleanerchattype());
  }

  if (has_playerid()) {
    // required uint32 playerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_playername()) {
    // required string playerName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  if (has_chatmessage()) {
    // required string chatMessage = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatmessage());
  }

  return total_size;
}
int CleanerChatRequestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerChatRequestMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003b) ^ 0x0000003b) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());

    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleanerchattype());

    // required uint32 playerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required string playerName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());

    // required string chatMessage = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatmessage());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 gameId = 3 [default = 0];
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanerChatRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CleanerChatRequestMessage*>(&from));
}

void CleanerChatRequestMessage::MergeFrom(const CleanerChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerChatRequestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_cleanerchattype()) {
      set_cleanerchattype(from.cleanerchattype());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_has_playername();
      playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
    }
    if (from.has_chatmessage()) {
      set_has_chatmessage();
      chatmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatmessage_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CleanerChatRequestMessage::CopyFrom(const CleanerChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerChatRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerChatRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void CleanerChatRequestMessage::Swap(CleanerChatRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanerChatRequestMessage::InternalSwap(CleanerChatRequestMessage* other) {
  std::swap(requestid_, other->requestid_);
  std::swap(cleanerchattype_, other->cleanerchattype_);
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  playername_.Swap(&other->playername_);
  chatmessage_.Swap(&other->chatmessage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CleanerChatRequestMessage::GetTypeName() const {
  return "CleanerChatRequestMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanerChatRequestMessage

// required uint32 requestId = 1;
bool CleanerChatRequestMessage::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CleanerChatRequestMessage::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
void CleanerChatRequestMessage::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CleanerChatRequestMessage::clear_requestid() {
  requestid_ = 0u;
  clear_has_requestid();
}
 ::google::protobuf::uint32 CleanerChatRequestMessage::requestid() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.requestId)
  return requestid_;
}
 void CleanerChatRequestMessage::set_requestid(::google::protobuf::uint32 value) {
  set_has_requestid();
  requestid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.requestId)
}

// required .CleanerChatType cleanerChatType = 2;
bool CleanerChatRequestMessage::has_cleanerchattype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CleanerChatRequestMessage::set_has_cleanerchattype() {
  _has_bits_[0] |= 0x00000002u;
}
void CleanerChatRequestMessage::clear_has_cleanerchattype() {
  _has_bits_[0] &= ~0x00000002u;
}
void CleanerChatRequestMessage::clear_cleanerchattype() {
  cleanerchattype_ = 0;
  clear_has_cleanerchattype();
}
 ::CleanerChatType CleanerChatRequestMessage::cleanerchattype() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.cleanerChatType)
  return static_cast< ::CleanerChatType >(cleanerchattype_);
}
 void CleanerChatRequestMessage::set_cleanerchattype(::CleanerChatType value) {
  assert(::CleanerChatType_IsValid(value));
  set_has_cleanerchattype();
  cleanerchattype_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.cleanerChatType)
}

// optional uint32 gameId = 3 [default = 0];
bool CleanerChatRequestMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CleanerChatRequestMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
void CleanerChatRequestMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CleanerChatRequestMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 CleanerChatRequestMessage::gameid() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.gameId)
  return gameid_;
}
 void CleanerChatRequestMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.gameId)
}

// required uint32 playerId = 4;
bool CleanerChatRequestMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CleanerChatRequestMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
void CleanerChatRequestMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CleanerChatRequestMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 CleanerChatRequestMessage::playerid() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.playerId)
  return playerid_;
}
 void CleanerChatRequestMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.playerId)
}

// required string playerName = 5;
bool CleanerChatRequestMessage::has_playername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CleanerChatRequestMessage::set_has_playername() {
  _has_bits_[0] |= 0x00000010u;
}
void CleanerChatRequestMessage::clear_has_playername() {
  _has_bits_[0] &= ~0x00000010u;
}
void CleanerChatRequestMessage::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playername();
}
 const ::std::string& CleanerChatRequestMessage::playername() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.playerName)
  return playername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanerChatRequestMessage::set_playername(const ::std::string& value) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.playerName)
}
 void CleanerChatRequestMessage::set_playername(const char* value) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CleanerChatRequestMessage.playerName)
}
 void CleanerChatRequestMessage::set_playername(const char* value, size_t size) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CleanerChatRequestMessage.playerName)
}
 ::std::string* CleanerChatRequestMessage::mutable_playername() {
  set_has_playername();
  // @@protoc_insertion_point(field_mutable:CleanerChatRequestMessage.playerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CleanerChatRequestMessage::release_playername() {
  // @@protoc_insertion_point(field_release:CleanerChatRequestMessage.playerName)
  clear_has_playername();
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanerChatRequestMessage::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    set_has_playername();
  } else {
    clear_has_playername();
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:CleanerChatRequestMessage.playerName)
}

// required string chatMessage = 6;
bool CleanerChatRequestMessage::has_chatmessage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CleanerChatRequestMessage::set_has_chatmessage() {
  _has_bits_[0] |= 0x00000020u;
}
void CleanerChatRequestMessage::clear_has_chatmessage() {
  _has_bits_[0] &= ~0x00000020u;
}
void CleanerChatRequestMessage::clear_chatmessage() {
  chatmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatmessage();
}
 const ::std::string& CleanerChatRequestMessage::chatmessage() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.chatMessage)
  return chatmessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanerChatRequestMessage::set_chatmessage(const ::std::string& value) {
  set_has_chatmessage();
  chatmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.chatMessage)
}
 void CleanerChatRequestMessage::set_chatmessage(const char* value) {
  set_has_chatmessage();
  chatmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CleanerChatRequestMessage.chatMessage)
}
 void CleanerChatRequestMessage::set_chatmessage(const char* value, size_t size) {
  set_has_chatmessage();
  chatmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CleanerChatRequestMessage.chatMessage)
}
 ::std::string* CleanerChatRequestMessage::mutable_chatmessage() {
  set_has_chatmessage();
  // @@protoc_insertion_point(field_mutable:CleanerChatRequestMessage.chatMessage)
  return chatmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CleanerChatRequestMessage::release_chatmessage() {
  // @@protoc_insertion_point(field_release:CleanerChatRequestMessage.chatMessage)
  clear_has_chatmessage();
  return chatmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanerChatRequestMessage::set_allocated_chatmessage(::std::string* chatmessage) {
  if (chatmessage != NULL) {
    set_has_chatmessage();
  } else {
    clear_has_chatmessage();
  }
  chatmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatmessage);
  // @@protoc_insertion_point(field_set_allocated:CleanerChatRequestMessage.chatMessage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCleanerChatReplyMessage(
    CleanerChatReplyMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool CleanerChatReplyMessage_CleanerActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionNone;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionWarning;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionKick;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionBan;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionMute;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::CleanerActionType_MIN;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::CleanerActionType_MAX;
const int CleanerChatReplyMessage::CleanerActionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanerChatReplyMessage::kRequestIdFieldNumber;
const int CleanerChatReplyMessage::kCleanerChatTypeFieldNumber;
const int CleanerChatReplyMessage::kGameIdFieldNumber;
const int CleanerChatReplyMessage::kPlayerIdFieldNumber;
const int CleanerChatReplyMessage::kCleanerActionTypeFieldNumber;
const int CleanerChatReplyMessage::kCleanerTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanerChatReplyMessage::CleanerChatReplyMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CleanerChatReplyMessage)
}

void CleanerChatReplyMessage::InitAsDefaultInstance() {
}

CleanerChatReplyMessage::CleanerChatReplyMessage(const CleanerChatReplyMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CleanerChatReplyMessage)
}

void CleanerChatReplyMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0u;
  cleanerchattype_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  cleaneractiontype_ = 0;
  cleanertext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CleanerChatReplyMessage::~CleanerChatReplyMessage() {
  // @@protoc_insertion_point(destructor:CleanerChatReplyMessage)
  SharedDtor();
}

void CleanerChatReplyMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cleanertext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CleanerChatReplyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CleanerChatReplyMessage& CleanerChatReplyMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chatcleaner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chatcleaner_2eproto();
#endif
  return *default_instance_;
}

CleanerChatReplyMessage* CleanerChatReplyMessage::default_instance_ = NULL;

CleanerChatReplyMessage* CleanerChatReplyMessage::New(::google::protobuf::Arena* arena) const {
  CleanerChatReplyMessage* n = new CleanerChatReplyMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanerChatReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerChatReplyMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CleanerChatReplyMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CleanerChatReplyMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(requestid_, playerid_);
    cleaneractiontype_ = 0;
    if (has_cleanertext()) {
      cleanertext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CleanerChatReplyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCleanerChatReplyMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:CleanerChatReplyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cleanerChatType;
        break;
      }

      // required .CleanerChatType cleanerChatType = 2;
      case 2: {
        if (tag == 16) {
         parse_cleanerChatType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CleanerChatType_IsValid(value)) {
            set_cleanerchattype(static_cast< ::CleanerChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameId;
        break;
      }

      // optional uint32 gameId = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 4;
      case 4: {
        if (tag == 32) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cleanerActionType;
        break;
      }

      // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
      case 5: {
        if (tag == 40) {
         parse_cleanerActionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CleanerChatReplyMessage_CleanerActionType_IsValid(value)) {
            set_cleaneractiontype(static_cast< ::CleanerChatReplyMessage_CleanerActionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cleanerText;
        break;
      }

      // optional string cleanerText = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_cleanerText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cleanertext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CleanerChatReplyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CleanerChatReplyMessage)
  return false;
#undef DO_
}

void CleanerChatReplyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CleanerChatReplyMessage)
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // required .CleanerChatType cleanerChatType = 2;
  if (has_cleanerchattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cleanerchattype(), output);
  }

  // optional uint32 gameId = 3 [default = 0];
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameid(), output);
  }

  // required uint32 playerId = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }

  // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
  if (has_cleaneractiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->cleaneractiontype(), output);
  }

  // optional string cleanerText = 6 [default = ""];
  if (has_cleanertext()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cleanertext(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CleanerChatReplyMessage)
}

int CleanerChatReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerChatReplyMessage)
  int total_size = 0;

  if (has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }

  if (has_cleanerchattype()) {
    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleanerchattype());
  }

  if (has_playerid()) {
    // required uint32 playerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_cleaneractiontype()) {
    // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleaneractiontype());
  }

  return total_size;
}
int CleanerChatReplyMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerChatReplyMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());

    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleanerchattype());

    // required uint32 playerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleaneractiontype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 36u) {
    // optional uint32 gameId = 3 [default = 0];
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional string cleanerText = 6 [default = ""];
    if (has_cleanertext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cleanertext());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanerChatReplyMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CleanerChatReplyMessage*>(&from));
}

void CleanerChatReplyMessage::MergeFrom(const CleanerChatReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerChatReplyMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_cleanerchattype()) {
      set_cleanerchattype(from.cleanerchattype());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_cleaneractiontype()) {
      set_cleaneractiontype(from.cleaneractiontype());
    }
    if (from.has_cleanertext()) {
      set_has_cleanertext();
      cleanertext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cleanertext_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CleanerChatReplyMessage::CopyFrom(const CleanerChatReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerChatReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerChatReplyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void CleanerChatReplyMessage::Swap(CleanerChatReplyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanerChatReplyMessage::InternalSwap(CleanerChatReplyMessage* other) {
  std::swap(requestid_, other->requestid_);
  std::swap(cleanerchattype_, other->cleanerchattype_);
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(cleaneractiontype_, other->cleaneractiontype_);
  cleanertext_.Swap(&other->cleanertext_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CleanerChatReplyMessage::GetTypeName() const {
  return "CleanerChatReplyMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanerChatReplyMessage

// required uint32 requestId = 1;
bool CleanerChatReplyMessage::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CleanerChatReplyMessage::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
void CleanerChatReplyMessage::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CleanerChatReplyMessage::clear_requestid() {
  requestid_ = 0u;
  clear_has_requestid();
}
 ::google::protobuf::uint32 CleanerChatReplyMessage::requestid() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.requestId)
  return requestid_;
}
 void CleanerChatReplyMessage::set_requestid(::google::protobuf::uint32 value) {
  set_has_requestid();
  requestid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.requestId)
}

// required .CleanerChatType cleanerChatType = 2;
bool CleanerChatReplyMessage::has_cleanerchattype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CleanerChatReplyMessage::set_has_cleanerchattype() {
  _has_bits_[0] |= 0x00000002u;
}
void CleanerChatReplyMessage::clear_has_cleanerchattype() {
  _has_bits_[0] &= ~0x00000002u;
}
void CleanerChatReplyMessage::clear_cleanerchattype() {
  cleanerchattype_ = 0;
  clear_has_cleanerchattype();
}
 ::CleanerChatType CleanerChatReplyMessage::cleanerchattype() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.cleanerChatType)
  return static_cast< ::CleanerChatType >(cleanerchattype_);
}
 void CleanerChatReplyMessage::set_cleanerchattype(::CleanerChatType value) {
  assert(::CleanerChatType_IsValid(value));
  set_has_cleanerchattype();
  cleanerchattype_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.cleanerChatType)
}

// optional uint32 gameId = 3 [default = 0];
bool CleanerChatReplyMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CleanerChatReplyMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
void CleanerChatReplyMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CleanerChatReplyMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 CleanerChatReplyMessage::gameid() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.gameId)
  return gameid_;
}
 void CleanerChatReplyMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.gameId)
}

// required uint32 playerId = 4;
bool CleanerChatReplyMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CleanerChatReplyMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
void CleanerChatReplyMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CleanerChatReplyMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 CleanerChatReplyMessage::playerid() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.playerId)
  return playerid_;
}
 void CleanerChatReplyMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.playerId)
}

// required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
bool CleanerChatReplyMessage::has_cleaneractiontype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CleanerChatReplyMessage::set_has_cleaneractiontype() {
  _has_bits_[0] |= 0x00000010u;
}
void CleanerChatReplyMessage::clear_has_cleaneractiontype() {
  _has_bits_[0] &= ~0x00000010u;
}
void CleanerChatReplyMessage::clear_cleaneractiontype() {
  cleaneractiontype_ = 0;
  clear_has_cleaneractiontype();
}
 ::CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleaneractiontype() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.cleanerActionType)
  return static_cast< ::CleanerChatReplyMessage_CleanerActionType >(cleaneractiontype_);
}
 void CleanerChatReplyMessage::set_cleaneractiontype(::CleanerChatReplyMessage_CleanerActionType value) {
  assert(::CleanerChatReplyMessage_CleanerActionType_IsValid(value));
  set_has_cleaneractiontype();
  cleaneractiontype_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.cleanerActionType)
}

// optional string cleanerText = 6 [default = ""];
bool CleanerChatReplyMessage::has_cleanertext() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CleanerChatReplyMessage::set_has_cleanertext() {
  _has_bits_[0] |= 0x00000020u;
}
void CleanerChatReplyMessage::clear_has_cleanertext() {
  _has_bits_[0] &= ~0x00000020u;
}
void CleanerChatReplyMessage::clear_cleanertext() {
  cleanertext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cleanertext();
}
 const ::std::string& CleanerChatReplyMessage::cleanertext() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.cleanerText)
  return cleanertext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanerChatReplyMessage::set_cleanertext(const ::std::string& value) {
  set_has_cleanertext();
  cleanertext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.cleanerText)
}
 void CleanerChatReplyMessage::set_cleanertext(const char* value) {
  set_has_cleanertext();
  cleanertext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CleanerChatReplyMessage.cleanerText)
}
 void CleanerChatReplyMessage::set_cleanertext(const char* value, size_t size) {
  set_has_cleanertext();
  cleanertext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CleanerChatReplyMessage.cleanerText)
}
 ::std::string* CleanerChatReplyMessage::mutable_cleanertext() {
  set_has_cleanertext();
  // @@protoc_insertion_point(field_mutable:CleanerChatReplyMessage.cleanerText)
  return cleanertext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CleanerChatReplyMessage::release_cleanertext() {
  // @@protoc_insertion_point(field_release:CleanerChatReplyMessage.cleanerText)
  clear_has_cleanertext();
  return cleanertext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanerChatReplyMessage::set_allocated_cleanertext(::std::string* cleanertext) {
  if (cleanertext != NULL) {
    set_has_cleanertext();
  } else {
    clear_has_cleanertext();
  }
  cleanertext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cleanertext);
  // @@protoc_insertion_point(field_set_allocated:CleanerChatReplyMessage.cleanerText)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForChatCleanerMessage(
    ChatCleanerMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ChatCleanerMessage_ChatCleanerMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerInitMessage;
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerInitAckMessage;
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerChatRequestMessage;
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerChatReplyMessage;
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::ChatCleanerMessageType_MIN;
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::ChatCleanerMessageType_MAX;
const int ChatCleanerMessage::ChatCleanerMessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatCleanerMessage::kMessageTypeFieldNumber;
const int ChatCleanerMessage::kCleanerInitMessageFieldNumber;
const int ChatCleanerMessage::kCleanerInitAckMessageFieldNumber;
const int ChatCleanerMessage::kCleanerChatRequestMessageFieldNumber;
const int ChatCleanerMessage::kCleanerChatReplyMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatCleanerMessage::ChatCleanerMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatCleanerMessage)
}

void ChatCleanerMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cleanerinitmessage_ = const_cast< ::CleanerInitMessage*>(
      ::CleanerInitMessage::internal_default_instance());
#else
  cleanerinitmessage_ = const_cast< ::CleanerInitMessage*>(&::CleanerInitMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cleanerinitackmessage_ = const_cast< ::CleanerInitAckMessage*>(
      ::CleanerInitAckMessage::internal_default_instance());
#else
  cleanerinitackmessage_ = const_cast< ::CleanerInitAckMessage*>(&::CleanerInitAckMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cleanerchatrequestmessage_ = const_cast< ::CleanerChatRequestMessage*>(
      ::CleanerChatRequestMessage::internal_default_instance());
#else
  cleanerchatrequestmessage_ = const_cast< ::CleanerChatRequestMessage*>(&::CleanerChatRequestMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cleanerchatreplymessage_ = const_cast< ::CleanerChatReplyMessage*>(
      ::CleanerChatReplyMessage::internal_default_instance());
#else
  cleanerchatreplymessage_ = const_cast< ::CleanerChatReplyMessage*>(&::CleanerChatReplyMessage::default_instance());
#endif
}

ChatCleanerMessage::ChatCleanerMessage(const ChatCleanerMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChatCleanerMessage)
}

void ChatCleanerMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_ = 1;
  cleanerinitmessage_ = NULL;
  cleanerinitackmessage_ = NULL;
  cleanerchatrequestmessage_ = NULL;
  cleanerchatreplymessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatCleanerMessage::~ChatCleanerMessage() {
  // @@protoc_insertion_point(destructor:ChatCleanerMessage)
  SharedDtor();
}

void ChatCleanerMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete cleanerinitmessage_;
    delete cleanerinitackmessage_;
    delete cleanerchatrequestmessage_;
    delete cleanerchatreplymessage_;
  }
}

void ChatCleanerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChatCleanerMessage& ChatCleanerMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_chatcleaner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_chatcleaner_2eproto();
#endif
  return *default_instance_;
}

ChatCleanerMessage* ChatCleanerMessage::default_instance_ = NULL;

ChatCleanerMessage* ChatCleanerMessage::New(::google::protobuf::Arena* arena) const {
  ChatCleanerMessage* n = new ChatCleanerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatCleanerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatCleanerMessage)
  if (_has_bits_[0 / 32] & 31u) {
    messagetype_ = 1;
    if (has_cleanerinitmessage()) {
      if (cleanerinitmessage_ != NULL) cleanerinitmessage_->::CleanerInitMessage::Clear();
    }
    if (has_cleanerinitackmessage()) {
      if (cleanerinitackmessage_ != NULL) cleanerinitackmessage_->::CleanerInitAckMessage::Clear();
    }
    if (has_cleanerchatrequestmessage()) {
      if (cleanerchatrequestmessage_ != NULL) cleanerchatrequestmessage_->::CleanerChatRequestMessage::Clear();
    }
    if (has_cleanerchatreplymessage()) {
      if (cleanerchatreplymessage_ != NULL) cleanerchatreplymessage_->::CleanerChatReplyMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChatCleanerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForChatCleanerMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ChatCleanerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatCleanerMessage_ChatCleanerMessageType_IsValid(value)) {
            set_messagetype(static_cast< ::ChatCleanerMessage_ChatCleanerMessageType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cleanerInitMessage;
        break;
      }

      // optional .CleanerInitMessage cleanerInitMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_cleanerInitMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cleanerinitmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cleanerInitAckMessage;
        break;
      }

      // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
      case 3: {
        if (tag == 26) {
         parse_cleanerInitAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cleanerinitackmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cleanerChatRequestMessage;
        break;
      }

      // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
      case 4: {
        if (tag == 34) {
         parse_cleanerChatRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cleanerchatrequestmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cleanerChatReplyMessage;
        break;
      }

      // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
      case 5: {
        if (tag == 42) {
         parse_cleanerChatReplyMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cleanerchatreplymessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatCleanerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatCleanerMessage)
  return false;
#undef DO_
}

void ChatCleanerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatCleanerMessage)
  // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // optional .CleanerInitMessage cleanerInitMessage = 2;
  if (has_cleanerinitmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->cleanerinitmessage_, output);
  }

  // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
  if (has_cleanerinitackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->cleanerinitackmessage_, output);
  }

  // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
  if (has_cleanerchatrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->cleanerchatrequestmessage_, output);
  }

  // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
  if (has_cleanerchatreplymessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->cleanerchatreplymessage_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ChatCleanerMessage)
}

int ChatCleanerMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChatCleanerMessage)
  int total_size = 0;

  // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
  if (has_messagetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional .CleanerInitMessage cleanerInitMessage = 2;
    if (has_cleanerinitmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cleanerinitmessage_);
    }

    // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
    if (has_cleanerinitackmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cleanerinitackmessage_);
    }

    // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
    if (has_cleanerchatrequestmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cleanerchatrequestmessage_);
    }

    // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
    if (has_cleanerchatreplymessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cleanerchatreplymessage_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatCleanerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatCleanerMessage*>(&from));
}

void ChatCleanerMessage::MergeFrom(const ChatCleanerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatCleanerMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_cleanerinitmessage()) {
      mutable_cleanerinitmessage()->::CleanerInitMessage::MergeFrom(from.cleanerinitmessage());
    }
    if (from.has_cleanerinitackmessage()) {
      mutable_cleanerinitackmessage()->::CleanerInitAckMessage::MergeFrom(from.cleanerinitackmessage());
    }
    if (from.has_cleanerchatrequestmessage()) {
      mutable_cleanerchatrequestmessage()->::CleanerChatRequestMessage::MergeFrom(from.cleanerchatrequestmessage());
    }
    if (from.has_cleanerchatreplymessage()) {
      mutable_cleanerchatreplymessage()->::CleanerChatReplyMessage::MergeFrom(from.cleanerchatreplymessage());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ChatCleanerMessage::CopyFrom(const ChatCleanerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatCleanerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatCleanerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cleanerinitmessage()) {
    if (!this->cleanerinitmessage_->IsInitialized()) return false;
  }
  if (has_cleanerinitackmessage()) {
    if (!this->cleanerinitackmessage_->IsInitialized()) return false;
  }
  if (has_cleanerchatrequestmessage()) {
    if (!this->cleanerchatrequestmessage_->IsInitialized()) return false;
  }
  if (has_cleanerchatreplymessage()) {
    if (!this->cleanerchatreplymessage_->IsInitialized()) return false;
  }
  return true;
}

void ChatCleanerMessage::Swap(ChatCleanerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatCleanerMessage::InternalSwap(ChatCleanerMessage* other) {
  std::swap(messagetype_, other->messagetype_);
  std::swap(cleanerinitmessage_, other->cleanerinitmessage_);
  std::swap(cleanerinitackmessage_, other->cleanerinitackmessage_);
  std::swap(cleanerchatrequestmessage_, other->cleanerchatrequestmessage_);
  std::swap(cleanerchatreplymessage_, other->cleanerchatreplymessage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChatCleanerMessage::GetTypeName() const {
  return "ChatCleanerMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatCleanerMessage

// required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
bool ChatCleanerMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatCleanerMessage::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatCleanerMessage::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatCleanerMessage::clear_messagetype() {
  messagetype_ = 1;
  clear_has_messagetype();
}
 ::ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:ChatCleanerMessage.messageType)
  return static_cast< ::ChatCleanerMessage_ChatCleanerMessageType >(messagetype_);
}
 void ChatCleanerMessage::set_messagetype(::ChatCleanerMessage_ChatCleanerMessageType value) {
  assert(::ChatCleanerMessage_ChatCleanerMessageType_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:ChatCleanerMessage.messageType)
}

// optional .CleanerInitMessage cleanerInitMessage = 2;
bool ChatCleanerMessage::has_cleanerinitmessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatCleanerMessage::set_has_cleanerinitmessage() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatCleanerMessage::clear_has_cleanerinitmessage() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatCleanerMessage::clear_cleanerinitmessage() {
  if (cleanerinitmessage_ != NULL) cleanerinitmessage_->::CleanerInitMessage::Clear();
  clear_has_cleanerinitmessage();
}
const ::CleanerInitMessage& ChatCleanerMessage::cleanerinitmessage() const {
  // @@protoc_insertion_point(field_get:ChatCleanerMessage.cleanerInitMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return cleanerinitmessage_ != NULL ? *cleanerinitmessage_ : *default_instance().cleanerinitmessage_;
#else
  return cleanerinitmessage_ != NULL ? *cleanerinitmessage_ : *default_instance_->cleanerinitmessage_;
#endif
}
::CleanerInitMessage* ChatCleanerMessage::mutable_cleanerinitmessage() {
  set_has_cleanerinitmessage();
  if (cleanerinitmessage_ == NULL) {
    cleanerinitmessage_ = new ::CleanerInitMessage;
  }
  // @@protoc_insertion_point(field_mutable:ChatCleanerMessage.cleanerInitMessage)
  return cleanerinitmessage_;
}
::CleanerInitMessage* ChatCleanerMessage::release_cleanerinitmessage() {
  // @@protoc_insertion_point(field_release:ChatCleanerMessage.cleanerInitMessage)
  clear_has_cleanerinitmessage();
  ::CleanerInitMessage* temp = cleanerinitmessage_;
  cleanerinitmessage_ = NULL;
  return temp;
}
void ChatCleanerMessage::set_allocated_cleanerinitmessage(::CleanerInitMessage* cleanerinitmessage) {
  delete cleanerinitmessage_;
  cleanerinitmessage_ = cleanerinitmessage;
  if (cleanerinitmessage) {
    set_has_cleanerinitmessage();
  } else {
    clear_has_cleanerinitmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:ChatCleanerMessage.cleanerInitMessage)
}

// optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
bool ChatCleanerMessage::has_cleanerinitackmessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatCleanerMessage::set_has_cleanerinitackmessage() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatCleanerMessage::clear_has_cleanerinitackmessage() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatCleanerMessage::clear_cleanerinitackmessage() {
  if (cleanerinitackmessage_ != NULL) cleanerinitackmessage_->::CleanerInitAckMessage::Clear();
  clear_has_cleanerinitackmessage();
}
const ::CleanerInitAckMessage& ChatCleanerMessage::cleanerinitackmessage() const {
  // @@protoc_insertion_point(field_get:ChatCleanerMessage.cleanerInitAckMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return cleanerinitackmessage_ != NULL ? *cleanerinitackmessage_ : *default_instance().cleanerinitackmessage_;
#else
  return cleanerinitackmessage_ != NULL ? *cleanerinitackmessage_ : *default_instance_->cleanerinitackmessage_;
#endif
}
::CleanerInitAckMessage* ChatCleanerMessage::mutable_cleanerinitackmessage() {
  set_has_cleanerinitackmessage();
  if (cleanerinitackmessage_ == NULL) {
    cleanerinitackmessage_ = new ::CleanerInitAckMessage;
  }
  // @@protoc_insertion_point(field_mutable:ChatCleanerMessage.cleanerInitAckMessage)
  return cleanerinitackmessage_;
}
::CleanerInitAckMessage* ChatCleanerMessage::release_cleanerinitackmessage() {
  // @@protoc_insertion_point(field_release:ChatCleanerMessage.cleanerInitAckMessage)
  clear_has_cleanerinitackmessage();
  ::CleanerInitAckMessage* temp = cleanerinitackmessage_;
  cleanerinitackmessage_ = NULL;
  return temp;
}
void ChatCleanerMessage::set_allocated_cleanerinitackmessage(::CleanerInitAckMessage* cleanerinitackmessage) {
  delete cleanerinitackmessage_;
  cleanerinitackmessage_ = cleanerinitackmessage;
  if (cleanerinitackmessage) {
    set_has_cleanerinitackmessage();
  } else {
    clear_has_cleanerinitackmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:ChatCleanerMessage.cleanerInitAckMessage)
}

// optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
bool ChatCleanerMessage::has_cleanerchatrequestmessage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatCleanerMessage::set_has_cleanerchatrequestmessage() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatCleanerMessage::clear_has_cleanerchatrequestmessage() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatCleanerMessage::clear_cleanerchatrequestmessage() {
  if (cleanerchatrequestmessage_ != NULL) cleanerchatrequestmessage_->::CleanerChatRequestMessage::Clear();
  clear_has_cleanerchatrequestmessage();
}
const ::CleanerChatRequestMessage& ChatCleanerMessage::cleanerchatrequestmessage() const {
  // @@protoc_insertion_point(field_get:ChatCleanerMessage.cleanerChatRequestMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return cleanerchatrequestmessage_ != NULL ? *cleanerchatrequestmessage_ : *default_instance().cleanerchatrequestmessage_;
#else
  return cleanerchatrequestmessage_ != NULL ? *cleanerchatrequestmessage_ : *default_instance_->cleanerchatrequestmessage_;
#endif
}
::CleanerChatRequestMessage* ChatCleanerMessage::mutable_cleanerchatrequestmessage() {
  set_has_cleanerchatrequestmessage();
  if (cleanerchatrequestmessage_ == NULL) {
    cleanerchatrequestmessage_ = new ::CleanerChatRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:ChatCleanerMessage.cleanerChatRequestMessage)
  return cleanerchatrequestmessage_;
}
::CleanerChatRequestMessage* ChatCleanerMessage::release_cleanerchatrequestmessage() {
  // @@protoc_insertion_point(field_release:ChatCleanerMessage.cleanerChatRequestMessage)
  clear_has_cleanerchatrequestmessage();
  ::CleanerChatRequestMessage* temp = cleanerchatrequestmessage_;
  cleanerchatrequestmessage_ = NULL;
  return temp;
}
void ChatCleanerMessage::set_allocated_cleanerchatrequestmessage(::CleanerChatRequestMessage* cleanerchatrequestmessage) {
  delete cleanerchatrequestmessage_;
  cleanerchatrequestmessage_ = cleanerchatrequestmessage;
  if (cleanerchatrequestmessage) {
    set_has_cleanerchatrequestmessage();
  } else {
    clear_has_cleanerchatrequestmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:ChatCleanerMessage.cleanerChatRequestMessage)
}

// optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
bool ChatCleanerMessage::has_cleanerchatreplymessage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatCleanerMessage::set_has_cleanerchatreplymessage() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatCleanerMessage::clear_has_cleanerchatreplymessage() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatCleanerMessage::clear_cleanerchatreplymessage() {
  if (cleanerchatreplymessage_ != NULL) cleanerchatreplymessage_->::CleanerChatReplyMessage::Clear();
  clear_has_cleanerchatreplymessage();
}
const ::CleanerChatReplyMessage& ChatCleanerMessage::cleanerchatreplymessage() const {
  // @@protoc_insertion_point(field_get:ChatCleanerMessage.cleanerChatReplyMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return cleanerchatreplymessage_ != NULL ? *cleanerchatreplymessage_ : *default_instance().cleanerchatreplymessage_;
#else
  return cleanerchatreplymessage_ != NULL ? *cleanerchatreplymessage_ : *default_instance_->cleanerchatreplymessage_;
#endif
}
::CleanerChatReplyMessage* ChatCleanerMessage::mutable_cleanerchatreplymessage() {
  set_has_cleanerchatreplymessage();
  if (cleanerchatreplymessage_ == NULL) {
    cleanerchatreplymessage_ = new ::CleanerChatReplyMessage;
  }
  // @@protoc_insertion_point(field_mutable:ChatCleanerMessage.cleanerChatReplyMessage)
  return cleanerchatreplymessage_;
}
::CleanerChatReplyMessage* ChatCleanerMessage::release_cleanerchatreplymessage() {
  // @@protoc_insertion_point(field_release:ChatCleanerMessage.cleanerChatReplyMessage)
  clear_has_cleanerchatreplymessage();
  ::CleanerChatReplyMessage* temp = cleanerchatreplymessage_;
  cleanerchatreplymessage_ = NULL;
  return temp;
}
void ChatCleanerMessage::set_allocated_cleanerchatreplymessage(::CleanerChatReplyMessage* cleanerchatreplymessage) {
  delete cleanerchatreplymessage_;
  cleanerchatreplymessage_ = cleanerchatreplymessage;
  if (cleanerchatreplymessage) {
    set_has_cleanerchatreplymessage();
  } else {
    clear_has_cleanerchatreplymessage();
  }
  // @@protoc_insertion_point(field_set_allocated:ChatCleanerMessage.cleanerChatReplyMessage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
