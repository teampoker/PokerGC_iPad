// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pokerth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pokerth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_pokerth_2eproto() {
  delete NetGameInfo::default_instance_;
  delete PlayerResult::default_instance_;
  delete AnnounceMessage::default_instance_;
  delete AnnounceMessage_Version::default_instance_;
  delete InitMessage::default_instance_;
  delete AuthServerChallengeMessage::default_instance_;
  delete AuthClientResponseMessage::default_instance_;
  delete AuthServerVerificationMessage::default_instance_;
  delete InitAckMessage::default_instance_;
  delete AvatarRequestMessage::default_instance_;
  delete AvatarHeaderMessage::default_instance_;
  delete AvatarDataMessage::default_instance_;
  delete AvatarEndMessage::default_instance_;
  delete UnknownAvatarMessage::default_instance_;
  delete PlayerListMessage::default_instance_;
  delete GameListNewMessage::default_instance_;
  delete GameListUpdateMessage::default_instance_;
  delete GameListPlayerJoinedMessage::default_instance_;
  delete GameListPlayerLeftMessage::default_instance_;
  delete GameListSpectatorJoinedMessage::default_instance_;
  delete GameListSpectatorLeftMessage::default_instance_;
  delete GameListAdminChangedMessage::default_instance_;
  delete PlayerInfoRequestMessage::default_instance_;
  delete PlayerInfoReplyMessage::default_instance_;
  delete PlayerInfoReplyMessage_PlayerInfoData::default_instance_;
  delete PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance_;
  delete SubscriptionRequestMessage::default_instance_;
  delete JoinExistingGameMessage::default_instance_;
  delete JoinNewGameMessage::default_instance_;
  delete RejoinExistingGameMessage::default_instance_;
  delete JoinGameAckMessage::default_instance_;
  delete JoinGameFailedMessage::default_instance_;
  delete GamePlayerJoinedMessage::default_instance_;
  delete GamePlayerLeftMessage::default_instance_;
  delete GameSpectatorJoinedMessage::default_instance_;
  delete GameSpectatorLeftMessage::default_instance_;
  delete GameAdminChangedMessage::default_instance_;
  delete RemovedFromGameMessage::default_instance_;
  delete KickPlayerRequestMessage::default_instance_;
  delete LeaveGameRequestMessage::default_instance_;
  delete InvitePlayerToGameMessage::default_instance_;
  delete InviteNotifyMessage::default_instance_;
  delete RejectGameInvitationMessage::default_instance_;
  delete RejectInvNotifyMessage::default_instance_;
  delete StartEventMessage::default_instance_;
  delete StartEventAckMessage::default_instance_;
  delete GameStartInitialMessage::default_instance_;
  delete GameStartRejoinMessage::default_instance_;
  delete GameStartRejoinMessage_RejoinPlayerData::default_instance_;
  delete HandStartMessage::default_instance_;
  delete HandStartMessage_PlainCards::default_instance_;
  delete PlayersTurnMessage::default_instance_;
  delete MyActionRequestMessage::default_instance_;
  delete YourActionRejectedMessage::default_instance_;
  delete PlayersActionDoneMessage::default_instance_;
  delete DealFlopCardsMessage::default_instance_;
  delete DealTurnCardMessage::default_instance_;
  delete DealRiverCardMessage::default_instance_;
  delete AllInShowCardsMessage::default_instance_;
  delete AllInShowCardsMessage_PlayerAllIn::default_instance_;
  delete EndOfHandShowCardsMessage::default_instance_;
  delete EndOfHandHideCardsMessage::default_instance_;
  delete ShowMyCardsRequestMessage::default_instance_;
  delete AfterHandShowCardsMessage::default_instance_;
  delete EndOfGameMessage::default_instance_;
  delete PlayerIdChangedMessage::default_instance_;
  delete AskKickPlayerMessage::default_instance_;
  delete AskKickDeniedMessage::default_instance_;
  delete StartKickPetitionMessage::default_instance_;
  delete VoteKickRequestMessage::default_instance_;
  delete VoteKickReplyMessage::default_instance_;
  delete KickPetitionUpdateMessage::default_instance_;
  delete EndKickPetitionMessage::default_instance_;
  delete StatisticsMessage::default_instance_;
  delete StatisticsMessage_StatisticsData::default_instance_;
  delete ChatRequestMessage::default_instance_;
  delete ChatMessage::default_instance_;
  delete ChatRejectMessage::default_instance_;
  delete DialogMessage::default_instance_;
  delete TimeoutWarningMessage::default_instance_;
  delete ResetTimeoutMessage::default_instance_;
  delete ReportAvatarMessage::default_instance_;
  delete ReportAvatarAckMessage::default_instance_;
  delete ReportGameMessage::default_instance_;
  delete ReportGameAckMessage::default_instance_;
  delete ErrorMessage::default_instance_;
  delete AdminRemoveGameMessage::default_instance_;
  delete AdminRemoveGameAckMessage::default_instance_;
  delete AdminBanPlayerMessage::default_instance_;
  delete AdminBanPlayerAckMessage::default_instance_;
  delete PokerTHMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_pokerth_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_pokerth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NetGameInfo::default_instance_ = new NetGameInfo();
  PlayerResult::default_instance_ = new PlayerResult();
  AnnounceMessage::default_instance_ = new AnnounceMessage();
  AnnounceMessage_Version::default_instance_ = new AnnounceMessage_Version();
  InitMessage::default_instance_ = new InitMessage();
  AuthServerChallengeMessage::default_instance_ = new AuthServerChallengeMessage();
  AuthClientResponseMessage::default_instance_ = new AuthClientResponseMessage();
  AuthServerVerificationMessage::default_instance_ = new AuthServerVerificationMessage();
  InitAckMessage::default_instance_ = new InitAckMessage();
  AvatarRequestMessage::default_instance_ = new AvatarRequestMessage();
  AvatarHeaderMessage::default_instance_ = new AvatarHeaderMessage();
  AvatarDataMessage::default_instance_ = new AvatarDataMessage();
  AvatarEndMessage::default_instance_ = new AvatarEndMessage();
  UnknownAvatarMessage::default_instance_ = new UnknownAvatarMessage();
  PlayerListMessage::default_instance_ = new PlayerListMessage();
  GameListNewMessage::default_instance_ = new GameListNewMessage();
  GameListUpdateMessage::default_instance_ = new GameListUpdateMessage();
  GameListPlayerJoinedMessage::default_instance_ = new GameListPlayerJoinedMessage();
  GameListPlayerLeftMessage::default_instance_ = new GameListPlayerLeftMessage();
  GameListSpectatorJoinedMessage::default_instance_ = new GameListSpectatorJoinedMessage();
  GameListSpectatorLeftMessage::default_instance_ = new GameListSpectatorLeftMessage();
  GameListAdminChangedMessage::default_instance_ = new GameListAdminChangedMessage();
  PlayerInfoRequestMessage::default_instance_ = new PlayerInfoRequestMessage();
  PlayerInfoReplyMessage::default_instance_ = new PlayerInfoReplyMessage();
  PlayerInfoReplyMessage_PlayerInfoData::default_instance_ = new PlayerInfoReplyMessage_PlayerInfoData();
  PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance_ = new PlayerInfoReplyMessage_PlayerInfoData_AvatarData();
  SubscriptionRequestMessage::default_instance_ = new SubscriptionRequestMessage();
  JoinExistingGameMessage::default_instance_ = new JoinExistingGameMessage();
  JoinNewGameMessage::default_instance_ = new JoinNewGameMessage();
  RejoinExistingGameMessage::default_instance_ = new RejoinExistingGameMessage();
  JoinGameAckMessage::default_instance_ = new JoinGameAckMessage();
  JoinGameFailedMessage::default_instance_ = new JoinGameFailedMessage();
  GamePlayerJoinedMessage::default_instance_ = new GamePlayerJoinedMessage();
  GamePlayerLeftMessage::default_instance_ = new GamePlayerLeftMessage();
  GameSpectatorJoinedMessage::default_instance_ = new GameSpectatorJoinedMessage();
  GameSpectatorLeftMessage::default_instance_ = new GameSpectatorLeftMessage();
  GameAdminChangedMessage::default_instance_ = new GameAdminChangedMessage();
  RemovedFromGameMessage::default_instance_ = new RemovedFromGameMessage();
  KickPlayerRequestMessage::default_instance_ = new KickPlayerRequestMessage();
  LeaveGameRequestMessage::default_instance_ = new LeaveGameRequestMessage();
  InvitePlayerToGameMessage::default_instance_ = new InvitePlayerToGameMessage();
  InviteNotifyMessage::default_instance_ = new InviteNotifyMessage();
  RejectGameInvitationMessage::default_instance_ = new RejectGameInvitationMessage();
  RejectInvNotifyMessage::default_instance_ = new RejectInvNotifyMessage();
  StartEventMessage::default_instance_ = new StartEventMessage();
  StartEventAckMessage::default_instance_ = new StartEventAckMessage();
  GameStartInitialMessage::default_instance_ = new GameStartInitialMessage();
  GameStartRejoinMessage::default_instance_ = new GameStartRejoinMessage();
  GameStartRejoinMessage_RejoinPlayerData::default_instance_ = new GameStartRejoinMessage_RejoinPlayerData();
  HandStartMessage::default_instance_ = new HandStartMessage();
  HandStartMessage_PlainCards::default_instance_ = new HandStartMessage_PlainCards();
  PlayersTurnMessage::default_instance_ = new PlayersTurnMessage();
  MyActionRequestMessage::default_instance_ = new MyActionRequestMessage();
  YourActionRejectedMessage::default_instance_ = new YourActionRejectedMessage();
  PlayersActionDoneMessage::default_instance_ = new PlayersActionDoneMessage();
  DealFlopCardsMessage::default_instance_ = new DealFlopCardsMessage();
  DealTurnCardMessage::default_instance_ = new DealTurnCardMessage();
  DealRiverCardMessage::default_instance_ = new DealRiverCardMessage();
  AllInShowCardsMessage::default_instance_ = new AllInShowCardsMessage();
  AllInShowCardsMessage_PlayerAllIn::default_instance_ = new AllInShowCardsMessage_PlayerAllIn();
  EndOfHandShowCardsMessage::default_instance_ = new EndOfHandShowCardsMessage();
  EndOfHandHideCardsMessage::default_instance_ = new EndOfHandHideCardsMessage();
  ShowMyCardsRequestMessage::default_instance_ = new ShowMyCardsRequestMessage();
  AfterHandShowCardsMessage::default_instance_ = new AfterHandShowCardsMessage();
  EndOfGameMessage::default_instance_ = new EndOfGameMessage();
  PlayerIdChangedMessage::default_instance_ = new PlayerIdChangedMessage();
  AskKickPlayerMessage::default_instance_ = new AskKickPlayerMessage();
  AskKickDeniedMessage::default_instance_ = new AskKickDeniedMessage();
  StartKickPetitionMessage::default_instance_ = new StartKickPetitionMessage();
  VoteKickRequestMessage::default_instance_ = new VoteKickRequestMessage();
  VoteKickReplyMessage::default_instance_ = new VoteKickReplyMessage();
  KickPetitionUpdateMessage::default_instance_ = new KickPetitionUpdateMessage();
  EndKickPetitionMessage::default_instance_ = new EndKickPetitionMessage();
  StatisticsMessage::default_instance_ = new StatisticsMessage();
  StatisticsMessage_StatisticsData::default_instance_ = new StatisticsMessage_StatisticsData();
  ChatRequestMessage::default_instance_ = new ChatRequestMessage();
  ChatMessage::default_instance_ = new ChatMessage();
  ChatRejectMessage::default_instance_ = new ChatRejectMessage();
  DialogMessage::default_instance_ = new DialogMessage();
  TimeoutWarningMessage::default_instance_ = new TimeoutWarningMessage();
  ResetTimeoutMessage::default_instance_ = new ResetTimeoutMessage();
  ReportAvatarMessage::default_instance_ = new ReportAvatarMessage();
  ReportAvatarAckMessage::default_instance_ = new ReportAvatarAckMessage();
  ReportGameMessage::default_instance_ = new ReportGameMessage();
  ReportGameAckMessage::default_instance_ = new ReportGameAckMessage();
  ErrorMessage::default_instance_ = new ErrorMessage();
  AdminRemoveGameMessage::default_instance_ = new AdminRemoveGameMessage();
  AdminRemoveGameAckMessage::default_instance_ = new AdminRemoveGameAckMessage();
  AdminBanPlayerMessage::default_instance_ = new AdminBanPlayerMessage();
  AdminBanPlayerAckMessage::default_instance_ = new AdminBanPlayerAckMessage();
  PokerTHMessage::default_instance_ = new PokerTHMessage();
  NetGameInfo::default_instance_->InitAsDefaultInstance();
  PlayerResult::default_instance_->InitAsDefaultInstance();
  AnnounceMessage::default_instance_->InitAsDefaultInstance();
  AnnounceMessage_Version::default_instance_->InitAsDefaultInstance();
  InitMessage::default_instance_->InitAsDefaultInstance();
  AuthServerChallengeMessage::default_instance_->InitAsDefaultInstance();
  AuthClientResponseMessage::default_instance_->InitAsDefaultInstance();
  AuthServerVerificationMessage::default_instance_->InitAsDefaultInstance();
  InitAckMessage::default_instance_->InitAsDefaultInstance();
  AvatarRequestMessage::default_instance_->InitAsDefaultInstance();
  AvatarHeaderMessage::default_instance_->InitAsDefaultInstance();
  AvatarDataMessage::default_instance_->InitAsDefaultInstance();
  AvatarEndMessage::default_instance_->InitAsDefaultInstance();
  UnknownAvatarMessage::default_instance_->InitAsDefaultInstance();
  PlayerListMessage::default_instance_->InitAsDefaultInstance();
  GameListNewMessage::default_instance_->InitAsDefaultInstance();
  GameListUpdateMessage::default_instance_->InitAsDefaultInstance();
  GameListPlayerJoinedMessage::default_instance_->InitAsDefaultInstance();
  GameListPlayerLeftMessage::default_instance_->InitAsDefaultInstance();
  GameListSpectatorJoinedMessage::default_instance_->InitAsDefaultInstance();
  GameListSpectatorLeftMessage::default_instance_->InitAsDefaultInstance();
  GameListAdminChangedMessage::default_instance_->InitAsDefaultInstance();
  PlayerInfoRequestMessage::default_instance_->InitAsDefaultInstance();
  PlayerInfoReplyMessage::default_instance_->InitAsDefaultInstance();
  PlayerInfoReplyMessage_PlayerInfoData::default_instance_->InitAsDefaultInstance();
  PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance_->InitAsDefaultInstance();
  SubscriptionRequestMessage::default_instance_->InitAsDefaultInstance();
  JoinExistingGameMessage::default_instance_->InitAsDefaultInstance();
  JoinNewGameMessage::default_instance_->InitAsDefaultInstance();
  RejoinExistingGameMessage::default_instance_->InitAsDefaultInstance();
  JoinGameAckMessage::default_instance_->InitAsDefaultInstance();
  JoinGameFailedMessage::default_instance_->InitAsDefaultInstance();
  GamePlayerJoinedMessage::default_instance_->InitAsDefaultInstance();
  GamePlayerLeftMessage::default_instance_->InitAsDefaultInstance();
  GameSpectatorJoinedMessage::default_instance_->InitAsDefaultInstance();
  GameSpectatorLeftMessage::default_instance_->InitAsDefaultInstance();
  GameAdminChangedMessage::default_instance_->InitAsDefaultInstance();
  RemovedFromGameMessage::default_instance_->InitAsDefaultInstance();
  KickPlayerRequestMessage::default_instance_->InitAsDefaultInstance();
  LeaveGameRequestMessage::default_instance_->InitAsDefaultInstance();
  InvitePlayerToGameMessage::default_instance_->InitAsDefaultInstance();
  InviteNotifyMessage::default_instance_->InitAsDefaultInstance();
  RejectGameInvitationMessage::default_instance_->InitAsDefaultInstance();
  RejectInvNotifyMessage::default_instance_->InitAsDefaultInstance();
  StartEventMessage::default_instance_->InitAsDefaultInstance();
  StartEventAckMessage::default_instance_->InitAsDefaultInstance();
  GameStartInitialMessage::default_instance_->InitAsDefaultInstance();
  GameStartRejoinMessage::default_instance_->InitAsDefaultInstance();
  GameStartRejoinMessage_RejoinPlayerData::default_instance_->InitAsDefaultInstance();
  HandStartMessage::default_instance_->InitAsDefaultInstance();
  HandStartMessage_PlainCards::default_instance_->InitAsDefaultInstance();
  PlayersTurnMessage::default_instance_->InitAsDefaultInstance();
  MyActionRequestMessage::default_instance_->InitAsDefaultInstance();
  YourActionRejectedMessage::default_instance_->InitAsDefaultInstance();
  PlayersActionDoneMessage::default_instance_->InitAsDefaultInstance();
  DealFlopCardsMessage::default_instance_->InitAsDefaultInstance();
  DealTurnCardMessage::default_instance_->InitAsDefaultInstance();
  DealRiverCardMessage::default_instance_->InitAsDefaultInstance();
  AllInShowCardsMessage::default_instance_->InitAsDefaultInstance();
  AllInShowCardsMessage_PlayerAllIn::default_instance_->InitAsDefaultInstance();
  EndOfHandShowCardsMessage::default_instance_->InitAsDefaultInstance();
  EndOfHandHideCardsMessage::default_instance_->InitAsDefaultInstance();
  ShowMyCardsRequestMessage::default_instance_->InitAsDefaultInstance();
  AfterHandShowCardsMessage::default_instance_->InitAsDefaultInstance();
  EndOfGameMessage::default_instance_->InitAsDefaultInstance();
  PlayerIdChangedMessage::default_instance_->InitAsDefaultInstance();
  AskKickPlayerMessage::default_instance_->InitAsDefaultInstance();
  AskKickDeniedMessage::default_instance_->InitAsDefaultInstance();
  StartKickPetitionMessage::default_instance_->InitAsDefaultInstance();
  VoteKickRequestMessage::default_instance_->InitAsDefaultInstance();
  VoteKickReplyMessage::default_instance_->InitAsDefaultInstance();
  KickPetitionUpdateMessage::default_instance_->InitAsDefaultInstance();
  EndKickPetitionMessage::default_instance_->InitAsDefaultInstance();
  StatisticsMessage::default_instance_->InitAsDefaultInstance();
  StatisticsMessage_StatisticsData::default_instance_->InitAsDefaultInstance();
  ChatRequestMessage::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  ChatRejectMessage::default_instance_->InitAsDefaultInstance();
  DialogMessage::default_instance_->InitAsDefaultInstance();
  TimeoutWarningMessage::default_instance_->InitAsDefaultInstance();
  ResetTimeoutMessage::default_instance_->InitAsDefaultInstance();
  ReportAvatarMessage::default_instance_->InitAsDefaultInstance();
  ReportAvatarAckMessage::default_instance_->InitAsDefaultInstance();
  ReportGameMessage::default_instance_->InitAsDefaultInstance();
  ReportGameAckMessage::default_instance_->InitAsDefaultInstance();
  ErrorMessage::default_instance_->InitAsDefaultInstance();
  AdminRemoveGameMessage::default_instance_->InitAsDefaultInstance();
  AdminRemoveGameAckMessage::default_instance_->InitAsDefaultInstance();
  AdminBanPlayerMessage::default_instance_->InitAsDefaultInstance();
  AdminBanPlayerAckMessage::default_instance_->InitAsDefaultInstance();
  PokerTHMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pokerth_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pokerth_2eproto_once_);
void protobuf_AddDesc_pokerth_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pokerth_2eproto_once_,
                 &protobuf_AddDesc_pokerth_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pokerth_2eproto {
  StaticDescriptorInitializer_pokerth_2eproto() {
    protobuf_AddDesc_pokerth_2eproto();
  }
} static_descriptor_initializer_pokerth_2eproto_;
#endif
bool NetGameMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool NetGameState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool NetPlayerAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool NetPlayerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool NetPlayerInfoRights_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool NetAvatarType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForNetGameInfo(
    NetGameInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

bool NetGameInfo_NetGameType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetGameInfo_NetGameType NetGameInfo::normalGame;
const NetGameInfo_NetGameType NetGameInfo::registeredOnlyGame;
const NetGameInfo_NetGameType NetGameInfo::inviteOnlyGame;
const NetGameInfo_NetGameType NetGameInfo::rankingGame;
const NetGameInfo_NetGameType NetGameInfo::NetGameType_MIN;
const NetGameInfo_NetGameType NetGameInfo::NetGameType_MAX;
const int NetGameInfo::NetGameType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool NetGameInfo_RaiseIntervalMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetGameInfo_RaiseIntervalMode NetGameInfo::raiseOnHandNum;
const NetGameInfo_RaiseIntervalMode NetGameInfo::raiseOnMinutes;
const NetGameInfo_RaiseIntervalMode NetGameInfo::RaiseIntervalMode_MIN;
const NetGameInfo_RaiseIntervalMode NetGameInfo::RaiseIntervalMode_MAX;
const int NetGameInfo::RaiseIntervalMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool NetGameInfo_EndRaiseMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetGameInfo_EndRaiseMode NetGameInfo::doubleBlinds;
const NetGameInfo_EndRaiseMode NetGameInfo::raiseByEndValue;
const NetGameInfo_EndRaiseMode NetGameInfo::keepLastBlind;
const NetGameInfo_EndRaiseMode NetGameInfo::EndRaiseMode_MIN;
const NetGameInfo_EndRaiseMode NetGameInfo::EndRaiseMode_MAX;
const int NetGameInfo::EndRaiseMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetGameInfo::kGameNameFieldNumber;
const int NetGameInfo::kNetGameTypeFieldNumber;
const int NetGameInfo::kMaxNumPlayersFieldNumber;
const int NetGameInfo::kRaiseIntervalModeFieldNumber;
const int NetGameInfo::kRaiseEveryHandsFieldNumber;
const int NetGameInfo::kRaiseEveryMinutesFieldNumber;
const int NetGameInfo::kEndRaiseModeFieldNumber;
const int NetGameInfo::kEndRaiseSmallBlindValueFieldNumber;
const int NetGameInfo::kProposedGuiSpeedFieldNumber;
const int NetGameInfo::kDelayBetweenHandsFieldNumber;
const int NetGameInfo::kPlayerActionTimeoutFieldNumber;
const int NetGameInfo::kFirstSmallBlindFieldNumber;
const int NetGameInfo::kStartMoneyFieldNumber;
const int NetGameInfo::kManualBlindsFieldNumber;
const int NetGameInfo::kAllowSpectatorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetGameInfo::NetGameInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetGameInfo)
}

void NetGameInfo::InitAsDefaultInstance() {
}

NetGameInfo::NetGameInfo(const NetGameInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetGameInfo)
}

void NetGameInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netgametype_ = 1;
  maxnumplayers_ = 0u;
  raiseintervalmode_ = 1;
  raiseeveryhands_ = 0u;
  raiseeveryminutes_ = 0u;
  endraisemode_ = 1;
  endraisesmallblindvalue_ = 0u;
  proposedguispeed_ = 0u;
  delaybetweenhands_ = 0u;
  playeractiontimeout_ = 0u;
  firstsmallblind_ = 0u;
  startmoney_ = 0u;
  allowspectators_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetGameInfo::~NetGameInfo() {
  // @@protoc_insertion_point(destructor:NetGameInfo)
  SharedDtor();
}

void NetGameInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NetGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetGameInfo& NetGameInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

NetGameInfo* NetGameInfo::default_instance_ = NULL;

NetGameInfo* NetGameInfo::New(::google::protobuf::Arena* arena) const {
  NetGameInfo* n = new NetGameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetGameInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NetGameInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NetGameInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(raiseeveryhands_, raiseeveryminutes_);
    if (has_gamename()) {
      gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    netgametype_ = 1;
    maxnumplayers_ = 0u;
    raiseintervalmode_ = 1;
    endraisemode_ = 1;
    endraisesmallblindvalue_ = 0u;
  }
  if (_has_bits_[8 / 32] & 24320u) {
    ZR_(proposedguispeed_, startmoney_);
    allowspectators_ = true;
  }

#undef ZR_HELPER_
#undef ZR_

  manualblinds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NetGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForNetGameInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:NetGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_netGameType;
        break;
      }

      // required .NetGameInfo.NetGameType netGameType = 2;
      case 2: {
        if (tag == 16) {
         parse_netGameType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameInfo_NetGameType_IsValid(value)) {
            set_netgametype(static_cast< ::NetGameInfo_NetGameType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxNumPlayers;
        break;
      }

      // required uint32 maxNumPlayers = 3;
      case 3: {
        if (tag == 24) {
         parse_maxNumPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnumplayers_)));
          set_has_maxnumplayers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_raiseIntervalMode;
        break;
      }

      // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
      case 4: {
        if (tag == 32) {
         parse_raiseIntervalMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameInfo_RaiseIntervalMode_IsValid(value)) {
            set_raiseintervalmode(static_cast< ::NetGameInfo_RaiseIntervalMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_raiseEveryHands;
        break;
      }

      // optional uint32 raiseEveryHands = 5;
      case 5: {
        if (tag == 40) {
         parse_raiseEveryHands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raiseeveryhands_)));
          set_has_raiseeveryhands();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_raiseEveryMinutes;
        break;
      }

      // optional uint32 raiseEveryMinutes = 6;
      case 6: {
        if (tag == 48) {
         parse_raiseEveryMinutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raiseeveryminutes_)));
          set_has_raiseeveryminutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_endRaiseMode;
        break;
      }

      // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
      case 7: {
        if (tag == 56) {
         parse_endRaiseMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameInfo_EndRaiseMode_IsValid(value)) {
            set_endraisemode(static_cast< ::NetGameInfo_EndRaiseMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_endRaiseSmallBlindValue;
        break;
      }

      // optional uint32 endRaiseSmallBlindValue = 8;
      case 8: {
        if (tag == 64) {
         parse_endRaiseSmallBlindValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endraisesmallblindvalue_)));
          set_has_endraisesmallblindvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_proposedGuiSpeed;
        break;
      }

      // required uint32 proposedGuiSpeed = 9;
      case 9: {
        if (tag == 72) {
         parse_proposedGuiSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proposedguispeed_)));
          set_has_proposedguispeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_delayBetweenHands;
        break;
      }

      // required uint32 delayBetweenHands = 10;
      case 10: {
        if (tag == 80) {
         parse_delayBetweenHands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delaybetweenhands_)));
          set_has_delaybetweenhands();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_playerActionTimeout;
        break;
      }

      // required uint32 playerActionTimeout = 11;
      case 11: {
        if (tag == 88) {
         parse_playerActionTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playeractiontimeout_)));
          set_has_playeractiontimeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_firstSmallBlind;
        break;
      }

      // required uint32 firstSmallBlind = 12;
      case 12: {
        if (tag == 96) {
         parse_firstSmallBlind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstsmallblind_)));
          set_has_firstsmallblind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_startMoney;
        break;
      }

      // required uint32 startMoney = 13;
      case 13: {
        if (tag == 104) {
         parse_startMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startmoney_)));
          set_has_startmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_manualBlinds;
        break;
      }

      // repeated uint32 manualBlinds = 14 [packed = true];
      case 14: {
        if (tag == 114) {
         parse_manualBlinds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_manualblinds())));
        } else if (tag == 112) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114, input, this->mutable_manualblinds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_allowSpectators;
        break;
      }

      // optional bool allowSpectators = 15 [default = true];
      case 15: {
        if (tag == 120) {
         parse_allowSpectators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowspectators_)));
          set_has_allowspectators();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetGameInfo)
  return false;
#undef DO_
}

void NetGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetGameInfo)
  // required string gameName = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamename(), output);
  }

  // required .NetGameInfo.NetGameType netGameType = 2;
  if (has_netgametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->netgametype(), output);
  }

  // required uint32 maxNumPlayers = 3;
  if (has_maxnumplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxnumplayers(), output);
  }

  // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
  if (has_raiseintervalmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->raiseintervalmode(), output);
  }

  // optional uint32 raiseEveryHands = 5;
  if (has_raiseeveryhands()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raiseeveryhands(), output);
  }

  // optional uint32 raiseEveryMinutes = 6;
  if (has_raiseeveryminutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->raiseeveryminutes(), output);
  }

  // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
  if (has_endraisemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->endraisemode(), output);
  }

  // optional uint32 endRaiseSmallBlindValue = 8;
  if (has_endraisesmallblindvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->endraisesmallblindvalue(), output);
  }

  // required uint32 proposedGuiSpeed = 9;
  if (has_proposedguispeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->proposedguispeed(), output);
  }

  // required uint32 delayBetweenHands = 10;
  if (has_delaybetweenhands()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->delaybetweenhands(), output);
  }

  // required uint32 playerActionTimeout = 11;
  if (has_playeractiontimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->playeractiontimeout(), output);
  }

  // required uint32 firstSmallBlind = 12;
  if (has_firstsmallblind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->firstsmallblind(), output);
  }

  // required uint32 startMoney = 13;
  if (has_startmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->startmoney(), output);
  }

  // repeated uint32 manualBlinds = 14 [packed = true];
  if (this->manualblinds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_manualblinds_cached_byte_size_);
  }
  for (int i = 0; i < this->manualblinds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->manualblinds(i), output);
  }

  // optional bool allowSpectators = 15 [default = true];
  if (has_allowspectators()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->allowspectators(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:NetGameInfo)
}

int NetGameInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NetGameInfo)
  int total_size = 0;

  if (has_gamename()) {
    // required string gameName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());
  }

  if (has_netgametype()) {
    // required .NetGameInfo.NetGameType netGameType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->netgametype());
  }

  if (has_maxnumplayers()) {
    // required uint32 maxNumPlayers = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxnumplayers());
  }

  if (has_raiseintervalmode()) {
    // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->raiseintervalmode());
  }

  if (has_endraisemode()) {
    // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->endraisemode());
  }

  if (has_proposedguispeed()) {
    // required uint32 proposedGuiSpeed = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proposedguispeed());
  }

  if (has_delaybetweenhands()) {
    // required uint32 delayBetweenHands = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delaybetweenhands());
  }

  if (has_playeractiontimeout()) {
    // required uint32 playerActionTimeout = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeractiontimeout());
  }

  if (has_firstsmallblind()) {
    // required uint32 firstSmallBlind = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firstsmallblind());
  }

  if (has_startmoney()) {
    // required uint32 startMoney = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startmoney());
  }

  return total_size;
}
int NetGameInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NetGameInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00001f4f) ^ 0x00001f4f) == 0) {  // All required fields are present.
    // required string gameName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());

    // required .NetGameInfo.NetGameType netGameType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->netgametype());

    // required uint32 maxNumPlayers = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxnumplayers());

    // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->raiseintervalmode());

    // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->endraisemode());

    // required uint32 proposedGuiSpeed = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proposedguispeed());

    // required uint32 delayBetweenHands = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delaybetweenhands());

    // required uint32 playerActionTimeout = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeractiontimeout());

    // required uint32 firstSmallBlind = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firstsmallblind());

    // required uint32 startMoney = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startmoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 176u) {
    // optional uint32 raiseEveryHands = 5;
    if (has_raiseeveryhands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raiseeveryhands());
    }

    // optional uint32 raiseEveryMinutes = 6;
    if (has_raiseeveryminutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raiseeveryminutes());
    }

    // optional uint32 endRaiseSmallBlindValue = 8;
    if (has_endraisesmallblindvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endraisesmallblindvalue());
    }

  }
  // optional bool allowSpectators = 15 [default = true];
  if (has_allowspectators()) {
    total_size += 1 + 1;
  }

  // repeated uint32 manualBlinds = 14 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->manualblinds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->manualblinds(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _manualblinds_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetGameInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetGameInfo*>(&from));
}

void NetGameInfo::MergeFrom(const NetGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetGameInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  manualblinds_.MergeFrom(from.manualblinds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamename()) {
      set_has_gamename();
      gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
    }
    if (from.has_netgametype()) {
      set_netgametype(from.netgametype());
    }
    if (from.has_maxnumplayers()) {
      set_maxnumplayers(from.maxnumplayers());
    }
    if (from.has_raiseintervalmode()) {
      set_raiseintervalmode(from.raiseintervalmode());
    }
    if (from.has_raiseeveryhands()) {
      set_raiseeveryhands(from.raiseeveryhands());
    }
    if (from.has_raiseeveryminutes()) {
      set_raiseeveryminutes(from.raiseeveryminutes());
    }
    if (from.has_endraisemode()) {
      set_endraisemode(from.endraisemode());
    }
    if (from.has_endraisesmallblindvalue()) {
      set_endraisesmallblindvalue(from.endraisesmallblindvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_proposedguispeed()) {
      set_proposedguispeed(from.proposedguispeed());
    }
    if (from.has_delaybetweenhands()) {
      set_delaybetweenhands(from.delaybetweenhands());
    }
    if (from.has_playeractiontimeout()) {
      set_playeractiontimeout(from.playeractiontimeout());
    }
    if (from.has_firstsmallblind()) {
      set_firstsmallblind(from.firstsmallblind());
    }
    if (from.has_startmoney()) {
      set_startmoney(from.startmoney());
    }
    if (from.has_allowspectators()) {
      set_allowspectators(from.allowspectators());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void NetGameInfo::CopyFrom(const NetGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetGameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001f4f) != 0x00001f4f) return false;

  return true;
}

void NetGameInfo::Swap(NetGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetGameInfo::InternalSwap(NetGameInfo* other) {
  gamename_.Swap(&other->gamename_);
  std::swap(netgametype_, other->netgametype_);
  std::swap(maxnumplayers_, other->maxnumplayers_);
  std::swap(raiseintervalmode_, other->raiseintervalmode_);
  std::swap(raiseeveryhands_, other->raiseeveryhands_);
  std::swap(raiseeveryminutes_, other->raiseeveryminutes_);
  std::swap(endraisemode_, other->endraisemode_);
  std::swap(endraisesmallblindvalue_, other->endraisesmallblindvalue_);
  std::swap(proposedguispeed_, other->proposedguispeed_);
  std::swap(delaybetweenhands_, other->delaybetweenhands_);
  std::swap(playeractiontimeout_, other->playeractiontimeout_);
  std::swap(firstsmallblind_, other->firstsmallblind_);
  std::swap(startmoney_, other->startmoney_);
  manualblinds_.UnsafeArenaSwap(&other->manualblinds_);
  std::swap(allowspectators_, other->allowspectators_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetGameInfo::GetTypeName() const {
  return "NetGameInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetGameInfo

// required string gameName = 1;
bool NetGameInfo::has_gamename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetGameInfo::set_has_gamename() {
  _has_bits_[0] |= 0x00000001u;
}
void NetGameInfo::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetGameInfo::clear_gamename() {
  gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamename();
}
 const ::std::string& NetGameInfo::gamename() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.gameName)
  return gamename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetGameInfo::set_gamename(const ::std::string& value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetGameInfo.gameName)
}
 void NetGameInfo::set_gamename(const char* value) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetGameInfo.gameName)
}
 void NetGameInfo::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  gamename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetGameInfo.gameName)
}
 ::std::string* NetGameInfo::mutable_gamename() {
  set_has_gamename();
  // @@protoc_insertion_point(field_mutable:NetGameInfo.gameName)
  return gamename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NetGameInfo::release_gamename() {
  // @@protoc_insertion_point(field_release:NetGameInfo.gameName)
  clear_has_gamename();
  return gamename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetGameInfo::set_allocated_gamename(::std::string* gamename) {
  if (gamename != NULL) {
    set_has_gamename();
  } else {
    clear_has_gamename();
  }
  gamename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamename);
  // @@protoc_insertion_point(field_set_allocated:NetGameInfo.gameName)
}

// required .NetGameInfo.NetGameType netGameType = 2;
bool NetGameInfo::has_netgametype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetGameInfo::set_has_netgametype() {
  _has_bits_[0] |= 0x00000002u;
}
void NetGameInfo::clear_has_netgametype() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetGameInfo::clear_netgametype() {
  netgametype_ = 1;
  clear_has_netgametype();
}
 ::NetGameInfo_NetGameType NetGameInfo::netgametype() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.netGameType)
  return static_cast< ::NetGameInfo_NetGameType >(netgametype_);
}
 void NetGameInfo::set_netgametype(::NetGameInfo_NetGameType value) {
  assert(::NetGameInfo_NetGameType_IsValid(value));
  set_has_netgametype();
  netgametype_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.netGameType)
}

// required uint32 maxNumPlayers = 3;
bool NetGameInfo::has_maxnumplayers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetGameInfo::set_has_maxnumplayers() {
  _has_bits_[0] |= 0x00000004u;
}
void NetGameInfo::clear_has_maxnumplayers() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetGameInfo::clear_maxnumplayers() {
  maxnumplayers_ = 0u;
  clear_has_maxnumplayers();
}
 ::google::protobuf::uint32 NetGameInfo::maxnumplayers() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.maxNumPlayers)
  return maxnumplayers_;
}
 void NetGameInfo::set_maxnumplayers(::google::protobuf::uint32 value) {
  set_has_maxnumplayers();
  maxnumplayers_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.maxNumPlayers)
}

// required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
bool NetGameInfo::has_raiseintervalmode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetGameInfo::set_has_raiseintervalmode() {
  _has_bits_[0] |= 0x00000008u;
}
void NetGameInfo::clear_has_raiseintervalmode() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetGameInfo::clear_raiseintervalmode() {
  raiseintervalmode_ = 1;
  clear_has_raiseintervalmode();
}
 ::NetGameInfo_RaiseIntervalMode NetGameInfo::raiseintervalmode() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.raiseIntervalMode)
  return static_cast< ::NetGameInfo_RaiseIntervalMode >(raiseintervalmode_);
}
 void NetGameInfo::set_raiseintervalmode(::NetGameInfo_RaiseIntervalMode value) {
  assert(::NetGameInfo_RaiseIntervalMode_IsValid(value));
  set_has_raiseintervalmode();
  raiseintervalmode_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.raiseIntervalMode)
}

// optional uint32 raiseEveryHands = 5;
bool NetGameInfo::has_raiseeveryhands() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetGameInfo::set_has_raiseeveryhands() {
  _has_bits_[0] |= 0x00000010u;
}
void NetGameInfo::clear_has_raiseeveryhands() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetGameInfo::clear_raiseeveryhands() {
  raiseeveryhands_ = 0u;
  clear_has_raiseeveryhands();
}
 ::google::protobuf::uint32 NetGameInfo::raiseeveryhands() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.raiseEveryHands)
  return raiseeveryhands_;
}
 void NetGameInfo::set_raiseeveryhands(::google::protobuf::uint32 value) {
  set_has_raiseeveryhands();
  raiseeveryhands_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.raiseEveryHands)
}

// optional uint32 raiseEveryMinutes = 6;
bool NetGameInfo::has_raiseeveryminutes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NetGameInfo::set_has_raiseeveryminutes() {
  _has_bits_[0] |= 0x00000020u;
}
void NetGameInfo::clear_has_raiseeveryminutes() {
  _has_bits_[0] &= ~0x00000020u;
}
void NetGameInfo::clear_raiseeveryminutes() {
  raiseeveryminutes_ = 0u;
  clear_has_raiseeveryminutes();
}
 ::google::protobuf::uint32 NetGameInfo::raiseeveryminutes() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.raiseEveryMinutes)
  return raiseeveryminutes_;
}
 void NetGameInfo::set_raiseeveryminutes(::google::protobuf::uint32 value) {
  set_has_raiseeveryminutes();
  raiseeveryminutes_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.raiseEveryMinutes)
}

// required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
bool NetGameInfo::has_endraisemode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NetGameInfo::set_has_endraisemode() {
  _has_bits_[0] |= 0x00000040u;
}
void NetGameInfo::clear_has_endraisemode() {
  _has_bits_[0] &= ~0x00000040u;
}
void NetGameInfo::clear_endraisemode() {
  endraisemode_ = 1;
  clear_has_endraisemode();
}
 ::NetGameInfo_EndRaiseMode NetGameInfo::endraisemode() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.endRaiseMode)
  return static_cast< ::NetGameInfo_EndRaiseMode >(endraisemode_);
}
 void NetGameInfo::set_endraisemode(::NetGameInfo_EndRaiseMode value) {
  assert(::NetGameInfo_EndRaiseMode_IsValid(value));
  set_has_endraisemode();
  endraisemode_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.endRaiseMode)
}

// optional uint32 endRaiseSmallBlindValue = 8;
bool NetGameInfo::has_endraisesmallblindvalue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NetGameInfo::set_has_endraisesmallblindvalue() {
  _has_bits_[0] |= 0x00000080u;
}
void NetGameInfo::clear_has_endraisesmallblindvalue() {
  _has_bits_[0] &= ~0x00000080u;
}
void NetGameInfo::clear_endraisesmallblindvalue() {
  endraisesmallblindvalue_ = 0u;
  clear_has_endraisesmallblindvalue();
}
 ::google::protobuf::uint32 NetGameInfo::endraisesmallblindvalue() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.endRaiseSmallBlindValue)
  return endraisesmallblindvalue_;
}
 void NetGameInfo::set_endraisesmallblindvalue(::google::protobuf::uint32 value) {
  set_has_endraisesmallblindvalue();
  endraisesmallblindvalue_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.endRaiseSmallBlindValue)
}

// required uint32 proposedGuiSpeed = 9;
bool NetGameInfo::has_proposedguispeed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NetGameInfo::set_has_proposedguispeed() {
  _has_bits_[0] |= 0x00000100u;
}
void NetGameInfo::clear_has_proposedguispeed() {
  _has_bits_[0] &= ~0x00000100u;
}
void NetGameInfo::clear_proposedguispeed() {
  proposedguispeed_ = 0u;
  clear_has_proposedguispeed();
}
 ::google::protobuf::uint32 NetGameInfo::proposedguispeed() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.proposedGuiSpeed)
  return proposedguispeed_;
}
 void NetGameInfo::set_proposedguispeed(::google::protobuf::uint32 value) {
  set_has_proposedguispeed();
  proposedguispeed_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.proposedGuiSpeed)
}

// required uint32 delayBetweenHands = 10;
bool NetGameInfo::has_delaybetweenhands() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NetGameInfo::set_has_delaybetweenhands() {
  _has_bits_[0] |= 0x00000200u;
}
void NetGameInfo::clear_has_delaybetweenhands() {
  _has_bits_[0] &= ~0x00000200u;
}
void NetGameInfo::clear_delaybetweenhands() {
  delaybetweenhands_ = 0u;
  clear_has_delaybetweenhands();
}
 ::google::protobuf::uint32 NetGameInfo::delaybetweenhands() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.delayBetweenHands)
  return delaybetweenhands_;
}
 void NetGameInfo::set_delaybetweenhands(::google::protobuf::uint32 value) {
  set_has_delaybetweenhands();
  delaybetweenhands_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.delayBetweenHands)
}

// required uint32 playerActionTimeout = 11;
bool NetGameInfo::has_playeractiontimeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NetGameInfo::set_has_playeractiontimeout() {
  _has_bits_[0] |= 0x00000400u;
}
void NetGameInfo::clear_has_playeractiontimeout() {
  _has_bits_[0] &= ~0x00000400u;
}
void NetGameInfo::clear_playeractiontimeout() {
  playeractiontimeout_ = 0u;
  clear_has_playeractiontimeout();
}
 ::google::protobuf::uint32 NetGameInfo::playeractiontimeout() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.playerActionTimeout)
  return playeractiontimeout_;
}
 void NetGameInfo::set_playeractiontimeout(::google::protobuf::uint32 value) {
  set_has_playeractiontimeout();
  playeractiontimeout_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.playerActionTimeout)
}

// required uint32 firstSmallBlind = 12;
bool NetGameInfo::has_firstsmallblind() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void NetGameInfo::set_has_firstsmallblind() {
  _has_bits_[0] |= 0x00000800u;
}
void NetGameInfo::clear_has_firstsmallblind() {
  _has_bits_[0] &= ~0x00000800u;
}
void NetGameInfo::clear_firstsmallblind() {
  firstsmallblind_ = 0u;
  clear_has_firstsmallblind();
}
 ::google::protobuf::uint32 NetGameInfo::firstsmallblind() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.firstSmallBlind)
  return firstsmallblind_;
}
 void NetGameInfo::set_firstsmallblind(::google::protobuf::uint32 value) {
  set_has_firstsmallblind();
  firstsmallblind_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.firstSmallBlind)
}

// required uint32 startMoney = 13;
bool NetGameInfo::has_startmoney() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void NetGameInfo::set_has_startmoney() {
  _has_bits_[0] |= 0x00001000u;
}
void NetGameInfo::clear_has_startmoney() {
  _has_bits_[0] &= ~0x00001000u;
}
void NetGameInfo::clear_startmoney() {
  startmoney_ = 0u;
  clear_has_startmoney();
}
 ::google::protobuf::uint32 NetGameInfo::startmoney() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.startMoney)
  return startmoney_;
}
 void NetGameInfo::set_startmoney(::google::protobuf::uint32 value) {
  set_has_startmoney();
  startmoney_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.startMoney)
}

// repeated uint32 manualBlinds = 14 [packed = true];
int NetGameInfo::manualblinds_size() const {
  return manualblinds_.size();
}
void NetGameInfo::clear_manualblinds() {
  manualblinds_.Clear();
}
 ::google::protobuf::uint32 NetGameInfo::manualblinds(int index) const {
  // @@protoc_insertion_point(field_get:NetGameInfo.manualBlinds)
  return manualblinds_.Get(index);
}
 void NetGameInfo::set_manualblinds(int index, ::google::protobuf::uint32 value) {
  manualblinds_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetGameInfo.manualBlinds)
}
 void NetGameInfo::add_manualblinds(::google::protobuf::uint32 value) {
  manualblinds_.Add(value);
  // @@protoc_insertion_point(field_add:NetGameInfo.manualBlinds)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NetGameInfo::manualblinds() const {
  // @@protoc_insertion_point(field_list:NetGameInfo.manualBlinds)
  return manualblinds_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NetGameInfo::mutable_manualblinds() {
  // @@protoc_insertion_point(field_mutable_list:NetGameInfo.manualBlinds)
  return &manualblinds_;
}

// optional bool allowSpectators = 15 [default = true];
bool NetGameInfo::has_allowspectators() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void NetGameInfo::set_has_allowspectators() {
  _has_bits_[0] |= 0x00004000u;
}
void NetGameInfo::clear_has_allowspectators() {
  _has_bits_[0] &= ~0x00004000u;
}
void NetGameInfo::clear_allowspectators() {
  allowspectators_ = true;
  clear_has_allowspectators();
}
 bool NetGameInfo::allowspectators() const {
  // @@protoc_insertion_point(field_get:NetGameInfo.allowSpectators)
  return allowspectators_;
}
 void NetGameInfo::set_allowspectators(bool value) {
  set_has_allowspectators();
  allowspectators_ = value;
  // @@protoc_insertion_point(field_set:NetGameInfo.allowSpectators)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPlayerResult(
    PlayerResult* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerResult::kPlayerIdFieldNumber;
const int PlayerResult::kResultCard1FieldNumber;
const int PlayerResult::kResultCard2FieldNumber;
const int PlayerResult::kBestHandPositionFieldNumber;
const int PlayerResult::kMoneyWonFieldNumber;
const int PlayerResult::kPlayerMoneyFieldNumber;
const int PlayerResult::kCardsValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerResult::PlayerResult()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerResult)
}

void PlayerResult::InitAsDefaultInstance() {
}

PlayerResult::PlayerResult(const PlayerResult& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerResult)
}

void PlayerResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_ = 0u;
  resultcard1_ = 0u;
  resultcard2_ = 0u;
  moneywon_ = 0u;
  playermoney_ = 0u;
  cardsvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:PlayerResult)
  SharedDtor();
}

void PlayerResult::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerResult& PlayerResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

PlayerResult* PlayerResult::default_instance_ = NULL;

PlayerResult* PlayerResult::New(::google::protobuf::Arena* arena) const {
  PlayerResult* n = new PlayerResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 119u) {
    ZR_(playerid_, resultcard1_);
    ZR_(resultcard2_, cardsvalue_);
  }

#undef ZR_HELPER_
#undef ZR_

  besthandposition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPlayerResult, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PlayerResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_resultCard1;
        break;
      }

      // required uint32 resultCard1 = 2;
      case 2: {
        if (tag == 16) {
         parse_resultCard1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcard1_)));
          set_has_resultcard1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resultCard2;
        break;
      }

      // required uint32 resultCard2 = 3;
      case 3: {
        if (tag == 24) {
         parse_resultCard2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcard2_)));
          set_has_resultcard2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bestHandPosition;
        break;
      }

      // repeated uint32 bestHandPosition = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_bestHandPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_besthandposition())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_besthandposition())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_moneyWon;
        break;
      }

      // required uint32 moneyWon = 5;
      case 5: {
        if (tag == 40) {
         parse_moneyWon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneywon_)));
          set_has_moneywon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_playerMoney;
        break;
      }

      // required uint32 playerMoney = 6;
      case 6: {
        if (tag == 48) {
         parse_playerMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
          set_has_playermoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cardsValue;
        break;
      }

      // optional uint32 cardsValue = 7;
      case 7: {
        if (tag == 56) {
         parse_cardsValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardsvalue_)));
          set_has_cardsvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerResult)
  return false;
#undef DO_
}

void PlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerResult)
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 resultCard1 = 2;
  if (has_resultcard1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resultcard1(), output);
  }

  // required uint32 resultCard2 = 3;
  if (has_resultcard2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resultcard2(), output);
  }

  // repeated uint32 bestHandPosition = 4 [packed = true];
  if (this->besthandposition_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_besthandposition_cached_byte_size_);
  }
  for (int i = 0; i < this->besthandposition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->besthandposition(i), output);
  }

  // required uint32 moneyWon = 5;
  if (has_moneywon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->moneywon(), output);
  }

  // required uint32 playerMoney = 6;
  if (has_playermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playermoney(), output);
  }

  // optional uint32 cardsValue = 7;
  if (has_cardsvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cardsvalue(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerResult)
}

int PlayerResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerResult)
  int total_size = 0;

  if (has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_resultcard1()) {
    // required uint32 resultCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultcard1());
  }

  if (has_resultcard2()) {
    // required uint32 resultCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultcard2());
  }

  if (has_moneywon()) {
    // required uint32 moneyWon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moneywon());
  }

  if (has_playermoney()) {
    // required uint32 playerMoney = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());
  }

  return total_size;
}
int PlayerResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerResult)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required uint32 resultCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultcard1());

    // required uint32 resultCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultcard2());

    // required uint32 moneyWon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moneywon());

    // required uint32 playerMoney = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 cardsValue = 7;
  if (has_cardsvalue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cardsvalue());
  }

  // repeated uint32 bestHandPosition = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->besthandposition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->besthandposition(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _besthandposition_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerResult*>(&from));
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  besthandposition_.MergeFrom(from.besthandposition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_resultcard1()) {
      set_resultcard1(from.resultcard1());
    }
    if (from.has_resultcard2()) {
      set_resultcard2(from.resultcard2());
    }
    if (from.has_moneywon()) {
      set_moneywon(from.moneywon());
    }
    if (from.has_playermoney()) {
      set_playermoney(from.playermoney());
    }
    if (from.has_cardsvalue()) {
      set_cardsvalue(from.cardsvalue());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  return true;
}

void PlayerResult::Swap(PlayerResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerResult::InternalSwap(PlayerResult* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(resultcard1_, other->resultcard1_);
  std::swap(resultcard2_, other->resultcard2_);
  besthandposition_.UnsafeArenaSwap(&other->besthandposition_);
  std::swap(moneywon_, other->moneywon_);
  std::swap(playermoney_, other->playermoney_);
  std::swap(cardsvalue_, other->cardsvalue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerResult::GetTypeName() const {
  return "PlayerResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerResult

// required uint32 playerId = 1;
bool PlayerResult::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerResult::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerResult::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerResult::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 PlayerResult::playerid() const {
  // @@protoc_insertion_point(field_get:PlayerResult.playerId)
  return playerid_;
}
 void PlayerResult::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:PlayerResult.playerId)
}

// required uint32 resultCard1 = 2;
bool PlayerResult::has_resultcard1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerResult::set_has_resultcard1() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerResult::clear_has_resultcard1() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerResult::clear_resultcard1() {
  resultcard1_ = 0u;
  clear_has_resultcard1();
}
 ::google::protobuf::uint32 PlayerResult::resultcard1() const {
  // @@protoc_insertion_point(field_get:PlayerResult.resultCard1)
  return resultcard1_;
}
 void PlayerResult::set_resultcard1(::google::protobuf::uint32 value) {
  set_has_resultcard1();
  resultcard1_ = value;
  // @@protoc_insertion_point(field_set:PlayerResult.resultCard1)
}

// required uint32 resultCard2 = 3;
bool PlayerResult::has_resultcard2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerResult::set_has_resultcard2() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerResult::clear_has_resultcard2() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerResult::clear_resultcard2() {
  resultcard2_ = 0u;
  clear_has_resultcard2();
}
 ::google::protobuf::uint32 PlayerResult::resultcard2() const {
  // @@protoc_insertion_point(field_get:PlayerResult.resultCard2)
  return resultcard2_;
}
 void PlayerResult::set_resultcard2(::google::protobuf::uint32 value) {
  set_has_resultcard2();
  resultcard2_ = value;
  // @@protoc_insertion_point(field_set:PlayerResult.resultCard2)
}

// repeated uint32 bestHandPosition = 4 [packed = true];
int PlayerResult::besthandposition_size() const {
  return besthandposition_.size();
}
void PlayerResult::clear_besthandposition() {
  besthandposition_.Clear();
}
 ::google::protobuf::uint32 PlayerResult::besthandposition(int index) const {
  // @@protoc_insertion_point(field_get:PlayerResult.bestHandPosition)
  return besthandposition_.Get(index);
}
 void PlayerResult::set_besthandposition(int index, ::google::protobuf::uint32 value) {
  besthandposition_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerResult.bestHandPosition)
}
 void PlayerResult::add_besthandposition(::google::protobuf::uint32 value) {
  besthandposition_.Add(value);
  // @@protoc_insertion_point(field_add:PlayerResult.bestHandPosition)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerResult::besthandposition() const {
  // @@protoc_insertion_point(field_list:PlayerResult.bestHandPosition)
  return besthandposition_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerResult::mutable_besthandposition() {
  // @@protoc_insertion_point(field_mutable_list:PlayerResult.bestHandPosition)
  return &besthandposition_;
}

// required uint32 moneyWon = 5;
bool PlayerResult::has_moneywon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayerResult::set_has_moneywon() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayerResult::clear_has_moneywon() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayerResult::clear_moneywon() {
  moneywon_ = 0u;
  clear_has_moneywon();
}
 ::google::protobuf::uint32 PlayerResult::moneywon() const {
  // @@protoc_insertion_point(field_get:PlayerResult.moneyWon)
  return moneywon_;
}
 void PlayerResult::set_moneywon(::google::protobuf::uint32 value) {
  set_has_moneywon();
  moneywon_ = value;
  // @@protoc_insertion_point(field_set:PlayerResult.moneyWon)
}

// required uint32 playerMoney = 6;
bool PlayerResult::has_playermoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlayerResult::set_has_playermoney() {
  _has_bits_[0] |= 0x00000020u;
}
void PlayerResult::clear_has_playermoney() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlayerResult::clear_playermoney() {
  playermoney_ = 0u;
  clear_has_playermoney();
}
 ::google::protobuf::uint32 PlayerResult::playermoney() const {
  // @@protoc_insertion_point(field_get:PlayerResult.playerMoney)
  return playermoney_;
}
 void PlayerResult::set_playermoney(::google::protobuf::uint32 value) {
  set_has_playermoney();
  playermoney_ = value;
  // @@protoc_insertion_point(field_set:PlayerResult.playerMoney)
}

// optional uint32 cardsValue = 7;
bool PlayerResult::has_cardsvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlayerResult::set_has_cardsvalue() {
  _has_bits_[0] |= 0x00000040u;
}
void PlayerResult::clear_has_cardsvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlayerResult::clear_cardsvalue() {
  cardsvalue_ = 0u;
  clear_has_cardsvalue();
}
 ::google::protobuf::uint32 PlayerResult::cardsvalue() const {
  // @@protoc_insertion_point(field_get:PlayerResult.cardsValue)
  return cardsvalue_;
}
 void PlayerResult::set_cardsvalue(::google::protobuf::uint32 value) {
  set_has_cardsvalue();
  cardsvalue_ = value;
  // @@protoc_insertion_point(field_set:PlayerResult.cardsValue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAnnounceMessage(
    AnnounceMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool AnnounceMessage_ServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AnnounceMessage_ServerType AnnounceMessage::serverTypeLAN;
const AnnounceMessage_ServerType AnnounceMessage::serverTypeInternetNoAuth;
const AnnounceMessage_ServerType AnnounceMessage::serverTypeInternetAuth;
const AnnounceMessage_ServerType AnnounceMessage::ServerType_MIN;
const AnnounceMessage_ServerType AnnounceMessage::ServerType_MAX;
const int AnnounceMessage::ServerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForAnnounceMessage_Version(
    AnnounceMessage_Version* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnounceMessage_Version::kMajorVersionFieldNumber;
const int AnnounceMessage_Version::kMinorVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnounceMessage_Version::AnnounceMessage_Version()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AnnounceMessage.Version)
}

void AnnounceMessage_Version::InitAsDefaultInstance() {
}

AnnounceMessage_Version::AnnounceMessage_Version(const AnnounceMessage_Version& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AnnounceMessage.Version)
}

void AnnounceMessage_Version::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  majorversion_ = 0u;
  minorversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnounceMessage_Version::~AnnounceMessage_Version() {
  // @@protoc_insertion_point(destructor:AnnounceMessage.Version)
  SharedDtor();
}

void AnnounceMessage_Version::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AnnounceMessage_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AnnounceMessage_Version& AnnounceMessage_Version::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AnnounceMessage_Version* AnnounceMessage_Version::default_instance_ = NULL;

AnnounceMessage_Version* AnnounceMessage_Version::New(::google::protobuf::Arena* arena) const {
  AnnounceMessage_Version* n = new AnnounceMessage_Version;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnounceMessage_Version::Clear() {
// @@protoc_insertion_point(message_clear_start:AnnounceMessage.Version)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AnnounceMessage_Version, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AnnounceMessage_Version*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(majorversion_, minorversion_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AnnounceMessage_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAnnounceMessage_Version, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AnnounceMessage.Version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 majorVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &majorversion_)));
          set_has_majorversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minorVersion;
        break;
      }

      // required uint32 minorVersion = 2;
      case 2: {
        if (tag == 16) {
         parse_minorVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minorversion_)));
          set_has_minorversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AnnounceMessage.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AnnounceMessage.Version)
  return false;
#undef DO_
}

void AnnounceMessage_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AnnounceMessage.Version)
  // required uint32 majorVersion = 1;
  if (has_majorversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->majorversion(), output);
  }

  // required uint32 minorVersion = 2;
  if (has_minorversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minorversion(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AnnounceMessage.Version)
}

int AnnounceMessage_Version::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AnnounceMessage.Version)
  int total_size = 0;

  if (has_majorversion()) {
    // required uint32 majorVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->majorversion());
  }

  if (has_minorversion()) {
    // required uint32 minorVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minorversion());
  }

  return total_size;
}
int AnnounceMessage_Version::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AnnounceMessage.Version)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 majorVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->majorversion());

    // required uint32 minorVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minorversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnounceMessage_Version::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnnounceMessage_Version*>(&from));
}

void AnnounceMessage_Version::MergeFrom(const AnnounceMessage_Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnnounceMessage.Version)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_majorversion()) {
      set_majorversion(from.majorversion());
    }
    if (from.has_minorversion()) {
      set_minorversion(from.minorversion());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AnnounceMessage_Version::CopyFrom(const AnnounceMessage_Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnnounceMessage.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessage_Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AnnounceMessage_Version::Swap(AnnounceMessage_Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnounceMessage_Version::InternalSwap(AnnounceMessage_Version* other) {
  std::swap(majorversion_, other->majorversion_);
  std::swap(minorversion_, other->minorversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AnnounceMessage_Version::GetTypeName() const {
  return "AnnounceMessage.Version";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnounceMessage::kProtocolVersionFieldNumber;
const int AnnounceMessage::kLatestGameVersionFieldNumber;
const int AnnounceMessage::kLatestBetaRevisionFieldNumber;
const int AnnounceMessage::kServerTypeFieldNumber;
const int AnnounceMessage::kNumPlayersOnServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnounceMessage::AnnounceMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AnnounceMessage)
}

void AnnounceMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protocolversion_ = const_cast< ::AnnounceMessage_Version*>(
      ::AnnounceMessage_Version::internal_default_instance());
#else
  protocolversion_ = const_cast< ::AnnounceMessage_Version*>(&::AnnounceMessage_Version::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  latestgameversion_ = const_cast< ::AnnounceMessage_Version*>(
      ::AnnounceMessage_Version::internal_default_instance());
#else
  latestgameversion_ = const_cast< ::AnnounceMessage_Version*>(&::AnnounceMessage_Version::default_instance());
#endif
}

AnnounceMessage::AnnounceMessage(const AnnounceMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AnnounceMessage)
}

void AnnounceMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolversion_ = NULL;
  latestgameversion_ = NULL;
  latestbetarevision_ = 0u;
  servertype_ = 0;
  numplayersonserver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnounceMessage::~AnnounceMessage() {
  // @@protoc_insertion_point(destructor:AnnounceMessage)
  SharedDtor();
}

void AnnounceMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete protocolversion_;
    delete latestgameversion_;
  }
}

void AnnounceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AnnounceMessage& AnnounceMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AnnounceMessage* AnnounceMessage::default_instance_ = NULL;

AnnounceMessage* AnnounceMessage::New(::google::protobuf::Arena* arena) const {
  AnnounceMessage* n = new AnnounceMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnounceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AnnounceMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AnnounceMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AnnounceMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(latestbetarevision_, numplayersonserver_);
    if (has_protocolversion()) {
      if (protocolversion_ != NULL) protocolversion_->::AnnounceMessage_Version::Clear();
    }
    if (has_latestgameversion()) {
      if (latestgameversion_ != NULL) latestgameversion_->::AnnounceMessage_Version::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AnnounceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAnnounceMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AnnounceMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AnnounceMessage.Version protocolVersion = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protocolversion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_latestGameVersion;
        break;
      }

      // required .AnnounceMessage.Version latestGameVersion = 2;
      case 2: {
        if (tag == 18) {
         parse_latestGameVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latestgameversion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_latestBetaRevision;
        break;
      }

      // required uint32 latestBetaRevision = 3;
      case 3: {
        if (tag == 24) {
         parse_latestBetaRevision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latestbetarevision_)));
          set_has_latestbetarevision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_serverType;
        break;
      }

      // required .AnnounceMessage.ServerType serverType = 4;
      case 4: {
        if (tag == 32) {
         parse_serverType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AnnounceMessage_ServerType_IsValid(value)) {
            set_servertype(static_cast< ::AnnounceMessage_ServerType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_numPlayersOnServer;
        break;
      }

      // required uint32 numPlayersOnServer = 5;
      case 5: {
        if (tag == 40) {
         parse_numPlayersOnServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numplayersonserver_)));
          set_has_numplayersonserver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AnnounceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AnnounceMessage)
  return false;
#undef DO_
}

void AnnounceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AnnounceMessage)
  // required .AnnounceMessage.Version protocolVersion = 1;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->protocolversion_, output);
  }

  // required .AnnounceMessage.Version latestGameVersion = 2;
  if (has_latestgameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->latestgameversion_, output);
  }

  // required uint32 latestBetaRevision = 3;
  if (has_latestbetarevision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->latestbetarevision(), output);
  }

  // required .AnnounceMessage.ServerType serverType = 4;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->servertype(), output);
  }

  // required uint32 numPlayersOnServer = 5;
  if (has_numplayersonserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->numplayersonserver(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AnnounceMessage)
}

int AnnounceMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AnnounceMessage)
  int total_size = 0;

  if (has_protocolversion()) {
    // required .AnnounceMessage.Version protocolVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->protocolversion_);
  }

  if (has_latestgameversion()) {
    // required .AnnounceMessage.Version latestGameVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->latestgameversion_);
  }

  if (has_latestbetarevision()) {
    // required uint32 latestBetaRevision = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latestbetarevision());
  }

  if (has_servertype()) {
    // required .AnnounceMessage.ServerType serverType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->servertype());
  }

  if (has_numplayersonserver()) {
    // required uint32 numPlayersOnServer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numplayersonserver());
  }

  return total_size;
}
int AnnounceMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AnnounceMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .AnnounceMessage.Version protocolVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->protocolversion_);

    // required .AnnounceMessage.Version latestGameVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->latestgameversion_);

    // required uint32 latestBetaRevision = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latestbetarevision());

    // required .AnnounceMessage.ServerType serverType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->servertype());

    // required uint32 numPlayersOnServer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numplayersonserver());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnounceMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnnounceMessage*>(&from));
}

void AnnounceMessage::MergeFrom(const AnnounceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnnounceMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolversion()) {
      mutable_protocolversion()->::AnnounceMessage_Version::MergeFrom(from.protocolversion());
    }
    if (from.has_latestgameversion()) {
      mutable_latestgameversion()->::AnnounceMessage_Version::MergeFrom(from.latestgameversion());
    }
    if (from.has_latestbetarevision()) {
      set_latestbetarevision(from.latestbetarevision());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_numplayersonserver()) {
      set_numplayersonserver(from.numplayersonserver());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AnnounceMessage::CopyFrom(const AnnounceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnnounceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_protocolversion()) {
    if (!this->protocolversion_->IsInitialized()) return false;
  }
  if (has_latestgameversion()) {
    if (!this->latestgameversion_->IsInitialized()) return false;
  }
  return true;
}

void AnnounceMessage::Swap(AnnounceMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnounceMessage::InternalSwap(AnnounceMessage* other) {
  std::swap(protocolversion_, other->protocolversion_);
  std::swap(latestgameversion_, other->latestgameversion_);
  std::swap(latestbetarevision_, other->latestbetarevision_);
  std::swap(servertype_, other->servertype_);
  std::swap(numplayersonserver_, other->numplayersonserver_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AnnounceMessage::GetTypeName() const {
  return "AnnounceMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnounceMessage_Version

// required uint32 majorVersion = 1;
bool AnnounceMessage_Version::has_majorversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AnnounceMessage_Version::set_has_majorversion() {
  _has_bits_[0] |= 0x00000001u;
}
void AnnounceMessage_Version::clear_has_majorversion() {
  _has_bits_[0] &= ~0x00000001u;
}
void AnnounceMessage_Version::clear_majorversion() {
  majorversion_ = 0u;
  clear_has_majorversion();
}
 ::google::protobuf::uint32 AnnounceMessage_Version::majorversion() const {
  // @@protoc_insertion_point(field_get:AnnounceMessage.Version.majorVersion)
  return majorversion_;
}
 void AnnounceMessage_Version::set_majorversion(::google::protobuf::uint32 value) {
  set_has_majorversion();
  majorversion_ = value;
  // @@protoc_insertion_point(field_set:AnnounceMessage.Version.majorVersion)
}

// required uint32 minorVersion = 2;
bool AnnounceMessage_Version::has_minorversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AnnounceMessage_Version::set_has_minorversion() {
  _has_bits_[0] |= 0x00000002u;
}
void AnnounceMessage_Version::clear_has_minorversion() {
  _has_bits_[0] &= ~0x00000002u;
}
void AnnounceMessage_Version::clear_minorversion() {
  minorversion_ = 0u;
  clear_has_minorversion();
}
 ::google::protobuf::uint32 AnnounceMessage_Version::minorversion() const {
  // @@protoc_insertion_point(field_get:AnnounceMessage.Version.minorVersion)
  return minorversion_;
}
 void AnnounceMessage_Version::set_minorversion(::google::protobuf::uint32 value) {
  set_has_minorversion();
  minorversion_ = value;
  // @@protoc_insertion_point(field_set:AnnounceMessage.Version.minorVersion)
}

// -------------------------------------------------------------------

// AnnounceMessage

// required .AnnounceMessage.Version protocolVersion = 1;
bool AnnounceMessage::has_protocolversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AnnounceMessage::set_has_protocolversion() {
  _has_bits_[0] |= 0x00000001u;
}
void AnnounceMessage::clear_has_protocolversion() {
  _has_bits_[0] &= ~0x00000001u;
}
void AnnounceMessage::clear_protocolversion() {
  if (protocolversion_ != NULL) protocolversion_->::AnnounceMessage_Version::Clear();
  clear_has_protocolversion();
}
const ::AnnounceMessage_Version& AnnounceMessage::protocolversion() const {
  // @@protoc_insertion_point(field_get:AnnounceMessage.protocolVersion)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return protocolversion_ != NULL ? *protocolversion_ : *default_instance().protocolversion_;
#else
  return protocolversion_ != NULL ? *protocolversion_ : *default_instance_->protocolversion_;
#endif
}
::AnnounceMessage_Version* AnnounceMessage::mutable_protocolversion() {
  set_has_protocolversion();
  if (protocolversion_ == NULL) {
    protocolversion_ = new ::AnnounceMessage_Version;
  }
  // @@protoc_insertion_point(field_mutable:AnnounceMessage.protocolVersion)
  return protocolversion_;
}
::AnnounceMessage_Version* AnnounceMessage::release_protocolversion() {
  // @@protoc_insertion_point(field_release:AnnounceMessage.protocolVersion)
  clear_has_protocolversion();
  ::AnnounceMessage_Version* temp = protocolversion_;
  protocolversion_ = NULL;
  return temp;
}
void AnnounceMessage::set_allocated_protocolversion(::AnnounceMessage_Version* protocolversion) {
  delete protocolversion_;
  protocolversion_ = protocolversion;
  if (protocolversion) {
    set_has_protocolversion();
  } else {
    clear_has_protocolversion();
  }
  // @@protoc_insertion_point(field_set_allocated:AnnounceMessage.protocolVersion)
}

// required .AnnounceMessage.Version latestGameVersion = 2;
bool AnnounceMessage::has_latestgameversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AnnounceMessage::set_has_latestgameversion() {
  _has_bits_[0] |= 0x00000002u;
}
void AnnounceMessage::clear_has_latestgameversion() {
  _has_bits_[0] &= ~0x00000002u;
}
void AnnounceMessage::clear_latestgameversion() {
  if (latestgameversion_ != NULL) latestgameversion_->::AnnounceMessage_Version::Clear();
  clear_has_latestgameversion();
}
const ::AnnounceMessage_Version& AnnounceMessage::latestgameversion() const {
  // @@protoc_insertion_point(field_get:AnnounceMessage.latestGameVersion)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return latestgameversion_ != NULL ? *latestgameversion_ : *default_instance().latestgameversion_;
#else
  return latestgameversion_ != NULL ? *latestgameversion_ : *default_instance_->latestgameversion_;
#endif
}
::AnnounceMessage_Version* AnnounceMessage::mutable_latestgameversion() {
  set_has_latestgameversion();
  if (latestgameversion_ == NULL) {
    latestgameversion_ = new ::AnnounceMessage_Version;
  }
  // @@protoc_insertion_point(field_mutable:AnnounceMessage.latestGameVersion)
  return latestgameversion_;
}
::AnnounceMessage_Version* AnnounceMessage::release_latestgameversion() {
  // @@protoc_insertion_point(field_release:AnnounceMessage.latestGameVersion)
  clear_has_latestgameversion();
  ::AnnounceMessage_Version* temp = latestgameversion_;
  latestgameversion_ = NULL;
  return temp;
}
void AnnounceMessage::set_allocated_latestgameversion(::AnnounceMessage_Version* latestgameversion) {
  delete latestgameversion_;
  latestgameversion_ = latestgameversion;
  if (latestgameversion) {
    set_has_latestgameversion();
  } else {
    clear_has_latestgameversion();
  }
  // @@protoc_insertion_point(field_set_allocated:AnnounceMessage.latestGameVersion)
}

// required uint32 latestBetaRevision = 3;
bool AnnounceMessage::has_latestbetarevision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AnnounceMessage::set_has_latestbetarevision() {
  _has_bits_[0] |= 0x00000004u;
}
void AnnounceMessage::clear_has_latestbetarevision() {
  _has_bits_[0] &= ~0x00000004u;
}
void AnnounceMessage::clear_latestbetarevision() {
  latestbetarevision_ = 0u;
  clear_has_latestbetarevision();
}
 ::google::protobuf::uint32 AnnounceMessage::latestbetarevision() const {
  // @@protoc_insertion_point(field_get:AnnounceMessage.latestBetaRevision)
  return latestbetarevision_;
}
 void AnnounceMessage::set_latestbetarevision(::google::protobuf::uint32 value) {
  set_has_latestbetarevision();
  latestbetarevision_ = value;
  // @@protoc_insertion_point(field_set:AnnounceMessage.latestBetaRevision)
}

// required .AnnounceMessage.ServerType serverType = 4;
bool AnnounceMessage::has_servertype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AnnounceMessage::set_has_servertype() {
  _has_bits_[0] |= 0x00000008u;
}
void AnnounceMessage::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000008u;
}
void AnnounceMessage::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
 ::AnnounceMessage_ServerType AnnounceMessage::servertype() const {
  // @@protoc_insertion_point(field_get:AnnounceMessage.serverType)
  return static_cast< ::AnnounceMessage_ServerType >(servertype_);
}
 void AnnounceMessage::set_servertype(::AnnounceMessage_ServerType value) {
  assert(::AnnounceMessage_ServerType_IsValid(value));
  set_has_servertype();
  servertype_ = value;
  // @@protoc_insertion_point(field_set:AnnounceMessage.serverType)
}

// required uint32 numPlayersOnServer = 5;
bool AnnounceMessage::has_numplayersonserver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AnnounceMessage::set_has_numplayersonserver() {
  _has_bits_[0] |= 0x00000010u;
}
void AnnounceMessage::clear_has_numplayersonserver() {
  _has_bits_[0] &= ~0x00000010u;
}
void AnnounceMessage::clear_numplayersonserver() {
  numplayersonserver_ = 0u;
  clear_has_numplayersonserver();
}
 ::google::protobuf::uint32 AnnounceMessage::numplayersonserver() const {
  // @@protoc_insertion_point(field_get:AnnounceMessage.numPlayersOnServer)
  return numplayersonserver_;
}
 void AnnounceMessage::set_numplayersonserver(::google::protobuf::uint32 value) {
  set_has_numplayersonserver();
  numplayersonserver_ = value;
  // @@protoc_insertion_point(field_set:AnnounceMessage.numPlayersOnServer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForInitMessage(
    InitMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool InitMessage_LoginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InitMessage_LoginType InitMessage::guestLogin;
const InitMessage_LoginType InitMessage::authenticatedLogin;
const InitMessage_LoginType InitMessage::unauthenticatedLogin;
const InitMessage_LoginType InitMessage::LoginType_MIN;
const InitMessage_LoginType InitMessage::LoginType_MAX;
const int InitMessage::LoginType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitMessage::kRequestedVersionFieldNumber;
const int InitMessage::kBuildIdFieldNumber;
const int InitMessage::kMyLastSessionIdFieldNumber;
const int InitMessage::kAuthServerPasswordFieldNumber;
const int InitMessage::kLoginFieldNumber;
const int InitMessage::kNickNameFieldNumber;
const int InitMessage::kClientUserDataFieldNumber;
const int InitMessage::kAvatarHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitMessage::InitMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitMessage)
}

void InitMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  requestedversion_ = const_cast< ::AnnounceMessage_Version*>(
      ::AnnounceMessage_Version::internal_default_instance());
#else
  requestedversion_ = const_cast< ::AnnounceMessage_Version*>(&::AnnounceMessage_Version::default_instance());
#endif
}

InitMessage::InitMessage(const InitMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InitMessage)
}

void InitMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestedversion_ = NULL;
  buildid_ = 0u;
  mylastsessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authserverpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientuserdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitMessage::~InitMessage() {
  // @@protoc_insertion_point(destructor:InitMessage)
  SharedDtor();
}

void InitMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mylastsessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authserverpassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientuserdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatarhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete requestedversion_;
  }
}

void InitMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InitMessage& InitMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

InitMessage* InitMessage::default_instance_ = NULL;

InitMessage* InitMessage::New(::google::protobuf::Arena* arena) const {
  InitMessage* n = new InitMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InitMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InitMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InitMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(buildid_, login_);
    if (has_requestedversion()) {
      if (requestedversion_ != NULL) requestedversion_->::AnnounceMessage_Version::Clear();
    }
    if (has_mylastsessionid()) {
      mylastsessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_authserverpassword()) {
      authserverpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_clientuserdata()) {
      clientuserdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_avatarhash()) {
      avatarhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InitMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInitMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:InitMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AnnounceMessage.Version requestedVersion = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestedversion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buildId;
        break;
      }

      // required uint32 buildId = 2;
      case 2: {
        if (tag == 16) {
         parse_buildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_myLastSessionId;
        break;
      }

      // optional bytes myLastSessionId = 3;
      case 3: {
        if (tag == 26) {
         parse_myLastSessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mylastsessionid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_authServerPassword;
        break;
      }

      // optional string authServerPassword = 4;
      case 4: {
        if (tag == 34) {
         parse_authServerPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authserverpassword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_login;
        break;
      }

      // required .InitMessage.LoginType login = 5;
      case 5: {
        if (tag == 40) {
         parse_login:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::InitMessage_LoginType_IsValid(value)) {
            set_login(static_cast< ::InitMessage_LoginType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nickName;
        break;
      }

      // optional string nickName = 6;
      case 6: {
        if (tag == 50) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_clientUserData;
        break;
      }

      // optional bytes clientUserData = 7;
      case 7: {
        if (tag == 58) {
         parse_clientUserData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientuserdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avatarHash;
        break;
      }

      // optional bytes avatarHash = 8;
      case 8: {
        if (tag == 66) {
         parse_avatarHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarhash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitMessage)
  return false;
#undef DO_
}

void InitMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitMessage)
  // required .AnnounceMessage.Version requestedVersion = 1;
  if (has_requestedversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->requestedversion_, output);
  }

  // required uint32 buildId = 2;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buildid(), output);
  }

  // optional bytes myLastSessionId = 3;
  if (has_mylastsessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mylastsessionid(), output);
  }

  // optional string authServerPassword = 4;
  if (has_authserverpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->authserverpassword(), output);
  }

  // required .InitMessage.LoginType login = 5;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->login(), output);
  }

  // optional string nickName = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nickname(), output);
  }

  // optional bytes clientUserData = 7;
  if (has_clientuserdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->clientuserdata(), output);
  }

  // optional bytes avatarHash = 8;
  if (has_avatarhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->avatarhash(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:InitMessage)
}

int InitMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InitMessage)
  int total_size = 0;

  if (has_requestedversion()) {
    // required .AnnounceMessage.Version requestedVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requestedversion_);
  }

  if (has_buildid()) {
    // required uint32 buildId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buildid());
  }

  if (has_login()) {
    // required .InitMessage.LoginType login = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->login());
  }

  return total_size;
}
int InitMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:InitMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .AnnounceMessage.Version requestedVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requestedversion_);

    // required uint32 buildId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buildid());

    // required .InitMessage.LoginType login = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->login());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 236u) {
    // optional bytes myLastSessionId = 3;
    if (has_mylastsessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mylastsessionid());
    }

    // optional string authServerPassword = 4;
    if (has_authserverpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authserverpassword());
    }

    // optional string nickName = 6;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional bytes clientUserData = 7;
    if (has_clientuserdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clientuserdata());
    }

    // optional bytes avatarHash = 8;
    if (has_avatarhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatarhash());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitMessage*>(&from));
}

void InitMessage::MergeFrom(const InitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestedversion()) {
      mutable_requestedversion()->::AnnounceMessage_Version::MergeFrom(from.requestedversion());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
    if (from.has_mylastsessionid()) {
      set_has_mylastsessionid();
      mylastsessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mylastsessionid_);
    }
    if (from.has_authserverpassword()) {
      set_has_authserverpassword();
      authserverpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authserverpassword_);
    }
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_clientuserdata()) {
      set_has_clientuserdata();
      clientuserdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientuserdata_);
    }
    if (from.has_avatarhash()) {
      set_has_avatarhash();
      avatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarhash_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InitMessage::CopyFrom(const InitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_requestedversion()) {
    if (!this->requestedversion_->IsInitialized()) return false;
  }
  return true;
}

void InitMessage::Swap(InitMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitMessage::InternalSwap(InitMessage* other) {
  std::swap(requestedversion_, other->requestedversion_);
  std::swap(buildid_, other->buildid_);
  mylastsessionid_.Swap(&other->mylastsessionid_);
  authserverpassword_.Swap(&other->authserverpassword_);
  std::swap(login_, other->login_);
  nickname_.Swap(&other->nickname_);
  clientuserdata_.Swap(&other->clientuserdata_);
  avatarhash_.Swap(&other->avatarhash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InitMessage::GetTypeName() const {
  return "InitMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitMessage

// required .AnnounceMessage.Version requestedVersion = 1;
bool InitMessage::has_requestedversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitMessage::set_has_requestedversion() {
  _has_bits_[0] |= 0x00000001u;
}
void InitMessage::clear_has_requestedversion() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitMessage::clear_requestedversion() {
  if (requestedversion_ != NULL) requestedversion_->::AnnounceMessage_Version::Clear();
  clear_has_requestedversion();
}
const ::AnnounceMessage_Version& InitMessage::requestedversion() const {
  // @@protoc_insertion_point(field_get:InitMessage.requestedVersion)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return requestedversion_ != NULL ? *requestedversion_ : *default_instance().requestedversion_;
#else
  return requestedversion_ != NULL ? *requestedversion_ : *default_instance_->requestedversion_;
#endif
}
::AnnounceMessage_Version* InitMessage::mutable_requestedversion() {
  set_has_requestedversion();
  if (requestedversion_ == NULL) {
    requestedversion_ = new ::AnnounceMessage_Version;
  }
  // @@protoc_insertion_point(field_mutable:InitMessage.requestedVersion)
  return requestedversion_;
}
::AnnounceMessage_Version* InitMessage::release_requestedversion() {
  // @@protoc_insertion_point(field_release:InitMessage.requestedVersion)
  clear_has_requestedversion();
  ::AnnounceMessage_Version* temp = requestedversion_;
  requestedversion_ = NULL;
  return temp;
}
void InitMessage::set_allocated_requestedversion(::AnnounceMessage_Version* requestedversion) {
  delete requestedversion_;
  requestedversion_ = requestedversion;
  if (requestedversion) {
    set_has_requestedversion();
  } else {
    clear_has_requestedversion();
  }
  // @@protoc_insertion_point(field_set_allocated:InitMessage.requestedVersion)
}

// required uint32 buildId = 2;
bool InitMessage::has_buildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitMessage::set_has_buildid() {
  _has_bits_[0] |= 0x00000002u;
}
void InitMessage::clear_has_buildid() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitMessage::clear_buildid() {
  buildid_ = 0u;
  clear_has_buildid();
}
 ::google::protobuf::uint32 InitMessage::buildid() const {
  // @@protoc_insertion_point(field_get:InitMessage.buildId)
  return buildid_;
}
 void InitMessage::set_buildid(::google::protobuf::uint32 value) {
  set_has_buildid();
  buildid_ = value;
  // @@protoc_insertion_point(field_set:InitMessage.buildId)
}

// optional bytes myLastSessionId = 3;
bool InitMessage::has_mylastsessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InitMessage::set_has_mylastsessionid() {
  _has_bits_[0] |= 0x00000004u;
}
void InitMessage::clear_has_mylastsessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
void InitMessage::clear_mylastsessionid() {
  mylastsessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mylastsessionid();
}
 const ::std::string& InitMessage::mylastsessionid() const {
  // @@protoc_insertion_point(field_get:InitMessage.myLastSessionId)
  return mylastsessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitMessage::set_mylastsessionid(const ::std::string& value) {
  set_has_mylastsessionid();
  mylastsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitMessage.myLastSessionId)
}
 void InitMessage::set_mylastsessionid(const char* value) {
  set_has_mylastsessionid();
  mylastsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitMessage.myLastSessionId)
}
 void InitMessage::set_mylastsessionid(const void* value, size_t size) {
  set_has_mylastsessionid();
  mylastsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitMessage.myLastSessionId)
}
 ::std::string* InitMessage::mutable_mylastsessionid() {
  set_has_mylastsessionid();
  // @@protoc_insertion_point(field_mutable:InitMessage.myLastSessionId)
  return mylastsessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitMessage::release_mylastsessionid() {
  // @@protoc_insertion_point(field_release:InitMessage.myLastSessionId)
  clear_has_mylastsessionid();
  return mylastsessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitMessage::set_allocated_mylastsessionid(::std::string* mylastsessionid) {
  if (mylastsessionid != NULL) {
    set_has_mylastsessionid();
  } else {
    clear_has_mylastsessionid();
  }
  mylastsessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mylastsessionid);
  // @@protoc_insertion_point(field_set_allocated:InitMessage.myLastSessionId)
}

// optional string authServerPassword = 4;
bool InitMessage::has_authserverpassword() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InitMessage::set_has_authserverpassword() {
  _has_bits_[0] |= 0x00000008u;
}
void InitMessage::clear_has_authserverpassword() {
  _has_bits_[0] &= ~0x00000008u;
}
void InitMessage::clear_authserverpassword() {
  authserverpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authserverpassword();
}
 const ::std::string& InitMessage::authserverpassword() const {
  // @@protoc_insertion_point(field_get:InitMessage.authServerPassword)
  return authserverpassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitMessage::set_authserverpassword(const ::std::string& value) {
  set_has_authserverpassword();
  authserverpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitMessage.authServerPassword)
}
 void InitMessage::set_authserverpassword(const char* value) {
  set_has_authserverpassword();
  authserverpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitMessage.authServerPassword)
}
 void InitMessage::set_authserverpassword(const char* value, size_t size) {
  set_has_authserverpassword();
  authserverpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitMessage.authServerPassword)
}
 ::std::string* InitMessage::mutable_authserverpassword() {
  set_has_authserverpassword();
  // @@protoc_insertion_point(field_mutable:InitMessage.authServerPassword)
  return authserverpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitMessage::release_authserverpassword() {
  // @@protoc_insertion_point(field_release:InitMessage.authServerPassword)
  clear_has_authserverpassword();
  return authserverpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitMessage::set_allocated_authserverpassword(::std::string* authserverpassword) {
  if (authserverpassword != NULL) {
    set_has_authserverpassword();
  } else {
    clear_has_authserverpassword();
  }
  authserverpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authserverpassword);
  // @@protoc_insertion_point(field_set_allocated:InitMessage.authServerPassword)
}

// required .InitMessage.LoginType login = 5;
bool InitMessage::has_login() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InitMessage::set_has_login() {
  _has_bits_[0] |= 0x00000010u;
}
void InitMessage::clear_has_login() {
  _has_bits_[0] &= ~0x00000010u;
}
void InitMessage::clear_login() {
  login_ = 0;
  clear_has_login();
}
 ::InitMessage_LoginType InitMessage::login() const {
  // @@protoc_insertion_point(field_get:InitMessage.login)
  return static_cast< ::InitMessage_LoginType >(login_);
}
 void InitMessage::set_login(::InitMessage_LoginType value) {
  assert(::InitMessage_LoginType_IsValid(value));
  set_has_login();
  login_ = value;
  // @@protoc_insertion_point(field_set:InitMessage.login)
}

// optional string nickName = 6;
bool InitMessage::has_nickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InitMessage::set_has_nickname() {
  _has_bits_[0] |= 0x00000020u;
}
void InitMessage::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000020u;
}
void InitMessage::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& InitMessage::nickname() const {
  // @@protoc_insertion_point(field_get:InitMessage.nickName)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitMessage::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitMessage.nickName)
}
 void InitMessage::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitMessage.nickName)
}
 void InitMessage::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitMessage.nickName)
}
 ::std::string* InitMessage::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:InitMessage.nickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitMessage::release_nickname() {
  // @@protoc_insertion_point(field_release:InitMessage.nickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitMessage::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:InitMessage.nickName)
}

// optional bytes clientUserData = 7;
bool InitMessage::has_clientuserdata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InitMessage::set_has_clientuserdata() {
  _has_bits_[0] |= 0x00000040u;
}
void InitMessage::clear_has_clientuserdata() {
  _has_bits_[0] &= ~0x00000040u;
}
void InitMessage::clear_clientuserdata() {
  clientuserdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientuserdata();
}
 const ::std::string& InitMessage::clientuserdata() const {
  // @@protoc_insertion_point(field_get:InitMessage.clientUserData)
  return clientuserdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitMessage::set_clientuserdata(const ::std::string& value) {
  set_has_clientuserdata();
  clientuserdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitMessage.clientUserData)
}
 void InitMessage::set_clientuserdata(const char* value) {
  set_has_clientuserdata();
  clientuserdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitMessage.clientUserData)
}
 void InitMessage::set_clientuserdata(const void* value, size_t size) {
  set_has_clientuserdata();
  clientuserdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitMessage.clientUserData)
}
 ::std::string* InitMessage::mutable_clientuserdata() {
  set_has_clientuserdata();
  // @@protoc_insertion_point(field_mutable:InitMessage.clientUserData)
  return clientuserdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitMessage::release_clientuserdata() {
  // @@protoc_insertion_point(field_release:InitMessage.clientUserData)
  clear_has_clientuserdata();
  return clientuserdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitMessage::set_allocated_clientuserdata(::std::string* clientuserdata) {
  if (clientuserdata != NULL) {
    set_has_clientuserdata();
  } else {
    clear_has_clientuserdata();
  }
  clientuserdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientuserdata);
  // @@protoc_insertion_point(field_set_allocated:InitMessage.clientUserData)
}

// optional bytes avatarHash = 8;
bool InitMessage::has_avatarhash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InitMessage::set_has_avatarhash() {
  _has_bits_[0] |= 0x00000080u;
}
void InitMessage::clear_has_avatarhash() {
  _has_bits_[0] &= ~0x00000080u;
}
void InitMessage::clear_avatarhash() {
  avatarhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatarhash();
}
 const ::std::string& InitMessage::avatarhash() const {
  // @@protoc_insertion_point(field_get:InitMessage.avatarHash)
  return avatarhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitMessage::set_avatarhash(const ::std::string& value) {
  set_has_avatarhash();
  avatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitMessage.avatarHash)
}
 void InitMessage::set_avatarhash(const char* value) {
  set_has_avatarhash();
  avatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitMessage.avatarHash)
}
 void InitMessage::set_avatarhash(const void* value, size_t size) {
  set_has_avatarhash();
  avatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitMessage.avatarHash)
}
 ::std::string* InitMessage::mutable_avatarhash() {
  set_has_avatarhash();
  // @@protoc_insertion_point(field_mutable:InitMessage.avatarHash)
  return avatarhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitMessage::release_avatarhash() {
  // @@protoc_insertion_point(field_release:InitMessage.avatarHash)
  clear_has_avatarhash();
  return avatarhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitMessage::set_allocated_avatarhash(::std::string* avatarhash) {
  if (avatarhash != NULL) {
    set_has_avatarhash();
  } else {
    clear_has_avatarhash();
  }
  avatarhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatarhash);
  // @@protoc_insertion_point(field_set_allocated:InitMessage.avatarHash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAuthServerChallengeMessage(
    AuthServerChallengeMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthServerChallengeMessage::kServerChallengeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthServerChallengeMessage::AuthServerChallengeMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthServerChallengeMessage)
}

void AuthServerChallengeMessage::InitAsDefaultInstance() {
}

AuthServerChallengeMessage::AuthServerChallengeMessage(const AuthServerChallengeMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthServerChallengeMessage)
}

void AuthServerChallengeMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverchallenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthServerChallengeMessage::~AuthServerChallengeMessage() {
  // @@protoc_insertion_point(destructor:AuthServerChallengeMessage)
  SharedDtor();
}

void AuthServerChallengeMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverchallenge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthServerChallengeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthServerChallengeMessage& AuthServerChallengeMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AuthServerChallengeMessage* AuthServerChallengeMessage::default_instance_ = NULL;

AuthServerChallengeMessage* AuthServerChallengeMessage::New(::google::protobuf::Arena* arena) const {
  AuthServerChallengeMessage* n = new AuthServerChallengeMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthServerChallengeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthServerChallengeMessage)
  if (has_serverchallenge()) {
    serverchallenge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthServerChallengeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAuthServerChallengeMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AuthServerChallengeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serverChallenge = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serverchallenge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthServerChallengeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthServerChallengeMessage)
  return false;
#undef DO_
}

void AuthServerChallengeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthServerChallengeMessage)
  // required bytes serverChallenge = 1;
  if (has_serverchallenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serverchallenge(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AuthServerChallengeMessage)
}

int AuthServerChallengeMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AuthServerChallengeMessage)
  int total_size = 0;

  // required bytes serverChallenge = 1;
  if (has_serverchallenge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->serverchallenge());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthServerChallengeMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthServerChallengeMessage*>(&from));
}

void AuthServerChallengeMessage::MergeFrom(const AuthServerChallengeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthServerChallengeMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverchallenge()) {
      set_has_serverchallenge();
      serverchallenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverchallenge_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AuthServerChallengeMessage::CopyFrom(const AuthServerChallengeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthServerChallengeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthServerChallengeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthServerChallengeMessage::Swap(AuthServerChallengeMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthServerChallengeMessage::InternalSwap(AuthServerChallengeMessage* other) {
  serverchallenge_.Swap(&other->serverchallenge_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthServerChallengeMessage::GetTypeName() const {
  return "AuthServerChallengeMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthServerChallengeMessage

// required bytes serverChallenge = 1;
bool AuthServerChallengeMessage::has_serverchallenge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthServerChallengeMessage::set_has_serverchallenge() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthServerChallengeMessage::clear_has_serverchallenge() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthServerChallengeMessage::clear_serverchallenge() {
  serverchallenge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serverchallenge();
}
 const ::std::string& AuthServerChallengeMessage::serverchallenge() const {
  // @@protoc_insertion_point(field_get:AuthServerChallengeMessage.serverChallenge)
  return serverchallenge_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AuthServerChallengeMessage::set_serverchallenge(const ::std::string& value) {
  set_has_serverchallenge();
  serverchallenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthServerChallengeMessage.serverChallenge)
}
 void AuthServerChallengeMessage::set_serverchallenge(const char* value) {
  set_has_serverchallenge();
  serverchallenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthServerChallengeMessage.serverChallenge)
}
 void AuthServerChallengeMessage::set_serverchallenge(const void* value, size_t size) {
  set_has_serverchallenge();
  serverchallenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthServerChallengeMessage.serverChallenge)
}
 ::std::string* AuthServerChallengeMessage::mutable_serverchallenge() {
  set_has_serverchallenge();
  // @@protoc_insertion_point(field_mutable:AuthServerChallengeMessage.serverChallenge)
  return serverchallenge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AuthServerChallengeMessage::release_serverchallenge() {
  // @@protoc_insertion_point(field_release:AuthServerChallengeMessage.serverChallenge)
  clear_has_serverchallenge();
  return serverchallenge_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AuthServerChallengeMessage::set_allocated_serverchallenge(::std::string* serverchallenge) {
  if (serverchallenge != NULL) {
    set_has_serverchallenge();
  } else {
    clear_has_serverchallenge();
  }
  serverchallenge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverchallenge);
  // @@protoc_insertion_point(field_set_allocated:AuthServerChallengeMessage.serverChallenge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAuthClientResponseMessage(
    AuthClientResponseMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthClientResponseMessage::kClientResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthClientResponseMessage::AuthClientResponseMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthClientResponseMessage)
}

void AuthClientResponseMessage::InitAsDefaultInstance() {
}

AuthClientResponseMessage::AuthClientResponseMessage(const AuthClientResponseMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthClientResponseMessage)
}

void AuthClientResponseMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientresponse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthClientResponseMessage::~AuthClientResponseMessage() {
  // @@protoc_insertion_point(destructor:AuthClientResponseMessage)
  SharedDtor();
}

void AuthClientResponseMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientresponse_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthClientResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthClientResponseMessage& AuthClientResponseMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AuthClientResponseMessage* AuthClientResponseMessage::default_instance_ = NULL;

AuthClientResponseMessage* AuthClientResponseMessage::New(::google::protobuf::Arena* arena) const {
  AuthClientResponseMessage* n = new AuthClientResponseMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthClientResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthClientResponseMessage)
  if (has_clientresponse()) {
    clientresponse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthClientResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAuthClientResponseMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AuthClientResponseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes clientResponse = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthClientResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthClientResponseMessage)
  return false;
#undef DO_
}

void AuthClientResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthClientResponseMessage)
  // required bytes clientResponse = 1;
  if (has_clientresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->clientresponse(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AuthClientResponseMessage)
}

int AuthClientResponseMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AuthClientResponseMessage)
  int total_size = 0;

  // required bytes clientResponse = 1;
  if (has_clientresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clientresponse());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthClientResponseMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthClientResponseMessage*>(&from));
}

void AuthClientResponseMessage::MergeFrom(const AuthClientResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthClientResponseMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientresponse()) {
      set_has_clientresponse();
      clientresponse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientresponse_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AuthClientResponseMessage::CopyFrom(const AuthClientResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthClientResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthClientResponseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthClientResponseMessage::Swap(AuthClientResponseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthClientResponseMessage::InternalSwap(AuthClientResponseMessage* other) {
  clientresponse_.Swap(&other->clientresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthClientResponseMessage::GetTypeName() const {
  return "AuthClientResponseMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthClientResponseMessage

// required bytes clientResponse = 1;
bool AuthClientResponseMessage::has_clientresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthClientResponseMessage::set_has_clientresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthClientResponseMessage::clear_has_clientresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthClientResponseMessage::clear_clientresponse() {
  clientresponse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientresponse();
}
 const ::std::string& AuthClientResponseMessage::clientresponse() const {
  // @@protoc_insertion_point(field_get:AuthClientResponseMessage.clientResponse)
  return clientresponse_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AuthClientResponseMessage::set_clientresponse(const ::std::string& value) {
  set_has_clientresponse();
  clientresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthClientResponseMessage.clientResponse)
}
 void AuthClientResponseMessage::set_clientresponse(const char* value) {
  set_has_clientresponse();
  clientresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthClientResponseMessage.clientResponse)
}
 void AuthClientResponseMessage::set_clientresponse(const void* value, size_t size) {
  set_has_clientresponse();
  clientresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthClientResponseMessage.clientResponse)
}
 ::std::string* AuthClientResponseMessage::mutable_clientresponse() {
  set_has_clientresponse();
  // @@protoc_insertion_point(field_mutable:AuthClientResponseMessage.clientResponse)
  return clientresponse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AuthClientResponseMessage::release_clientresponse() {
  // @@protoc_insertion_point(field_release:AuthClientResponseMessage.clientResponse)
  clear_has_clientresponse();
  return clientresponse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AuthClientResponseMessage::set_allocated_clientresponse(::std::string* clientresponse) {
  if (clientresponse != NULL) {
    set_has_clientresponse();
  } else {
    clear_has_clientresponse();
  }
  clientresponse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientresponse);
  // @@protoc_insertion_point(field_set_allocated:AuthClientResponseMessage.clientResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAuthServerVerificationMessage(
    AuthServerVerificationMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthServerVerificationMessage::kServerVerificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthServerVerificationMessage::AuthServerVerificationMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthServerVerificationMessage)
}

void AuthServerVerificationMessage::InitAsDefaultInstance() {
}

AuthServerVerificationMessage::AuthServerVerificationMessage(const AuthServerVerificationMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthServerVerificationMessage)
}

void AuthServerVerificationMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serververification_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthServerVerificationMessage::~AuthServerVerificationMessage() {
  // @@protoc_insertion_point(destructor:AuthServerVerificationMessage)
  SharedDtor();
}

void AuthServerVerificationMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serververification_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthServerVerificationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthServerVerificationMessage& AuthServerVerificationMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AuthServerVerificationMessage* AuthServerVerificationMessage::default_instance_ = NULL;

AuthServerVerificationMessage* AuthServerVerificationMessage::New(::google::protobuf::Arena* arena) const {
  AuthServerVerificationMessage* n = new AuthServerVerificationMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthServerVerificationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthServerVerificationMessage)
  if (has_serververification()) {
    serververification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthServerVerificationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAuthServerVerificationMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AuthServerVerificationMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serverVerification = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serververification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthServerVerificationMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthServerVerificationMessage)
  return false;
#undef DO_
}

void AuthServerVerificationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthServerVerificationMessage)
  // required bytes serverVerification = 1;
  if (has_serververification()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serververification(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AuthServerVerificationMessage)
}

int AuthServerVerificationMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AuthServerVerificationMessage)
  int total_size = 0;

  // required bytes serverVerification = 1;
  if (has_serververification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->serververification());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthServerVerificationMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthServerVerificationMessage*>(&from));
}

void AuthServerVerificationMessage::MergeFrom(const AuthServerVerificationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthServerVerificationMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serververification()) {
      set_has_serververification();
      serververification_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serververification_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AuthServerVerificationMessage::CopyFrom(const AuthServerVerificationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthServerVerificationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthServerVerificationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthServerVerificationMessage::Swap(AuthServerVerificationMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthServerVerificationMessage::InternalSwap(AuthServerVerificationMessage* other) {
  serververification_.Swap(&other->serververification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthServerVerificationMessage::GetTypeName() const {
  return "AuthServerVerificationMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthServerVerificationMessage

// required bytes serverVerification = 1;
bool AuthServerVerificationMessage::has_serververification() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthServerVerificationMessage::set_has_serververification() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthServerVerificationMessage::clear_has_serververification() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthServerVerificationMessage::clear_serververification() {
  serververification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serververification();
}
 const ::std::string& AuthServerVerificationMessage::serververification() const {
  // @@protoc_insertion_point(field_get:AuthServerVerificationMessage.serverVerification)
  return serververification_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AuthServerVerificationMessage::set_serververification(const ::std::string& value) {
  set_has_serververification();
  serververification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthServerVerificationMessage.serverVerification)
}
 void AuthServerVerificationMessage::set_serververification(const char* value) {
  set_has_serververification();
  serververification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthServerVerificationMessage.serverVerification)
}
 void AuthServerVerificationMessage::set_serververification(const void* value, size_t size) {
  set_has_serververification();
  serververification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthServerVerificationMessage.serverVerification)
}
 ::std::string* AuthServerVerificationMessage::mutable_serververification() {
  set_has_serververification();
  // @@protoc_insertion_point(field_mutable:AuthServerVerificationMessage.serverVerification)
  return serververification_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AuthServerVerificationMessage::release_serververification() {
  // @@protoc_insertion_point(field_release:AuthServerVerificationMessage.serverVerification)
  clear_has_serververification();
  return serververification_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AuthServerVerificationMessage::set_allocated_serververification(::std::string* serververification) {
  if (serververification != NULL) {
    set_has_serververification();
  } else {
    clear_has_serververification();
  }
  serververification_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serververification);
  // @@protoc_insertion_point(field_set_allocated:AuthServerVerificationMessage.serverVerification)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForInitAckMessage(
    InitAckMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitAckMessage::kYourSessionIdFieldNumber;
const int InitAckMessage::kYourPlayerIdFieldNumber;
const int InitAckMessage::kYourAvatarHashFieldNumber;
const int InitAckMessage::kRejoinGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitAckMessage::InitAckMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitAckMessage)
}

void InitAckMessage::InitAsDefaultInstance() {
}

InitAckMessage::InitAckMessage(const InitAckMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InitAckMessage)
}

void InitAckMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yoursessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yourplayerid_ = 0u;
  youravatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rejoingameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitAckMessage::~InitAckMessage() {
  // @@protoc_insertion_point(destructor:InitAckMessage)
  SharedDtor();
}

void InitAckMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yoursessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youravatarhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InitAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InitAckMessage& InitAckMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

InitAckMessage* InitAckMessage::default_instance_ = NULL;

InitAckMessage* InitAckMessage::New(::google::protobuf::Arena* arena) const {
  InitAckMessage* n = new InitAckMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InitAckMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InitAckMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InitAckMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(yourplayerid_, rejoingameid_);
    if (has_yoursessionid()) {
      yoursessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_youravatarhash()) {
      youravatarhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InitAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInitAckMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:InitAckMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes yourSessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_yoursessionid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_yourPlayerId;
        break;
      }

      // required uint32 yourPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_yourPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yourplayerid_)));
          set_has_yourplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_yourAvatarHash;
        break;
      }

      // optional bytes yourAvatarHash = 3;
      case 3: {
        if (tag == 26) {
         parse_yourAvatarHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_youravatarhash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rejoinGameId;
        break;
      }

      // optional uint32 rejoinGameId = 4;
      case 4: {
        if (tag == 32) {
         parse_rejoinGameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rejoingameid_)));
          set_has_rejoingameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitAckMessage)
  return false;
#undef DO_
}

void InitAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitAckMessage)
  // required bytes yourSessionId = 1;
  if (has_yoursessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->yoursessionid(), output);
  }

  // required uint32 yourPlayerId = 2;
  if (has_yourplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->yourplayerid(), output);
  }

  // optional bytes yourAvatarHash = 3;
  if (has_youravatarhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->youravatarhash(), output);
  }

  // optional uint32 rejoinGameId = 4;
  if (has_rejoingameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rejoingameid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:InitAckMessage)
}

int InitAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InitAckMessage)
  int total_size = 0;

  if (has_yoursessionid()) {
    // required bytes yourSessionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->yoursessionid());
  }

  if (has_yourplayerid()) {
    // required uint32 yourPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yourplayerid());
  }

  return total_size;
}
int InitAckMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:InitAckMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes yourSessionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->yoursessionid());

    // required uint32 yourPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yourplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional bytes yourAvatarHash = 3;
    if (has_youravatarhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->youravatarhash());
    }

    // optional uint32 rejoinGameId = 4;
    if (has_rejoingameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rejoingameid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitAckMessage*>(&from));
}

void InitAckMessage::MergeFrom(const InitAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitAckMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yoursessionid()) {
      set_has_yoursessionid();
      yoursessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yoursessionid_);
    }
    if (from.has_yourplayerid()) {
      set_yourplayerid(from.yourplayerid());
    }
    if (from.has_youravatarhash()) {
      set_has_youravatarhash();
      youravatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youravatarhash_);
    }
    if (from.has_rejoingameid()) {
      set_rejoingameid(from.rejoingameid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InitAckMessage::CopyFrom(const InitAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InitAckMessage::Swap(InitAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitAckMessage::InternalSwap(InitAckMessage* other) {
  yoursessionid_.Swap(&other->yoursessionid_);
  std::swap(yourplayerid_, other->yourplayerid_);
  youravatarhash_.Swap(&other->youravatarhash_);
  std::swap(rejoingameid_, other->rejoingameid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InitAckMessage::GetTypeName() const {
  return "InitAckMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitAckMessage

// required bytes yourSessionId = 1;
bool InitAckMessage::has_yoursessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitAckMessage::set_has_yoursessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void InitAckMessage::clear_has_yoursessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitAckMessage::clear_yoursessionid() {
  yoursessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_yoursessionid();
}
 const ::std::string& InitAckMessage::yoursessionid() const {
  // @@protoc_insertion_point(field_get:InitAckMessage.yourSessionId)
  return yoursessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitAckMessage::set_yoursessionid(const ::std::string& value) {
  set_has_yoursessionid();
  yoursessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitAckMessage.yourSessionId)
}
 void InitAckMessage::set_yoursessionid(const char* value) {
  set_has_yoursessionid();
  yoursessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitAckMessage.yourSessionId)
}
 void InitAckMessage::set_yoursessionid(const void* value, size_t size) {
  set_has_yoursessionid();
  yoursessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitAckMessage.yourSessionId)
}
 ::std::string* InitAckMessage::mutable_yoursessionid() {
  set_has_yoursessionid();
  // @@protoc_insertion_point(field_mutable:InitAckMessage.yourSessionId)
  return yoursessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitAckMessage::release_yoursessionid() {
  // @@protoc_insertion_point(field_release:InitAckMessage.yourSessionId)
  clear_has_yoursessionid();
  return yoursessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitAckMessage::set_allocated_yoursessionid(::std::string* yoursessionid) {
  if (yoursessionid != NULL) {
    set_has_yoursessionid();
  } else {
    clear_has_yoursessionid();
  }
  yoursessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yoursessionid);
  // @@protoc_insertion_point(field_set_allocated:InitAckMessage.yourSessionId)
}

// required uint32 yourPlayerId = 2;
bool InitAckMessage::has_yourplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitAckMessage::set_has_yourplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
void InitAckMessage::clear_has_yourplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitAckMessage::clear_yourplayerid() {
  yourplayerid_ = 0u;
  clear_has_yourplayerid();
}
 ::google::protobuf::uint32 InitAckMessage::yourplayerid() const {
  // @@protoc_insertion_point(field_get:InitAckMessage.yourPlayerId)
  return yourplayerid_;
}
 void InitAckMessage::set_yourplayerid(::google::protobuf::uint32 value) {
  set_has_yourplayerid();
  yourplayerid_ = value;
  // @@protoc_insertion_point(field_set:InitAckMessage.yourPlayerId)
}

// optional bytes yourAvatarHash = 3;
bool InitAckMessage::has_youravatarhash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InitAckMessage::set_has_youravatarhash() {
  _has_bits_[0] |= 0x00000004u;
}
void InitAckMessage::clear_has_youravatarhash() {
  _has_bits_[0] &= ~0x00000004u;
}
void InitAckMessage::clear_youravatarhash() {
  youravatarhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youravatarhash();
}
 const ::std::string& InitAckMessage::youravatarhash() const {
  // @@protoc_insertion_point(field_get:InitAckMessage.yourAvatarHash)
  return youravatarhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitAckMessage::set_youravatarhash(const ::std::string& value) {
  set_has_youravatarhash();
  youravatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitAckMessage.yourAvatarHash)
}
 void InitAckMessage::set_youravatarhash(const char* value) {
  set_has_youravatarhash();
  youravatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitAckMessage.yourAvatarHash)
}
 void InitAckMessage::set_youravatarhash(const void* value, size_t size) {
  set_has_youravatarhash();
  youravatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitAckMessage.yourAvatarHash)
}
 ::std::string* InitAckMessage::mutable_youravatarhash() {
  set_has_youravatarhash();
  // @@protoc_insertion_point(field_mutable:InitAckMessage.yourAvatarHash)
  return youravatarhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitAckMessage::release_youravatarhash() {
  // @@protoc_insertion_point(field_release:InitAckMessage.yourAvatarHash)
  clear_has_youravatarhash();
  return youravatarhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitAckMessage::set_allocated_youravatarhash(::std::string* youravatarhash) {
  if (youravatarhash != NULL) {
    set_has_youravatarhash();
  } else {
    clear_has_youravatarhash();
  }
  youravatarhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), youravatarhash);
  // @@protoc_insertion_point(field_set_allocated:InitAckMessage.yourAvatarHash)
}

// optional uint32 rejoinGameId = 4;
bool InitAckMessage::has_rejoingameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InitAckMessage::set_has_rejoingameid() {
  _has_bits_[0] |= 0x00000008u;
}
void InitAckMessage::clear_has_rejoingameid() {
  _has_bits_[0] &= ~0x00000008u;
}
void InitAckMessage::clear_rejoingameid() {
  rejoingameid_ = 0u;
  clear_has_rejoingameid();
}
 ::google::protobuf::uint32 InitAckMessage::rejoingameid() const {
  // @@protoc_insertion_point(field_get:InitAckMessage.rejoinGameId)
  return rejoingameid_;
}
 void InitAckMessage::set_rejoingameid(::google::protobuf::uint32 value) {
  set_has_rejoingameid();
  rejoingameid_ = value;
  // @@protoc_insertion_point(field_set:InitAckMessage.rejoinGameId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAvatarRequestMessage(
    AvatarRequestMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarRequestMessage::kRequestIdFieldNumber;
const int AvatarRequestMessage::kAvatarHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarRequestMessage::AvatarRequestMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvatarRequestMessage)
}

void AvatarRequestMessage::InitAsDefaultInstance() {
}

AvatarRequestMessage::AvatarRequestMessage(const AvatarRequestMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AvatarRequestMessage)
}

void AvatarRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0u;
  avatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarRequestMessage::~AvatarRequestMessage() {
  // @@protoc_insertion_point(destructor:AvatarRequestMessage)
  SharedDtor();
}

void AvatarRequestMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatarhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AvatarRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AvatarRequestMessage& AvatarRequestMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AvatarRequestMessage* AvatarRequestMessage::default_instance_ = NULL;

AvatarRequestMessage* AvatarRequestMessage::New(::google::protobuf::Arena* arena) const {
  AvatarRequestMessage* n = new AvatarRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarRequestMessage)
  if (_has_bits_[0 / 32] & 3u) {
    requestid_ = 0u;
    if (has_avatarhash()) {
      avatarhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AvatarRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAvatarRequestMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AvatarRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avatarHash;
        break;
      }

      // required bytes avatarHash = 2;
      case 2: {
        if (tag == 18) {
         parse_avatarHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarhash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AvatarRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AvatarRequestMessage)
  return false;
#undef DO_
}

void AvatarRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AvatarRequestMessage)
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // required bytes avatarHash = 2;
  if (has_avatarhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->avatarhash(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AvatarRequestMessage)
}

int AvatarRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarRequestMessage)
  int total_size = 0;

  if (has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }

  if (has_avatarhash()) {
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarhash());
  }

  return total_size;
}
int AvatarRequestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarRequestMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());

    // required bytes avatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarhash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvatarRequestMessage*>(&from));
}

void AvatarRequestMessage::MergeFrom(const AvatarRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarRequestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_avatarhash()) {
      set_has_avatarhash();
      avatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarhash_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AvatarRequestMessage::CopyFrom(const AvatarRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AvatarRequestMessage::Swap(AvatarRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarRequestMessage::InternalSwap(AvatarRequestMessage* other) {
  std::swap(requestid_, other->requestid_);
  avatarhash_.Swap(&other->avatarhash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AvatarRequestMessage::GetTypeName() const {
  return "AvatarRequestMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarRequestMessage

// required uint32 requestId = 1;
bool AvatarRequestMessage::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AvatarRequestMessage::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
void AvatarRequestMessage::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AvatarRequestMessage::clear_requestid() {
  requestid_ = 0u;
  clear_has_requestid();
}
 ::google::protobuf::uint32 AvatarRequestMessage::requestid() const {
  // @@protoc_insertion_point(field_get:AvatarRequestMessage.requestId)
  return requestid_;
}
 void AvatarRequestMessage::set_requestid(::google::protobuf::uint32 value) {
  set_has_requestid();
  requestid_ = value;
  // @@protoc_insertion_point(field_set:AvatarRequestMessage.requestId)
}

// required bytes avatarHash = 2;
bool AvatarRequestMessage::has_avatarhash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AvatarRequestMessage::set_has_avatarhash() {
  _has_bits_[0] |= 0x00000002u;
}
void AvatarRequestMessage::clear_has_avatarhash() {
  _has_bits_[0] &= ~0x00000002u;
}
void AvatarRequestMessage::clear_avatarhash() {
  avatarhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatarhash();
}
 const ::std::string& AvatarRequestMessage::avatarhash() const {
  // @@protoc_insertion_point(field_get:AvatarRequestMessage.avatarHash)
  return avatarhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AvatarRequestMessage::set_avatarhash(const ::std::string& value) {
  set_has_avatarhash();
  avatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AvatarRequestMessage.avatarHash)
}
 void AvatarRequestMessage::set_avatarhash(const char* value) {
  set_has_avatarhash();
  avatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AvatarRequestMessage.avatarHash)
}
 void AvatarRequestMessage::set_avatarhash(const void* value, size_t size) {
  set_has_avatarhash();
  avatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AvatarRequestMessage.avatarHash)
}
 ::std::string* AvatarRequestMessage::mutable_avatarhash() {
  set_has_avatarhash();
  // @@protoc_insertion_point(field_mutable:AvatarRequestMessage.avatarHash)
  return avatarhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AvatarRequestMessage::release_avatarhash() {
  // @@protoc_insertion_point(field_release:AvatarRequestMessage.avatarHash)
  clear_has_avatarhash();
  return avatarhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AvatarRequestMessage::set_allocated_avatarhash(::std::string* avatarhash) {
  if (avatarhash != NULL) {
    set_has_avatarhash();
  } else {
    clear_has_avatarhash();
  }
  avatarhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatarhash);
  // @@protoc_insertion_point(field_set_allocated:AvatarRequestMessage.avatarHash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAvatarHeaderMessage(
    AvatarHeaderMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarHeaderMessage::kRequestIdFieldNumber;
const int AvatarHeaderMessage::kAvatarTypeFieldNumber;
const int AvatarHeaderMessage::kAvatarSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarHeaderMessage::AvatarHeaderMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvatarHeaderMessage)
}

void AvatarHeaderMessage::InitAsDefaultInstance() {
}

AvatarHeaderMessage::AvatarHeaderMessage(const AvatarHeaderMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AvatarHeaderMessage)
}

void AvatarHeaderMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0u;
  avatartype_ = 1;
  avatarsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarHeaderMessage::~AvatarHeaderMessage() {
  // @@protoc_insertion_point(destructor:AvatarHeaderMessage)
  SharedDtor();
}

void AvatarHeaderMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AvatarHeaderMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AvatarHeaderMessage& AvatarHeaderMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AvatarHeaderMessage* AvatarHeaderMessage::default_instance_ = NULL;

AvatarHeaderMessage* AvatarHeaderMessage::New(::google::protobuf::Arena* arena) const {
  AvatarHeaderMessage* n = new AvatarHeaderMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarHeaderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarHeaderMessage)
  if (_has_bits_[0 / 32] & 7u) {
    requestid_ = 0u;
    avatartype_ = 1;
    avatarsize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AvatarHeaderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAvatarHeaderMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AvatarHeaderMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_avatarType;
        break;
      }

      // required .NetAvatarType avatarType = 2;
      case 2: {
        if (tag == 16) {
         parse_avatarType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetAvatarType_IsValid(value)) {
            set_avatartype(static_cast< ::NetAvatarType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_avatarSize;
        break;
      }

      // required uint32 avatarSize = 3;
      case 3: {
        if (tag == 24) {
         parse_avatarSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatarsize_)));
          set_has_avatarsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AvatarHeaderMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AvatarHeaderMessage)
  return false;
#undef DO_
}

void AvatarHeaderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AvatarHeaderMessage)
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // required .NetAvatarType avatarType = 2;
  if (has_avatartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->avatartype(), output);
  }

  // required uint32 avatarSize = 3;
  if (has_avatarsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avatarsize(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AvatarHeaderMessage)
}

int AvatarHeaderMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarHeaderMessage)
  int total_size = 0;

  if (has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }

  if (has_avatartype()) {
    // required .NetAvatarType avatarType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->avatartype());
  }

  if (has_avatarsize()) {
    // required uint32 avatarSize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatarsize());
  }

  return total_size;
}
int AvatarHeaderMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarHeaderMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());

    // required .NetAvatarType avatarType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->avatartype());

    // required uint32 avatarSize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatarsize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarHeaderMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvatarHeaderMessage*>(&from));
}

void AvatarHeaderMessage::MergeFrom(const AvatarHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarHeaderMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_avatartype()) {
      set_avatartype(from.avatartype());
    }
    if (from.has_avatarsize()) {
      set_avatarsize(from.avatarsize());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AvatarHeaderMessage::CopyFrom(const AvatarHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarHeaderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarHeaderMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AvatarHeaderMessage::Swap(AvatarHeaderMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarHeaderMessage::InternalSwap(AvatarHeaderMessage* other) {
  std::swap(requestid_, other->requestid_);
  std::swap(avatartype_, other->avatartype_);
  std::swap(avatarsize_, other->avatarsize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AvatarHeaderMessage::GetTypeName() const {
  return "AvatarHeaderMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarHeaderMessage

// required uint32 requestId = 1;
bool AvatarHeaderMessage::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AvatarHeaderMessage::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
void AvatarHeaderMessage::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AvatarHeaderMessage::clear_requestid() {
  requestid_ = 0u;
  clear_has_requestid();
}
 ::google::protobuf::uint32 AvatarHeaderMessage::requestid() const {
  // @@protoc_insertion_point(field_get:AvatarHeaderMessage.requestId)
  return requestid_;
}
 void AvatarHeaderMessage::set_requestid(::google::protobuf::uint32 value) {
  set_has_requestid();
  requestid_ = value;
  // @@protoc_insertion_point(field_set:AvatarHeaderMessage.requestId)
}

// required .NetAvatarType avatarType = 2;
bool AvatarHeaderMessage::has_avatartype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AvatarHeaderMessage::set_has_avatartype() {
  _has_bits_[0] |= 0x00000002u;
}
void AvatarHeaderMessage::clear_has_avatartype() {
  _has_bits_[0] &= ~0x00000002u;
}
void AvatarHeaderMessage::clear_avatartype() {
  avatartype_ = 1;
  clear_has_avatartype();
}
 ::NetAvatarType AvatarHeaderMessage::avatartype() const {
  // @@protoc_insertion_point(field_get:AvatarHeaderMessage.avatarType)
  return static_cast< ::NetAvatarType >(avatartype_);
}
 void AvatarHeaderMessage::set_avatartype(::NetAvatarType value) {
  assert(::NetAvatarType_IsValid(value));
  set_has_avatartype();
  avatartype_ = value;
  // @@protoc_insertion_point(field_set:AvatarHeaderMessage.avatarType)
}

// required uint32 avatarSize = 3;
bool AvatarHeaderMessage::has_avatarsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AvatarHeaderMessage::set_has_avatarsize() {
  _has_bits_[0] |= 0x00000004u;
}
void AvatarHeaderMessage::clear_has_avatarsize() {
  _has_bits_[0] &= ~0x00000004u;
}
void AvatarHeaderMessage::clear_avatarsize() {
  avatarsize_ = 0u;
  clear_has_avatarsize();
}
 ::google::protobuf::uint32 AvatarHeaderMessage::avatarsize() const {
  // @@protoc_insertion_point(field_get:AvatarHeaderMessage.avatarSize)
  return avatarsize_;
}
 void AvatarHeaderMessage::set_avatarsize(::google::protobuf::uint32 value) {
  set_has_avatarsize();
  avatarsize_ = value;
  // @@protoc_insertion_point(field_set:AvatarHeaderMessage.avatarSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAvatarDataMessage(
    AvatarDataMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarDataMessage::kRequestIdFieldNumber;
const int AvatarDataMessage::kAvatarBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarDataMessage::AvatarDataMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvatarDataMessage)
}

void AvatarDataMessage::InitAsDefaultInstance() {
}

AvatarDataMessage::AvatarDataMessage(const AvatarDataMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AvatarDataMessage)
}

void AvatarDataMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0u;
  avatarblock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarDataMessage::~AvatarDataMessage() {
  // @@protoc_insertion_point(destructor:AvatarDataMessage)
  SharedDtor();
}

void AvatarDataMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatarblock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AvatarDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AvatarDataMessage& AvatarDataMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AvatarDataMessage* AvatarDataMessage::default_instance_ = NULL;

AvatarDataMessage* AvatarDataMessage::New(::google::protobuf::Arena* arena) const {
  AvatarDataMessage* n = new AvatarDataMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarDataMessage)
  if (_has_bits_[0 / 32] & 3u) {
    requestid_ = 0u;
    if (has_avatarblock()) {
      avatarblock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AvatarDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAvatarDataMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AvatarDataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avatarBlock;
        break;
      }

      // required bytes avatarBlock = 2;
      case 2: {
        if (tag == 18) {
         parse_avatarBlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarblock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AvatarDataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AvatarDataMessage)
  return false;
#undef DO_
}

void AvatarDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AvatarDataMessage)
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // required bytes avatarBlock = 2;
  if (has_avatarblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->avatarblock(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AvatarDataMessage)
}

int AvatarDataMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarDataMessage)
  int total_size = 0;

  if (has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }

  if (has_avatarblock()) {
    // required bytes avatarBlock = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarblock());
  }

  return total_size;
}
int AvatarDataMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarDataMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());

    // required bytes avatarBlock = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarblock());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarDataMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvatarDataMessage*>(&from));
}

void AvatarDataMessage::MergeFrom(const AvatarDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarDataMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_avatarblock()) {
      set_has_avatarblock();
      avatarblock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarblock_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AvatarDataMessage::CopyFrom(const AvatarDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarDataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AvatarDataMessage::Swap(AvatarDataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarDataMessage::InternalSwap(AvatarDataMessage* other) {
  std::swap(requestid_, other->requestid_);
  avatarblock_.Swap(&other->avatarblock_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AvatarDataMessage::GetTypeName() const {
  return "AvatarDataMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarDataMessage

// required uint32 requestId = 1;
bool AvatarDataMessage::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AvatarDataMessage::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
void AvatarDataMessage::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AvatarDataMessage::clear_requestid() {
  requestid_ = 0u;
  clear_has_requestid();
}
 ::google::protobuf::uint32 AvatarDataMessage::requestid() const {
  // @@protoc_insertion_point(field_get:AvatarDataMessage.requestId)
  return requestid_;
}
 void AvatarDataMessage::set_requestid(::google::protobuf::uint32 value) {
  set_has_requestid();
  requestid_ = value;
  // @@protoc_insertion_point(field_set:AvatarDataMessage.requestId)
}

// required bytes avatarBlock = 2;
bool AvatarDataMessage::has_avatarblock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AvatarDataMessage::set_has_avatarblock() {
  _has_bits_[0] |= 0x00000002u;
}
void AvatarDataMessage::clear_has_avatarblock() {
  _has_bits_[0] &= ~0x00000002u;
}
void AvatarDataMessage::clear_avatarblock() {
  avatarblock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatarblock();
}
 const ::std::string& AvatarDataMessage::avatarblock() const {
  // @@protoc_insertion_point(field_get:AvatarDataMessage.avatarBlock)
  return avatarblock_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AvatarDataMessage::set_avatarblock(const ::std::string& value) {
  set_has_avatarblock();
  avatarblock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AvatarDataMessage.avatarBlock)
}
 void AvatarDataMessage::set_avatarblock(const char* value) {
  set_has_avatarblock();
  avatarblock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AvatarDataMessage.avatarBlock)
}
 void AvatarDataMessage::set_avatarblock(const void* value, size_t size) {
  set_has_avatarblock();
  avatarblock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AvatarDataMessage.avatarBlock)
}
 ::std::string* AvatarDataMessage::mutable_avatarblock() {
  set_has_avatarblock();
  // @@protoc_insertion_point(field_mutable:AvatarDataMessage.avatarBlock)
  return avatarblock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AvatarDataMessage::release_avatarblock() {
  // @@protoc_insertion_point(field_release:AvatarDataMessage.avatarBlock)
  clear_has_avatarblock();
  return avatarblock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AvatarDataMessage::set_allocated_avatarblock(::std::string* avatarblock) {
  if (avatarblock != NULL) {
    set_has_avatarblock();
  } else {
    clear_has_avatarblock();
  }
  avatarblock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatarblock);
  // @@protoc_insertion_point(field_set_allocated:AvatarDataMessage.avatarBlock)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAvatarEndMessage(
    AvatarEndMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarEndMessage::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarEndMessage::AvatarEndMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvatarEndMessage)
}

void AvatarEndMessage::InitAsDefaultInstance() {
}

AvatarEndMessage::AvatarEndMessage(const AvatarEndMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AvatarEndMessage)
}

void AvatarEndMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarEndMessage::~AvatarEndMessage() {
  // @@protoc_insertion_point(destructor:AvatarEndMessage)
  SharedDtor();
}

void AvatarEndMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AvatarEndMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AvatarEndMessage& AvatarEndMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AvatarEndMessage* AvatarEndMessage::default_instance_ = NULL;

AvatarEndMessage* AvatarEndMessage::New(::google::protobuf::Arena* arena) const {
  AvatarEndMessage* n = new AvatarEndMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarEndMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarEndMessage)
  requestid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AvatarEndMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAvatarEndMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AvatarEndMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AvatarEndMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AvatarEndMessage)
  return false;
#undef DO_
}

void AvatarEndMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AvatarEndMessage)
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AvatarEndMessage)
}

int AvatarEndMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarEndMessage)
  int total_size = 0;

  // required uint32 requestId = 1;
  if (has_requestid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarEndMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvatarEndMessage*>(&from));
}

void AvatarEndMessage::MergeFrom(const AvatarEndMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarEndMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AvatarEndMessage::CopyFrom(const AvatarEndMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarEndMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarEndMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AvatarEndMessage::Swap(AvatarEndMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarEndMessage::InternalSwap(AvatarEndMessage* other) {
  std::swap(requestid_, other->requestid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AvatarEndMessage::GetTypeName() const {
  return "AvatarEndMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarEndMessage

// required uint32 requestId = 1;
bool AvatarEndMessage::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AvatarEndMessage::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
void AvatarEndMessage::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AvatarEndMessage::clear_requestid() {
  requestid_ = 0u;
  clear_has_requestid();
}
 ::google::protobuf::uint32 AvatarEndMessage::requestid() const {
  // @@protoc_insertion_point(field_get:AvatarEndMessage.requestId)
  return requestid_;
}
 void AvatarEndMessage::set_requestid(::google::protobuf::uint32 value) {
  set_has_requestid();
  requestid_ = value;
  // @@protoc_insertion_point(field_set:AvatarEndMessage.requestId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForUnknownAvatarMessage(
    UnknownAvatarMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnknownAvatarMessage::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnknownAvatarMessage::UnknownAvatarMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnknownAvatarMessage)
}

void UnknownAvatarMessage::InitAsDefaultInstance() {
}

UnknownAvatarMessage::UnknownAvatarMessage(const UnknownAvatarMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UnknownAvatarMessage)
}

void UnknownAvatarMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnknownAvatarMessage::~UnknownAvatarMessage() {
  // @@protoc_insertion_point(destructor:UnknownAvatarMessage)
  SharedDtor();
}

void UnknownAvatarMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnknownAvatarMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnknownAvatarMessage& UnknownAvatarMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

UnknownAvatarMessage* UnknownAvatarMessage::default_instance_ = NULL;

UnknownAvatarMessage* UnknownAvatarMessage::New(::google::protobuf::Arena* arena) const {
  UnknownAvatarMessage* n = new UnknownAvatarMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnknownAvatarMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:UnknownAvatarMessage)
  requestid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnknownAvatarMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForUnknownAvatarMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:UnknownAvatarMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UnknownAvatarMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UnknownAvatarMessage)
  return false;
#undef DO_
}

void UnknownAvatarMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UnknownAvatarMessage)
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:UnknownAvatarMessage)
}

int UnknownAvatarMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:UnknownAvatarMessage)
  int total_size = 0;

  // required uint32 requestId = 1;
  if (has_requestid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnknownAvatarMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnknownAvatarMessage*>(&from));
}

void UnknownAvatarMessage::MergeFrom(const UnknownAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnknownAvatarMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void UnknownAvatarMessage::CopyFrom(const UnknownAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnknownAvatarMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownAvatarMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UnknownAvatarMessage::Swap(UnknownAvatarMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnknownAvatarMessage::InternalSwap(UnknownAvatarMessage* other) {
  std::swap(requestid_, other->requestid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UnknownAvatarMessage::GetTypeName() const {
  return "UnknownAvatarMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnknownAvatarMessage

// required uint32 requestId = 1;
bool UnknownAvatarMessage::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnknownAvatarMessage::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
void UnknownAvatarMessage::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnknownAvatarMessage::clear_requestid() {
  requestid_ = 0u;
  clear_has_requestid();
}
 ::google::protobuf::uint32 UnknownAvatarMessage::requestid() const {
  // @@protoc_insertion_point(field_get:UnknownAvatarMessage.requestId)
  return requestid_;
}
 void UnknownAvatarMessage::set_requestid(::google::protobuf::uint32 value) {
  set_has_requestid();
  requestid_ = value;
  // @@protoc_insertion_point(field_set:UnknownAvatarMessage.requestId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPlayerListMessage(
    PlayerListMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool PlayerListMessage_PlayerListNotification_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlayerListMessage_PlayerListNotification PlayerListMessage::playerListNew;
const PlayerListMessage_PlayerListNotification PlayerListMessage::playerListLeft;
const PlayerListMessage_PlayerListNotification PlayerListMessage::PlayerListNotification_MIN;
const PlayerListMessage_PlayerListNotification PlayerListMessage::PlayerListNotification_MAX;
const int PlayerListMessage::PlayerListNotification_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerListMessage::kPlayerIdFieldNumber;
const int PlayerListMessage::kPlayerListNotificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerListMessage::PlayerListMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerListMessage)
}

void PlayerListMessage::InitAsDefaultInstance() {
}

PlayerListMessage::PlayerListMessage(const PlayerListMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerListMessage)
}

void PlayerListMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_ = 0u;
  playerlistnotification_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerListMessage::~PlayerListMessage() {
  // @@protoc_insertion_point(destructor:PlayerListMessage)
  SharedDtor();
}

void PlayerListMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerListMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerListMessage& PlayerListMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

PlayerListMessage* PlayerListMessage::default_instance_ = NULL;

PlayerListMessage* PlayerListMessage::New(::google::protobuf::Arena* arena) const {
  PlayerListMessage* n = new PlayerListMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerListMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerListMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerListMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerListMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, playerlistnotification_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlayerListMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPlayerListMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PlayerListMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerListNotification;
        break;
      }

      // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
      case 2: {
        if (tag == 16) {
         parse_playerListNotification:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlayerListMessage_PlayerListNotification_IsValid(value)) {
            set_playerlistnotification(static_cast< ::PlayerListMessage_PlayerListNotification >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerListMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerListMessage)
  return false;
#undef DO_
}

void PlayerListMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerListMessage)
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
  if (has_playerlistnotification()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->playerlistnotification(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerListMessage)
}

int PlayerListMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerListMessage)
  int total_size = 0;

  if (has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_playerlistnotification()) {
    // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerlistnotification());
  }

  return total_size;
}
int PlayerListMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerListMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerlistnotification());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerListMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerListMessage*>(&from));
}

void PlayerListMessage::MergeFrom(const PlayerListMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerListMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playerlistnotification()) {
      set_playerlistnotification(from.playerlistnotification());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PlayerListMessage::CopyFrom(const PlayerListMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerListMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerListMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerListMessage::Swap(PlayerListMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerListMessage::InternalSwap(PlayerListMessage* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(playerlistnotification_, other->playerlistnotification_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerListMessage::GetTypeName() const {
  return "PlayerListMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerListMessage

// required uint32 playerId = 1;
bool PlayerListMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerListMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerListMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerListMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 PlayerListMessage::playerid() const {
  // @@protoc_insertion_point(field_get:PlayerListMessage.playerId)
  return playerid_;
}
 void PlayerListMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:PlayerListMessage.playerId)
}

// required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
bool PlayerListMessage::has_playerlistnotification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerListMessage::set_has_playerlistnotification() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerListMessage::clear_has_playerlistnotification() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerListMessage::clear_playerlistnotification() {
  playerlistnotification_ = 0;
  clear_has_playerlistnotification();
}
 ::PlayerListMessage_PlayerListNotification PlayerListMessage::playerlistnotification() const {
  // @@protoc_insertion_point(field_get:PlayerListMessage.playerListNotification)
  return static_cast< ::PlayerListMessage_PlayerListNotification >(playerlistnotification_);
}
 void PlayerListMessage::set_playerlistnotification(::PlayerListMessage_PlayerListNotification value) {
  assert(::PlayerListMessage_PlayerListNotification_IsValid(value));
  set_has_playerlistnotification();
  playerlistnotification_ = value;
  // @@protoc_insertion_point(field_set:PlayerListMessage.playerListNotification)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameListNewMessage(
    GameListNewMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListNewMessage::kGameIdFieldNumber;
const int GameListNewMessage::kGameModeFieldNumber;
const int GameListNewMessage::kIsPrivateFieldNumber;
const int GameListNewMessage::kPlayerIdsFieldNumber;
const int GameListNewMessage::kAdminPlayerIdFieldNumber;
const int GameListNewMessage::kGameInfoFieldNumber;
const int GameListNewMessage::kSpectatorIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListNewMessage::GameListNewMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListNewMessage)
}

void GameListNewMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gameinfo_ = const_cast< ::NetGameInfo*>(
      ::NetGameInfo::internal_default_instance());
#else
  gameinfo_ = const_cast< ::NetGameInfo*>(&::NetGameInfo::default_instance());
#endif
}

GameListNewMessage::GameListNewMessage(const GameListNewMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameListNewMessage)
}

void GameListNewMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  gamemode_ = 1;
  isprivate_ = false;
  adminplayerid_ = 0u;
  gameinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListNewMessage::~GameListNewMessage() {
  // @@protoc_insertion_point(destructor:GameListNewMessage)
  SharedDtor();
}

void GameListNewMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete gameinfo_;
  }
}

void GameListNewMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameListNewMessage& GameListNewMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameListNewMessage* GameListNewMessage::default_instance_ = NULL;

GameListNewMessage* GameListNewMessage::New(::google::protobuf::Arena* arena) const {
  GameListNewMessage* n = new GameListNewMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameListNewMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListNewMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameListNewMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameListNewMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 55u) {
    ZR_(isprivate_, adminplayerid_);
    gameid_ = 0u;
    gamemode_ = 1;
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::NetGameInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  playerids_.Clear();
  spectatorids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameListNewMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameListNewMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameListNewMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameMode;
        break;
      }

      // required .NetGameMode gameMode = 2;
      case 2: {
        if (tag == 16) {
         parse_gameMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameMode_IsValid(value)) {
            set_gamemode(static_cast< ::NetGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isPrivate;
        break;
      }

      // required bool isPrivate = 3;
      case 3: {
        if (tag == 24) {
         parse_isPrivate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprivate_)));
          set_has_isprivate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_playerIds;
        break;
      }

      // repeated uint32 playerIds = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_playerIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerids())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_playerids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adminPlayerId;
        break;
      }

      // required uint32 adminPlayerId = 5;
      case 5: {
        if (tag == 40) {
         parse_adminPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adminplayerid_)));
          set_has_adminplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gameInfo;
        break;
      }

      // required .NetGameInfo gameInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_gameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_spectatorIds;
        break;
      }

      // repeated uint32 spectatorIds = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_spectatorIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_spectatorids())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58, input, this->mutable_spectatorids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListNewMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListNewMessage)
  return false;
#undef DO_
}

void GameListNewMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListNewMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .NetGameMode gameMode = 2;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gamemode(), output);
  }

  // required bool isPrivate = 3;
  if (has_isprivate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isprivate(), output);
  }

  // repeated uint32 playerIds = 4 [packed = true];
  if (this->playerids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_playerids_cached_byte_size_);
  }
  for (int i = 0; i < this->playerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->playerids(i), output);
  }

  // required uint32 adminPlayerId = 5;
  if (has_adminplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->adminplayerid(), output);
  }

  // required .NetGameInfo gameInfo = 6;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->gameinfo_, output);
  }

  // repeated uint32 spectatorIds = 7 [packed = true];
  if (this->spectatorids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_spectatorids_cached_byte_size_);
  }
  for (int i = 0; i < this->spectatorids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->spectatorids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListNewMessage)
}

int GameListNewMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListNewMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_gamemode()) {
    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemode());
  }

  if (has_isprivate()) {
    // required bool isPrivate = 3;
    total_size += 1 + 1;
  }

  if (has_adminplayerid()) {
    // required uint32 adminPlayerId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adminplayerid());
  }

  if (has_gameinfo()) {
    // required .NetGameInfo gameInfo = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameinfo_);
  }

  return total_size;
}
int GameListNewMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameListNewMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemode());

    // required bool isPrivate = 3;
    total_size += 1 + 1;

    // required uint32 adminPlayerId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adminplayerid());

    // required .NetGameInfo gameInfo = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 playerIds = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->playerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playerids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _playerids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 spectatorIds = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->spectatorids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->spectatorids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spectatorids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListNewMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListNewMessage*>(&from));
}

void GameListNewMessage::MergeFrom(const GameListNewMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListNewMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  playerids_.MergeFrom(from.playerids_);
  spectatorids_.MergeFrom(from.spectatorids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
    if (from.has_isprivate()) {
      set_isprivate(from.isprivate());
    }
    if (from.has_adminplayerid()) {
      set_adminplayerid(from.adminplayerid());
    }
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::NetGameInfo::MergeFrom(from.gameinfo());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameListNewMessage::CopyFrom(const GameListNewMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListNewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListNewMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  if (has_gameinfo()) {
    if (!this->gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void GameListNewMessage::Swap(GameListNewMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListNewMessage::InternalSwap(GameListNewMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(gamemode_, other->gamemode_);
  std::swap(isprivate_, other->isprivate_);
  playerids_.UnsafeArenaSwap(&other->playerids_);
  std::swap(adminplayerid_, other->adminplayerid_);
  std::swap(gameinfo_, other->gameinfo_);
  spectatorids_.UnsafeArenaSwap(&other->spectatorids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameListNewMessage::GetTypeName() const {
  return "GameListNewMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameListNewMessage

// required uint32 gameId = 1;
bool GameListNewMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameListNewMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameListNewMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameListNewMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameListNewMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameListNewMessage.gameId)
  return gameid_;
}
 void GameListNewMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameListNewMessage.gameId)
}

// required .NetGameMode gameMode = 2;
bool GameListNewMessage::has_gamemode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameListNewMessage::set_has_gamemode() {
  _has_bits_[0] |= 0x00000002u;
}
void GameListNewMessage::clear_has_gamemode() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameListNewMessage::clear_gamemode() {
  gamemode_ = 1;
  clear_has_gamemode();
}
 ::NetGameMode GameListNewMessage::gamemode() const {
  // @@protoc_insertion_point(field_get:GameListNewMessage.gameMode)
  return static_cast< ::NetGameMode >(gamemode_);
}
 void GameListNewMessage::set_gamemode(::NetGameMode value) {
  assert(::NetGameMode_IsValid(value));
  set_has_gamemode();
  gamemode_ = value;
  // @@protoc_insertion_point(field_set:GameListNewMessage.gameMode)
}

// required bool isPrivate = 3;
bool GameListNewMessage::has_isprivate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameListNewMessage::set_has_isprivate() {
  _has_bits_[0] |= 0x00000004u;
}
void GameListNewMessage::clear_has_isprivate() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameListNewMessage::clear_isprivate() {
  isprivate_ = false;
  clear_has_isprivate();
}
 bool GameListNewMessage::isprivate() const {
  // @@protoc_insertion_point(field_get:GameListNewMessage.isPrivate)
  return isprivate_;
}
 void GameListNewMessage::set_isprivate(bool value) {
  set_has_isprivate();
  isprivate_ = value;
  // @@protoc_insertion_point(field_set:GameListNewMessage.isPrivate)
}

// repeated uint32 playerIds = 4 [packed = true];
int GameListNewMessage::playerids_size() const {
  return playerids_.size();
}
void GameListNewMessage::clear_playerids() {
  playerids_.Clear();
}
 ::google::protobuf::uint32 GameListNewMessage::playerids(int index) const {
  // @@protoc_insertion_point(field_get:GameListNewMessage.playerIds)
  return playerids_.Get(index);
}
 void GameListNewMessage::set_playerids(int index, ::google::protobuf::uint32 value) {
  playerids_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameListNewMessage.playerIds)
}
 void GameListNewMessage::add_playerids(::google::protobuf::uint32 value) {
  playerids_.Add(value);
  // @@protoc_insertion_point(field_add:GameListNewMessage.playerIds)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameListNewMessage::playerids() const {
  // @@protoc_insertion_point(field_list:GameListNewMessage.playerIds)
  return playerids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameListNewMessage::mutable_playerids() {
  // @@protoc_insertion_point(field_mutable_list:GameListNewMessage.playerIds)
  return &playerids_;
}

// required uint32 adminPlayerId = 5;
bool GameListNewMessage::has_adminplayerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameListNewMessage::set_has_adminplayerid() {
  _has_bits_[0] |= 0x00000010u;
}
void GameListNewMessage::clear_has_adminplayerid() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameListNewMessage::clear_adminplayerid() {
  adminplayerid_ = 0u;
  clear_has_adminplayerid();
}
 ::google::protobuf::uint32 GameListNewMessage::adminplayerid() const {
  // @@protoc_insertion_point(field_get:GameListNewMessage.adminPlayerId)
  return adminplayerid_;
}
 void GameListNewMessage::set_adminplayerid(::google::protobuf::uint32 value) {
  set_has_adminplayerid();
  adminplayerid_ = value;
  // @@protoc_insertion_point(field_set:GameListNewMessage.adminPlayerId)
}

// required .NetGameInfo gameInfo = 6;
bool GameListNewMessage::has_gameinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameListNewMessage::set_has_gameinfo() {
  _has_bits_[0] |= 0x00000020u;
}
void GameListNewMessage::clear_has_gameinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameListNewMessage::clear_gameinfo() {
  if (gameinfo_ != NULL) gameinfo_->::NetGameInfo::Clear();
  clear_has_gameinfo();
}
const ::NetGameInfo& GameListNewMessage::gameinfo() const {
  // @@protoc_insertion_point(field_get:GameListNewMessage.gameInfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gameinfo_ != NULL ? *gameinfo_ : *default_instance().gameinfo_;
#else
  return gameinfo_ != NULL ? *gameinfo_ : *default_instance_->gameinfo_;
#endif
}
::NetGameInfo* GameListNewMessage::mutable_gameinfo() {
  set_has_gameinfo();
  if (gameinfo_ == NULL) {
    gameinfo_ = new ::NetGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:GameListNewMessage.gameInfo)
  return gameinfo_;
}
::NetGameInfo* GameListNewMessage::release_gameinfo() {
  // @@protoc_insertion_point(field_release:GameListNewMessage.gameInfo)
  clear_has_gameinfo();
  ::NetGameInfo* temp = gameinfo_;
  gameinfo_ = NULL;
  return temp;
}
void GameListNewMessage::set_allocated_gameinfo(::NetGameInfo* gameinfo) {
  delete gameinfo_;
  gameinfo_ = gameinfo;
  if (gameinfo) {
    set_has_gameinfo();
  } else {
    clear_has_gameinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GameListNewMessage.gameInfo)
}

// repeated uint32 spectatorIds = 7 [packed = true];
int GameListNewMessage::spectatorids_size() const {
  return spectatorids_.size();
}
void GameListNewMessage::clear_spectatorids() {
  spectatorids_.Clear();
}
 ::google::protobuf::uint32 GameListNewMessage::spectatorids(int index) const {
  // @@protoc_insertion_point(field_get:GameListNewMessage.spectatorIds)
  return spectatorids_.Get(index);
}
 void GameListNewMessage::set_spectatorids(int index, ::google::protobuf::uint32 value) {
  spectatorids_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameListNewMessage.spectatorIds)
}
 void GameListNewMessage::add_spectatorids(::google::protobuf::uint32 value) {
  spectatorids_.Add(value);
  // @@protoc_insertion_point(field_add:GameListNewMessage.spectatorIds)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameListNewMessage::spectatorids() const {
  // @@protoc_insertion_point(field_list:GameListNewMessage.spectatorIds)
  return spectatorids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameListNewMessage::mutable_spectatorids() {
  // @@protoc_insertion_point(field_mutable_list:GameListNewMessage.spectatorIds)
  return &spectatorids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameListUpdateMessage(
    GameListUpdateMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListUpdateMessage::kGameIdFieldNumber;
const int GameListUpdateMessage::kGameModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListUpdateMessage::GameListUpdateMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListUpdateMessage)
}

void GameListUpdateMessage::InitAsDefaultInstance() {
}

GameListUpdateMessage::GameListUpdateMessage(const GameListUpdateMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameListUpdateMessage)
}

void GameListUpdateMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  gamemode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListUpdateMessage::~GameListUpdateMessage() {
  // @@protoc_insertion_point(destructor:GameListUpdateMessage)
  SharedDtor();
}

void GameListUpdateMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameListUpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameListUpdateMessage& GameListUpdateMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameListUpdateMessage* GameListUpdateMessage::default_instance_ = NULL;

GameListUpdateMessage* GameListUpdateMessage::New(::google::protobuf::Arena* arena) const {
  GameListUpdateMessage* n = new GameListUpdateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameListUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListUpdateMessage)
  if (_has_bits_[0 / 32] & 3u) {
    gameid_ = 0u;
    gamemode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameListUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameListUpdateMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameListUpdateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameMode;
        break;
      }

      // required .NetGameMode gameMode = 2;
      case 2: {
        if (tag == 16) {
         parse_gameMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameMode_IsValid(value)) {
            set_gamemode(static_cast< ::NetGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListUpdateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListUpdateMessage)
  return false;
#undef DO_
}

void GameListUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListUpdateMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .NetGameMode gameMode = 2;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gamemode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListUpdateMessage)
}

int GameListUpdateMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListUpdateMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_gamemode()) {
    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemode());
  }

  return total_size;
}
int GameListUpdateMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameListUpdateMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListUpdateMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListUpdateMessage*>(&from));
}

void GameListUpdateMessage::MergeFrom(const GameListUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListUpdateMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameListUpdateMessage::CopyFrom(const GameListUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListUpdateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameListUpdateMessage::Swap(GameListUpdateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListUpdateMessage::InternalSwap(GameListUpdateMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(gamemode_, other->gamemode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameListUpdateMessage::GetTypeName() const {
  return "GameListUpdateMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameListUpdateMessage

// required uint32 gameId = 1;
bool GameListUpdateMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameListUpdateMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameListUpdateMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameListUpdateMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameListUpdateMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameListUpdateMessage.gameId)
  return gameid_;
}
 void GameListUpdateMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameListUpdateMessage.gameId)
}

// required .NetGameMode gameMode = 2;
bool GameListUpdateMessage::has_gamemode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameListUpdateMessage::set_has_gamemode() {
  _has_bits_[0] |= 0x00000002u;
}
void GameListUpdateMessage::clear_has_gamemode() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameListUpdateMessage::clear_gamemode() {
  gamemode_ = 1;
  clear_has_gamemode();
}
 ::NetGameMode GameListUpdateMessage::gamemode() const {
  // @@protoc_insertion_point(field_get:GameListUpdateMessage.gameMode)
  return static_cast< ::NetGameMode >(gamemode_);
}
 void GameListUpdateMessage::set_gamemode(::NetGameMode value) {
  assert(::NetGameMode_IsValid(value));
  set_has_gamemode();
  gamemode_ = value;
  // @@protoc_insertion_point(field_set:GameListUpdateMessage.gameMode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameListPlayerJoinedMessage(
    GameListPlayerJoinedMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListPlayerJoinedMessage::kGameIdFieldNumber;
const int GameListPlayerJoinedMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListPlayerJoinedMessage::GameListPlayerJoinedMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListPlayerJoinedMessage)
}

void GameListPlayerJoinedMessage::InitAsDefaultInstance() {
}

GameListPlayerJoinedMessage::GameListPlayerJoinedMessage(const GameListPlayerJoinedMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameListPlayerJoinedMessage)
}

void GameListPlayerJoinedMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListPlayerJoinedMessage::~GameListPlayerJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameListPlayerJoinedMessage)
  SharedDtor();
}

void GameListPlayerJoinedMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameListPlayerJoinedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameListPlayerJoinedMessage& GameListPlayerJoinedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameListPlayerJoinedMessage* GameListPlayerJoinedMessage::default_instance_ = NULL;

GameListPlayerJoinedMessage* GameListPlayerJoinedMessage::New(::google::protobuf::Arena* arena) const {
  GameListPlayerJoinedMessage* n = new GameListPlayerJoinedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameListPlayerJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListPlayerJoinedMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameListPlayerJoinedMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameListPlayerJoinedMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameListPlayerJoinedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameListPlayerJoinedMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameListPlayerJoinedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListPlayerJoinedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListPlayerJoinedMessage)
  return false;
#undef DO_
}

void GameListPlayerJoinedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListPlayerJoinedMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListPlayerJoinedMessage)
}

int GameListPlayerJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListPlayerJoinedMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
int GameListPlayerJoinedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameListPlayerJoinedMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListPlayerJoinedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListPlayerJoinedMessage*>(&from));
}

void GameListPlayerJoinedMessage::MergeFrom(const GameListPlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListPlayerJoinedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameListPlayerJoinedMessage::CopyFrom(const GameListPlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListPlayerJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListPlayerJoinedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameListPlayerJoinedMessage::Swap(GameListPlayerJoinedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListPlayerJoinedMessage::InternalSwap(GameListPlayerJoinedMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameListPlayerJoinedMessage::GetTypeName() const {
  return "GameListPlayerJoinedMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameListPlayerJoinedMessage

// required uint32 gameId = 1;
bool GameListPlayerJoinedMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameListPlayerJoinedMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameListPlayerJoinedMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameListPlayerJoinedMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameListPlayerJoinedMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameListPlayerJoinedMessage.gameId)
  return gameid_;
}
 void GameListPlayerJoinedMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameListPlayerJoinedMessage.gameId)
}

// required uint32 playerId = 2;
bool GameListPlayerJoinedMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameListPlayerJoinedMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameListPlayerJoinedMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameListPlayerJoinedMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 GameListPlayerJoinedMessage::playerid() const {
  // @@protoc_insertion_point(field_get:GameListPlayerJoinedMessage.playerId)
  return playerid_;
}
 void GameListPlayerJoinedMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GameListPlayerJoinedMessage.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameListPlayerLeftMessage(
    GameListPlayerLeftMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListPlayerLeftMessage::kGameIdFieldNumber;
const int GameListPlayerLeftMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListPlayerLeftMessage::GameListPlayerLeftMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListPlayerLeftMessage)
}

void GameListPlayerLeftMessage::InitAsDefaultInstance() {
}

GameListPlayerLeftMessage::GameListPlayerLeftMessage(const GameListPlayerLeftMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameListPlayerLeftMessage)
}

void GameListPlayerLeftMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListPlayerLeftMessage::~GameListPlayerLeftMessage() {
  // @@protoc_insertion_point(destructor:GameListPlayerLeftMessage)
  SharedDtor();
}

void GameListPlayerLeftMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameListPlayerLeftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameListPlayerLeftMessage& GameListPlayerLeftMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameListPlayerLeftMessage* GameListPlayerLeftMessage::default_instance_ = NULL;

GameListPlayerLeftMessage* GameListPlayerLeftMessage::New(::google::protobuf::Arena* arena) const {
  GameListPlayerLeftMessage* n = new GameListPlayerLeftMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameListPlayerLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListPlayerLeftMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameListPlayerLeftMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameListPlayerLeftMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameListPlayerLeftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameListPlayerLeftMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameListPlayerLeftMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListPlayerLeftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListPlayerLeftMessage)
  return false;
#undef DO_
}

void GameListPlayerLeftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListPlayerLeftMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListPlayerLeftMessage)
}

int GameListPlayerLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListPlayerLeftMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
int GameListPlayerLeftMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameListPlayerLeftMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListPlayerLeftMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListPlayerLeftMessage*>(&from));
}

void GameListPlayerLeftMessage::MergeFrom(const GameListPlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListPlayerLeftMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameListPlayerLeftMessage::CopyFrom(const GameListPlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListPlayerLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListPlayerLeftMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameListPlayerLeftMessage::Swap(GameListPlayerLeftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListPlayerLeftMessage::InternalSwap(GameListPlayerLeftMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameListPlayerLeftMessage::GetTypeName() const {
  return "GameListPlayerLeftMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameListPlayerLeftMessage

// required uint32 gameId = 1;
bool GameListPlayerLeftMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameListPlayerLeftMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameListPlayerLeftMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameListPlayerLeftMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameListPlayerLeftMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameListPlayerLeftMessage.gameId)
  return gameid_;
}
 void GameListPlayerLeftMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameListPlayerLeftMessage.gameId)
}

// required uint32 playerId = 2;
bool GameListPlayerLeftMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameListPlayerLeftMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameListPlayerLeftMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameListPlayerLeftMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 GameListPlayerLeftMessage::playerid() const {
  // @@protoc_insertion_point(field_get:GameListPlayerLeftMessage.playerId)
  return playerid_;
}
 void GameListPlayerLeftMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GameListPlayerLeftMessage.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameListSpectatorJoinedMessage(
    GameListSpectatorJoinedMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListSpectatorJoinedMessage::kGameIdFieldNumber;
const int GameListSpectatorJoinedMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListSpectatorJoinedMessage::GameListSpectatorJoinedMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListSpectatorJoinedMessage)
}

void GameListSpectatorJoinedMessage::InitAsDefaultInstance() {
}

GameListSpectatorJoinedMessage::GameListSpectatorJoinedMessage(const GameListSpectatorJoinedMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameListSpectatorJoinedMessage)
}

void GameListSpectatorJoinedMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListSpectatorJoinedMessage::~GameListSpectatorJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameListSpectatorJoinedMessage)
  SharedDtor();
}

void GameListSpectatorJoinedMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameListSpectatorJoinedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameListSpectatorJoinedMessage& GameListSpectatorJoinedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameListSpectatorJoinedMessage* GameListSpectatorJoinedMessage::default_instance_ = NULL;

GameListSpectatorJoinedMessage* GameListSpectatorJoinedMessage::New(::google::protobuf::Arena* arena) const {
  GameListSpectatorJoinedMessage* n = new GameListSpectatorJoinedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameListSpectatorJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListSpectatorJoinedMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameListSpectatorJoinedMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameListSpectatorJoinedMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameListSpectatorJoinedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameListSpectatorJoinedMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameListSpectatorJoinedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListSpectatorJoinedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListSpectatorJoinedMessage)
  return false;
#undef DO_
}

void GameListSpectatorJoinedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListSpectatorJoinedMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListSpectatorJoinedMessage)
}

int GameListSpectatorJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListSpectatorJoinedMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
int GameListSpectatorJoinedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameListSpectatorJoinedMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListSpectatorJoinedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListSpectatorJoinedMessage*>(&from));
}

void GameListSpectatorJoinedMessage::MergeFrom(const GameListSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListSpectatorJoinedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameListSpectatorJoinedMessage::CopyFrom(const GameListSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListSpectatorJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListSpectatorJoinedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameListSpectatorJoinedMessage::Swap(GameListSpectatorJoinedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListSpectatorJoinedMessage::InternalSwap(GameListSpectatorJoinedMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameListSpectatorJoinedMessage::GetTypeName() const {
  return "GameListSpectatorJoinedMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameListSpectatorJoinedMessage

// required uint32 gameId = 1;
bool GameListSpectatorJoinedMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameListSpectatorJoinedMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameListSpectatorJoinedMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameListSpectatorJoinedMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameListSpectatorJoinedMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameListSpectatorJoinedMessage.gameId)
  return gameid_;
}
 void GameListSpectatorJoinedMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameListSpectatorJoinedMessage.gameId)
}

// required uint32 playerId = 2;
bool GameListSpectatorJoinedMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameListSpectatorJoinedMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameListSpectatorJoinedMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameListSpectatorJoinedMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 GameListSpectatorJoinedMessage::playerid() const {
  // @@protoc_insertion_point(field_get:GameListSpectatorJoinedMessage.playerId)
  return playerid_;
}
 void GameListSpectatorJoinedMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GameListSpectatorJoinedMessage.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameListSpectatorLeftMessage(
    GameListSpectatorLeftMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListSpectatorLeftMessage::kGameIdFieldNumber;
const int GameListSpectatorLeftMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListSpectatorLeftMessage::GameListSpectatorLeftMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListSpectatorLeftMessage)
}

void GameListSpectatorLeftMessage::InitAsDefaultInstance() {
}

GameListSpectatorLeftMessage::GameListSpectatorLeftMessage(const GameListSpectatorLeftMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameListSpectatorLeftMessage)
}

void GameListSpectatorLeftMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListSpectatorLeftMessage::~GameListSpectatorLeftMessage() {
  // @@protoc_insertion_point(destructor:GameListSpectatorLeftMessage)
  SharedDtor();
}

void GameListSpectatorLeftMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameListSpectatorLeftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameListSpectatorLeftMessage& GameListSpectatorLeftMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameListSpectatorLeftMessage* GameListSpectatorLeftMessage::default_instance_ = NULL;

GameListSpectatorLeftMessage* GameListSpectatorLeftMessage::New(::google::protobuf::Arena* arena) const {
  GameListSpectatorLeftMessage* n = new GameListSpectatorLeftMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameListSpectatorLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListSpectatorLeftMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameListSpectatorLeftMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameListSpectatorLeftMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameListSpectatorLeftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameListSpectatorLeftMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameListSpectatorLeftMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListSpectatorLeftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListSpectatorLeftMessage)
  return false;
#undef DO_
}

void GameListSpectatorLeftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListSpectatorLeftMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListSpectatorLeftMessage)
}

int GameListSpectatorLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListSpectatorLeftMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
int GameListSpectatorLeftMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameListSpectatorLeftMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListSpectatorLeftMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListSpectatorLeftMessage*>(&from));
}

void GameListSpectatorLeftMessage::MergeFrom(const GameListSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListSpectatorLeftMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameListSpectatorLeftMessage::CopyFrom(const GameListSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListSpectatorLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListSpectatorLeftMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameListSpectatorLeftMessage::Swap(GameListSpectatorLeftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListSpectatorLeftMessage::InternalSwap(GameListSpectatorLeftMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameListSpectatorLeftMessage::GetTypeName() const {
  return "GameListSpectatorLeftMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameListSpectatorLeftMessage

// required uint32 gameId = 1;
bool GameListSpectatorLeftMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameListSpectatorLeftMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameListSpectatorLeftMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameListSpectatorLeftMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameListSpectatorLeftMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameListSpectatorLeftMessage.gameId)
  return gameid_;
}
 void GameListSpectatorLeftMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameListSpectatorLeftMessage.gameId)
}

// required uint32 playerId = 2;
bool GameListSpectatorLeftMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameListSpectatorLeftMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameListSpectatorLeftMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameListSpectatorLeftMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 GameListSpectatorLeftMessage::playerid() const {
  // @@protoc_insertion_point(field_get:GameListSpectatorLeftMessage.playerId)
  return playerid_;
}
 void GameListSpectatorLeftMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GameListSpectatorLeftMessage.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameListAdminChangedMessage(
    GameListAdminChangedMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListAdminChangedMessage::kGameIdFieldNumber;
const int GameListAdminChangedMessage::kNewAdminPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListAdminChangedMessage::GameListAdminChangedMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListAdminChangedMessage)
}

void GameListAdminChangedMessage::InitAsDefaultInstance() {
}

GameListAdminChangedMessage::GameListAdminChangedMessage(const GameListAdminChangedMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameListAdminChangedMessage)
}

void GameListAdminChangedMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  newadminplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListAdminChangedMessage::~GameListAdminChangedMessage() {
  // @@protoc_insertion_point(destructor:GameListAdminChangedMessage)
  SharedDtor();
}

void GameListAdminChangedMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameListAdminChangedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameListAdminChangedMessage& GameListAdminChangedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameListAdminChangedMessage* GameListAdminChangedMessage::default_instance_ = NULL;

GameListAdminChangedMessage* GameListAdminChangedMessage::New(::google::protobuf::Arena* arena) const {
  GameListAdminChangedMessage* n = new GameListAdminChangedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameListAdminChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListAdminChangedMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameListAdminChangedMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameListAdminChangedMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, newadminplayerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameListAdminChangedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameListAdminChangedMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameListAdminChangedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newAdminPlayerId;
        break;
      }

      // required uint32 newAdminPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_newAdminPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newadminplayerid_)));
          set_has_newadminplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListAdminChangedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListAdminChangedMessage)
  return false;
#undef DO_
}

void GameListAdminChangedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListAdminChangedMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 newAdminPlayerId = 2;
  if (has_newadminplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newadminplayerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListAdminChangedMessage)
}

int GameListAdminChangedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListAdminChangedMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_newadminplayerid()) {
    // required uint32 newAdminPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newadminplayerid());
  }

  return total_size;
}
int GameListAdminChangedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameListAdminChangedMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 newAdminPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newadminplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListAdminChangedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListAdminChangedMessage*>(&from));
}

void GameListAdminChangedMessage::MergeFrom(const GameListAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListAdminChangedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_newadminplayerid()) {
      set_newadminplayerid(from.newadminplayerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameListAdminChangedMessage::CopyFrom(const GameListAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListAdminChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListAdminChangedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameListAdminChangedMessage::Swap(GameListAdminChangedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListAdminChangedMessage::InternalSwap(GameListAdminChangedMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(newadminplayerid_, other->newadminplayerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameListAdminChangedMessage::GetTypeName() const {
  return "GameListAdminChangedMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameListAdminChangedMessage

// required uint32 gameId = 1;
bool GameListAdminChangedMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameListAdminChangedMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameListAdminChangedMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameListAdminChangedMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameListAdminChangedMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameListAdminChangedMessage.gameId)
  return gameid_;
}
 void GameListAdminChangedMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameListAdminChangedMessage.gameId)
}

// required uint32 newAdminPlayerId = 2;
bool GameListAdminChangedMessage::has_newadminplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameListAdminChangedMessage::set_has_newadminplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameListAdminChangedMessage::clear_has_newadminplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameListAdminChangedMessage::clear_newadminplayerid() {
  newadminplayerid_ = 0u;
  clear_has_newadminplayerid();
}
 ::google::protobuf::uint32 GameListAdminChangedMessage::newadminplayerid() const {
  // @@protoc_insertion_point(field_get:GameListAdminChangedMessage.newAdminPlayerId)
  return newadminplayerid_;
}
 void GameListAdminChangedMessage::set_newadminplayerid(::google::protobuf::uint32 value) {
  set_has_newadminplayerid();
  newadminplayerid_ = value;
  // @@protoc_insertion_point(field_set:GameListAdminChangedMessage.newAdminPlayerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPlayerInfoRequestMessage(
    PlayerInfoRequestMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoRequestMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoRequestMessage::PlayerInfoRequestMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfoRequestMessage)
}

void PlayerInfoRequestMessage::InitAsDefaultInstance() {
}

PlayerInfoRequestMessage::PlayerInfoRequestMessage(const PlayerInfoRequestMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerInfoRequestMessage)
}

void PlayerInfoRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoRequestMessage::~PlayerInfoRequestMessage() {
  // @@protoc_insertion_point(destructor:PlayerInfoRequestMessage)
  SharedDtor();
}

void PlayerInfoRequestMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerInfoRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerInfoRequestMessage& PlayerInfoRequestMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

PlayerInfoRequestMessage* PlayerInfoRequestMessage::default_instance_ = NULL;

PlayerInfoRequestMessage* PlayerInfoRequestMessage::New(::google::protobuf::Arena* arena) const {
  PlayerInfoRequestMessage* n = new PlayerInfoRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfoRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoRequestMessage)
  playerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlayerInfoRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPlayerInfoRequestMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PlayerInfoRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 playerId = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerid())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_playerid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerInfoRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerInfoRequestMessage)
  return false;
#undef DO_
}

void PlayerInfoRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerInfoRequestMessage)
  // repeated uint32 playerId = 1 [packed = true];
  if (this->playerid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_playerid_cached_byte_size_);
  }
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->playerid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerInfoRequestMessage)
}

int PlayerInfoRequestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoRequestMessage)
  int total_size = 0;

  // repeated uint32 playerId = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playerid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _playerid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerInfoRequestMessage*>(&from));
}

void PlayerInfoRequestMessage::MergeFrom(const PlayerInfoRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoRequestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  playerid_.MergeFrom(from.playerid_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PlayerInfoRequestMessage::CopyFrom(const PlayerInfoRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoRequestMessage::IsInitialized() const {

  return true;
}

void PlayerInfoRequestMessage::Swap(PlayerInfoRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoRequestMessage::InternalSwap(PlayerInfoRequestMessage* other) {
  playerid_.UnsafeArenaSwap(&other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerInfoRequestMessage::GetTypeName() const {
  return "PlayerInfoRequestMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfoRequestMessage

// repeated uint32 playerId = 1 [packed = true];
int PlayerInfoRequestMessage::playerid_size() const {
  return playerid_.size();
}
void PlayerInfoRequestMessage::clear_playerid() {
  playerid_.Clear();
}
 ::google::protobuf::uint32 PlayerInfoRequestMessage::playerid(int index) const {
  // @@protoc_insertion_point(field_get:PlayerInfoRequestMessage.playerId)
  return playerid_.Get(index);
}
 void PlayerInfoRequestMessage::set_playerid(int index, ::google::protobuf::uint32 value) {
  playerid_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerInfoRequestMessage.playerId)
}
 void PlayerInfoRequestMessage::add_playerid(::google::protobuf::uint32 value) {
  playerid_.Add(value);
  // @@protoc_insertion_point(field_add:PlayerInfoRequestMessage.playerId)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerInfoRequestMessage::playerid() const {
  // @@protoc_insertion_point(field_list:PlayerInfoRequestMessage.playerId)
  return playerid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerInfoRequestMessage::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable_list:PlayerInfoRequestMessage.playerId)
  return &playerid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPlayerInfoReplyMessage(
    PlayerInfoReplyMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForPlayerInfoReplyMessage_PlayerInfoData(
    PlayerInfoReplyMessage_PlayerInfoData* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForPlayerInfoReplyMessage_PlayerInfoData_AvatarData(
    PlayerInfoReplyMessage_PlayerInfoData_AvatarData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoReplyMessage_PlayerInfoData_AvatarData::kAvatarTypeFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData_AvatarData::kAvatarHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::PlayerInfoReplyMessage_PlayerInfoData_AvatarData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::InitAsDefaultInstance() {
}

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::PlayerInfoReplyMessage_PlayerInfoData_AvatarData(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatartype_ = 1;
  avatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::~PlayerInfoReplyMessage_PlayerInfoData_AvatarData() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  SharedDtor();
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatarhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

PlayerInfoReplyMessage_PlayerInfoData_AvatarData* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance_ = NULL;

PlayerInfoReplyMessage_PlayerInfoData_AvatarData* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::New(::google::protobuf::Arena* arena) const {
  PlayerInfoReplyMessage_PlayerInfoData_AvatarData* n = new PlayerInfoReplyMessage_PlayerInfoData_AvatarData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  if (_has_bits_[0 / 32] & 3u) {
    avatartype_ = 1;
    if (has_avatarhash()) {
      avatarhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPlayerInfoReplyMessage_PlayerInfoData_AvatarData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetAvatarType avatarType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetAvatarType_IsValid(value)) {
            set_avatartype(static_cast< ::NetAvatarType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avatarHash;
        break;
      }

      // required bytes avatarHash = 2;
      case 2: {
        if (tag == 18) {
         parse_avatarHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarhash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  return false;
#undef DO_
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  // required .NetAvatarType avatarType = 1;
  if (has_avatartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->avatartype(), output);
  }

  // required bytes avatarHash = 2;
  if (has_avatarhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->avatarhash(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
}

int PlayerInfoReplyMessage_PlayerInfoData_AvatarData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  int total_size = 0;

  if (has_avatartype()) {
    // required .NetAvatarType avatarType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->avatartype());
  }

  if (has_avatarhash()) {
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarhash());
  }

  return total_size;
}
int PlayerInfoReplyMessage_PlayerInfoData_AvatarData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NetAvatarType avatarType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->avatartype());

    // required bytes avatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarhash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerInfoReplyMessage_PlayerInfoData_AvatarData*>(&from));
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeFrom(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatartype()) {
      set_avatartype(from.avatartype());
    }
    if (from.has_avatarhash()) {
      set_has_avatarhash();
      avatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarhash_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::CopyFrom(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage_PlayerInfoData_AvatarData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::Swap(PlayerInfoReplyMessage_PlayerInfoData_AvatarData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::InternalSwap(PlayerInfoReplyMessage_PlayerInfoData_AvatarData* other) {
  std::swap(avatartype_, other->avatartype_);
  avatarhash_.Swap(&other->avatarhash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerInfoReplyMessage_PlayerInfoData_AvatarData::GetTypeName() const {
  return "PlayerInfoReplyMessage.PlayerInfoData.AvatarData";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoReplyMessage_PlayerInfoData::kPlayerNameFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kIsHumanFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kPlayerRightsFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kCountryCodeFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kAvatarDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoReplyMessage_PlayerInfoData::PlayerInfoReplyMessage_PlayerInfoData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfoReplyMessage.PlayerInfoData)
}

void PlayerInfoReplyMessage_PlayerInfoData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  avatardata_ = const_cast< ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData*>(
      ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::internal_default_instance());
#else
  avatardata_ = const_cast< ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData*>(&::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance());
#endif
}

PlayerInfoReplyMessage_PlayerInfoData::PlayerInfoReplyMessage_PlayerInfoData(const PlayerInfoReplyMessage_PlayerInfoData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage.PlayerInfoData)
}

void PlayerInfoReplyMessage_PlayerInfoData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ishuman_ = false;
  playerrights_ = 1;
  countrycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatardata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoReplyMessage_PlayerInfoData::~PlayerInfoReplyMessage_PlayerInfoData() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage.PlayerInfoData)
  SharedDtor();
}

void PlayerInfoReplyMessage_PlayerInfoData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete avatardata_;
  }
}

void PlayerInfoReplyMessage_PlayerInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerInfoReplyMessage_PlayerInfoData& PlayerInfoReplyMessage_PlayerInfoData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

PlayerInfoReplyMessage_PlayerInfoData* PlayerInfoReplyMessage_PlayerInfoData::default_instance_ = NULL;

PlayerInfoReplyMessage_PlayerInfoData* PlayerInfoReplyMessage_PlayerInfoData::New(::google::protobuf::Arena* arena) const {
  PlayerInfoReplyMessage_PlayerInfoData* n = new PlayerInfoReplyMessage_PlayerInfoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfoReplyMessage_PlayerInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage.PlayerInfoData)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_playername()) {
      playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ishuman_ = false;
    playerrights_ = 1;
    if (has_countrycode()) {
      countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_avatardata()) {
      if (avatardata_ != NULL) avatardata_->::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlayerInfoReplyMessage_PlayerInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPlayerInfoReplyMessage_PlayerInfoData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PlayerInfoReplyMessage.PlayerInfoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isHuman;
        break;
      }

      // required bool isHuman = 2;
      case 2: {
        if (tag == 16) {
         parse_isHuman:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishuman_)));
          set_has_ishuman();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerRights;
        break;
      }

      // required .NetPlayerInfoRights playerRights = 3;
      case 3: {
        if (tag == 24) {
         parse_playerRights:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetPlayerInfoRights_IsValid(value)) {
            set_playerrights(static_cast< ::NetPlayerInfoRights >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_countryCode;
        break;
      }

      // optional string countryCode = 4;
      case 4: {
        if (tag == 34) {
         parse_countryCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatarData;
        break;
      }

      // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
      case 5: {
        if (tag == 42) {
         parse_avatarData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatardata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerInfoReplyMessage.PlayerInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerInfoReplyMessage.PlayerInfoData)
  return false;
#undef DO_
}

void PlayerInfoReplyMessage_PlayerInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerInfoReplyMessage.PlayerInfoData)
  // required string playerName = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playername(), output);
  }

  // required bool isHuman = 2;
  if (has_ishuman()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ishuman(), output);
  }

  // required .NetPlayerInfoRights playerRights = 3;
  if (has_playerrights()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->playerrights(), output);
  }

  // optional string countryCode = 4;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->countrycode(), output);
  }

  // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
  if (has_avatardata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->avatardata_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerInfoReplyMessage.PlayerInfoData)
}

int PlayerInfoReplyMessage_PlayerInfoData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerInfoReplyMessage.PlayerInfoData)
  int total_size = 0;

  if (has_playername()) {
    // required string playerName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  if (has_ishuman()) {
    // required bool isHuman = 2;
    total_size += 1 + 1;
  }

  if (has_playerrights()) {
    // required .NetPlayerInfoRights playerRights = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerrights());
  }

  return total_size;
}
int PlayerInfoReplyMessage_PlayerInfoData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage.PlayerInfoData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string playerName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());

    // required bool isHuman = 2;
    total_size += 1 + 1;

    // required .NetPlayerInfoRights playerRights = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerrights());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24u) {
    // optional string countryCode = 4;
    if (has_countrycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countrycode());
    }

    // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
    if (has_avatardata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->avatardata_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoReplyMessage_PlayerInfoData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerInfoReplyMessage_PlayerInfoData*>(&from));
}

void PlayerInfoReplyMessage_PlayerInfoData::MergeFrom(const PlayerInfoReplyMessage_PlayerInfoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage.PlayerInfoData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_has_playername();
      playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
    }
    if (from.has_ishuman()) {
      set_ishuman(from.ishuman());
    }
    if (from.has_playerrights()) {
      set_playerrights(from.playerrights());
    }
    if (from.has_countrycode()) {
      set_has_countrycode();
      countrycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.countrycode_);
    }
    if (from.has_avatardata()) {
      mutable_avatardata()->::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeFrom(from.avatardata());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PlayerInfoReplyMessage_PlayerInfoData::CopyFrom(const PlayerInfoReplyMessage_PlayerInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage.PlayerInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage_PlayerInfoData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_avatardata()) {
    if (!this->avatardata_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoReplyMessage_PlayerInfoData::Swap(PlayerInfoReplyMessage_PlayerInfoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoReplyMessage_PlayerInfoData::InternalSwap(PlayerInfoReplyMessage_PlayerInfoData* other) {
  playername_.Swap(&other->playername_);
  std::swap(ishuman_, other->ishuman_);
  std::swap(playerrights_, other->playerrights_);
  countrycode_.Swap(&other->countrycode_);
  std::swap(avatardata_, other->avatardata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerInfoReplyMessage_PlayerInfoData::GetTypeName() const {
  return "PlayerInfoReplyMessage.PlayerInfoData";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoReplyMessage::kPlayerIdFieldNumber;
const int PlayerInfoReplyMessage::kPlayerInfoDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoReplyMessage::PlayerInfoReplyMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfoReplyMessage)
}

void PlayerInfoReplyMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinfodata_ = const_cast< ::PlayerInfoReplyMessage_PlayerInfoData*>(
      ::PlayerInfoReplyMessage_PlayerInfoData::internal_default_instance());
#else
  playerinfodata_ = const_cast< ::PlayerInfoReplyMessage_PlayerInfoData*>(&::PlayerInfoReplyMessage_PlayerInfoData::default_instance());
#endif
}

PlayerInfoReplyMessage::PlayerInfoReplyMessage(const PlayerInfoReplyMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage)
}

void PlayerInfoReplyMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_ = 0u;
  playerinfodata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoReplyMessage::~PlayerInfoReplyMessage() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage)
  SharedDtor();
}

void PlayerInfoReplyMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerinfodata_;
  }
}

void PlayerInfoReplyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerInfoReplyMessage& PlayerInfoReplyMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

PlayerInfoReplyMessage* PlayerInfoReplyMessage::default_instance_ = NULL;

PlayerInfoReplyMessage* PlayerInfoReplyMessage::New(::google::protobuf::Arena* arena) const {
  PlayerInfoReplyMessage* n = new PlayerInfoReplyMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfoReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage)
  if (_has_bits_[0 / 32] & 3u) {
    playerid_ = 0u;
    if (has_playerinfodata()) {
      if (playerinfodata_ != NULL) playerinfodata_->::PlayerInfoReplyMessage_PlayerInfoData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlayerInfoReplyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPlayerInfoReplyMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PlayerInfoReplyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerInfoData;
        break;
      }

      // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
      case 2: {
        if (tag == 18) {
         parse_playerInfoData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfodata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerInfoReplyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerInfoReplyMessage)
  return false;
#undef DO_
}

void PlayerInfoReplyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerInfoReplyMessage)
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
  if (has_playerinfodata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->playerinfodata_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerInfoReplyMessage)
}

int PlayerInfoReplyMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage)
  int total_size = 0;

  // required uint32 playerId = 1;
  if (has_playerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }
  // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
  if (has_playerinfodata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerinfodata_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoReplyMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerInfoReplyMessage*>(&from));
}

void PlayerInfoReplyMessage::MergeFrom(const PlayerInfoReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playerinfodata()) {
      mutable_playerinfodata()->::PlayerInfoReplyMessage_PlayerInfoData::MergeFrom(from.playerinfodata());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PlayerInfoReplyMessage::CopyFrom(const PlayerInfoReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_playerinfodata()) {
    if (!this->playerinfodata_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoReplyMessage::Swap(PlayerInfoReplyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoReplyMessage::InternalSwap(PlayerInfoReplyMessage* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(playerinfodata_, other->playerinfodata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerInfoReplyMessage::GetTypeName() const {
  return "PlayerInfoReplyMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfoReplyMessage_PlayerInfoData_AvatarData

// required .NetAvatarType avatarType = 1;
bool PlayerInfoReplyMessage_PlayerInfoData_AvatarData::has_avatartype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::set_has_avatartype() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::clear_has_avatartype() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::clear_avatartype() {
  avatartype_ = 1;
  clear_has_avatartype();
}
 ::NetAvatarType PlayerInfoReplyMessage_PlayerInfoData_AvatarData::avatartype() const {
  // @@protoc_insertion_point(field_get:PlayerInfoReplyMessage.PlayerInfoData.AvatarData.avatarType)
  return static_cast< ::NetAvatarType >(avatartype_);
}
 void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::set_avatartype(::NetAvatarType value) {
  assert(::NetAvatarType_IsValid(value));
  set_has_avatartype();
  avatartype_ = value;
  // @@protoc_insertion_point(field_set:PlayerInfoReplyMessage.PlayerInfoData.AvatarData.avatarType)
}

// required bytes avatarHash = 2;
bool PlayerInfoReplyMessage_PlayerInfoData_AvatarData::has_avatarhash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::set_has_avatarhash() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::clear_has_avatarhash() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::clear_avatarhash() {
  avatarhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatarhash();
}
 const ::std::string& PlayerInfoReplyMessage_PlayerInfoData_AvatarData::avatarhash() const {
  // @@protoc_insertion_point(field_get:PlayerInfoReplyMessage.PlayerInfoData.AvatarData.avatarHash)
  return avatarhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::set_avatarhash(const ::std::string& value) {
  set_has_avatarhash();
  avatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerInfoReplyMessage.PlayerInfoData.AvatarData.avatarHash)
}
 void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::set_avatarhash(const char* value) {
  set_has_avatarhash();
  avatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerInfoReplyMessage.PlayerInfoData.AvatarData.avatarHash)
}
 void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::set_avatarhash(const void* value, size_t size) {
  set_has_avatarhash();
  avatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerInfoReplyMessage.PlayerInfoData.AvatarData.avatarHash)
}
 ::std::string* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::mutable_avatarhash() {
  set_has_avatarhash();
  // @@protoc_insertion_point(field_mutable:PlayerInfoReplyMessage.PlayerInfoData.AvatarData.avatarHash)
  return avatarhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::release_avatarhash() {
  // @@protoc_insertion_point(field_release:PlayerInfoReplyMessage.PlayerInfoData.AvatarData.avatarHash)
  clear_has_avatarhash();
  return avatarhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::set_allocated_avatarhash(::std::string* avatarhash) {
  if (avatarhash != NULL) {
    set_has_avatarhash();
  } else {
    clear_has_avatarhash();
  }
  avatarhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatarhash);
  // @@protoc_insertion_point(field_set_allocated:PlayerInfoReplyMessage.PlayerInfoData.AvatarData.avatarHash)
}

// -------------------------------------------------------------------

// PlayerInfoReplyMessage_PlayerInfoData

// required string playerName = 1;
bool PlayerInfoReplyMessage_PlayerInfoData::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerInfoReplyMessage_PlayerInfoData::set_has_playername() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerInfoReplyMessage_PlayerInfoData::clear_has_playername() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerInfoReplyMessage_PlayerInfoData::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playername();
}
 const ::std::string& PlayerInfoReplyMessage_PlayerInfoData::playername() const {
  // @@protoc_insertion_point(field_get:PlayerInfoReplyMessage.PlayerInfoData.playerName)
  return playername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfoReplyMessage_PlayerInfoData::set_playername(const ::std::string& value) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerInfoReplyMessage.PlayerInfoData.playerName)
}
 void PlayerInfoReplyMessage_PlayerInfoData::set_playername(const char* value) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerInfoReplyMessage.PlayerInfoData.playerName)
}
 void PlayerInfoReplyMessage_PlayerInfoData::set_playername(const char* value, size_t size) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerInfoReplyMessage.PlayerInfoData.playerName)
}
 ::std::string* PlayerInfoReplyMessage_PlayerInfoData::mutable_playername() {
  set_has_playername();
  // @@protoc_insertion_point(field_mutable:PlayerInfoReplyMessage.PlayerInfoData.playerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfoReplyMessage_PlayerInfoData::release_playername() {
  // @@protoc_insertion_point(field_release:PlayerInfoReplyMessage.PlayerInfoData.playerName)
  clear_has_playername();
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfoReplyMessage_PlayerInfoData::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    set_has_playername();
  } else {
    clear_has_playername();
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:PlayerInfoReplyMessage.PlayerInfoData.playerName)
}

// required bool isHuman = 2;
bool PlayerInfoReplyMessage_PlayerInfoData::has_ishuman() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerInfoReplyMessage_PlayerInfoData::set_has_ishuman() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerInfoReplyMessage_PlayerInfoData::clear_has_ishuman() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerInfoReplyMessage_PlayerInfoData::clear_ishuman() {
  ishuman_ = false;
  clear_has_ishuman();
}
 bool PlayerInfoReplyMessage_PlayerInfoData::ishuman() const {
  // @@protoc_insertion_point(field_get:PlayerInfoReplyMessage.PlayerInfoData.isHuman)
  return ishuman_;
}
 void PlayerInfoReplyMessage_PlayerInfoData::set_ishuman(bool value) {
  set_has_ishuman();
  ishuman_ = value;
  // @@protoc_insertion_point(field_set:PlayerInfoReplyMessage.PlayerInfoData.isHuman)
}

// required .NetPlayerInfoRights playerRights = 3;
bool PlayerInfoReplyMessage_PlayerInfoData::has_playerrights() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerInfoReplyMessage_PlayerInfoData::set_has_playerrights() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerInfoReplyMessage_PlayerInfoData::clear_has_playerrights() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerInfoReplyMessage_PlayerInfoData::clear_playerrights() {
  playerrights_ = 1;
  clear_has_playerrights();
}
 ::NetPlayerInfoRights PlayerInfoReplyMessage_PlayerInfoData::playerrights() const {
  // @@protoc_insertion_point(field_get:PlayerInfoReplyMessage.PlayerInfoData.playerRights)
  return static_cast< ::NetPlayerInfoRights >(playerrights_);
}
 void PlayerInfoReplyMessage_PlayerInfoData::set_playerrights(::NetPlayerInfoRights value) {
  assert(::NetPlayerInfoRights_IsValid(value));
  set_has_playerrights();
  playerrights_ = value;
  // @@protoc_insertion_point(field_set:PlayerInfoReplyMessage.PlayerInfoData.playerRights)
}

// optional string countryCode = 4;
bool PlayerInfoReplyMessage_PlayerInfoData::has_countrycode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerInfoReplyMessage_PlayerInfoData::set_has_countrycode() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerInfoReplyMessage_PlayerInfoData::clear_has_countrycode() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerInfoReplyMessage_PlayerInfoData::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_countrycode();
}
 const ::std::string& PlayerInfoReplyMessage_PlayerInfoData::countrycode() const {
  // @@protoc_insertion_point(field_get:PlayerInfoReplyMessage.PlayerInfoData.countryCode)
  return countrycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfoReplyMessage_PlayerInfoData::set_countrycode(const ::std::string& value) {
  set_has_countrycode();
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerInfoReplyMessage.PlayerInfoData.countryCode)
}
 void PlayerInfoReplyMessage_PlayerInfoData::set_countrycode(const char* value) {
  set_has_countrycode();
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerInfoReplyMessage.PlayerInfoData.countryCode)
}
 void PlayerInfoReplyMessage_PlayerInfoData::set_countrycode(const char* value, size_t size) {
  set_has_countrycode();
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerInfoReplyMessage.PlayerInfoData.countryCode)
}
 ::std::string* PlayerInfoReplyMessage_PlayerInfoData::mutable_countrycode() {
  set_has_countrycode();
  // @@protoc_insertion_point(field_mutable:PlayerInfoReplyMessage.PlayerInfoData.countryCode)
  return countrycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfoReplyMessage_PlayerInfoData::release_countrycode() {
  // @@protoc_insertion_point(field_release:PlayerInfoReplyMessage.PlayerInfoData.countryCode)
  clear_has_countrycode();
  return countrycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfoReplyMessage_PlayerInfoData::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode != NULL) {
    set_has_countrycode();
  } else {
    clear_has_countrycode();
  }
  countrycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:PlayerInfoReplyMessage.PlayerInfoData.countryCode)
}

// optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
bool PlayerInfoReplyMessage_PlayerInfoData::has_avatardata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayerInfoReplyMessage_PlayerInfoData::set_has_avatardata() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayerInfoReplyMessage_PlayerInfoData::clear_has_avatardata() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayerInfoReplyMessage_PlayerInfoData::clear_avatardata() {
  if (avatardata_ != NULL) avatardata_->::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::Clear();
  clear_has_avatardata();
}
const ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData& PlayerInfoReplyMessage_PlayerInfoData::avatardata() const {
  // @@protoc_insertion_point(field_get:PlayerInfoReplyMessage.PlayerInfoData.avatarData)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return avatardata_ != NULL ? *avatardata_ : *default_instance().avatardata_;
#else
  return avatardata_ != NULL ? *avatardata_ : *default_instance_->avatardata_;
#endif
}
::PlayerInfoReplyMessage_PlayerInfoData_AvatarData* PlayerInfoReplyMessage_PlayerInfoData::mutable_avatardata() {
  set_has_avatardata();
  if (avatardata_ == NULL) {
    avatardata_ = new ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData;
  }
  // @@protoc_insertion_point(field_mutable:PlayerInfoReplyMessage.PlayerInfoData.avatarData)
  return avatardata_;
}
::PlayerInfoReplyMessage_PlayerInfoData_AvatarData* PlayerInfoReplyMessage_PlayerInfoData::release_avatardata() {
  // @@protoc_insertion_point(field_release:PlayerInfoReplyMessage.PlayerInfoData.avatarData)
  clear_has_avatardata();
  ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData* temp = avatardata_;
  avatardata_ = NULL;
  return temp;
}
void PlayerInfoReplyMessage_PlayerInfoData::set_allocated_avatardata(::PlayerInfoReplyMessage_PlayerInfoData_AvatarData* avatardata) {
  delete avatardata_;
  avatardata_ = avatardata;
  if (avatardata) {
    set_has_avatardata();
  } else {
    clear_has_avatardata();
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerInfoReplyMessage.PlayerInfoData.avatarData)
}

// -------------------------------------------------------------------

// PlayerInfoReplyMessage

// required uint32 playerId = 1;
bool PlayerInfoReplyMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerInfoReplyMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerInfoReplyMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerInfoReplyMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 PlayerInfoReplyMessage::playerid() const {
  // @@protoc_insertion_point(field_get:PlayerInfoReplyMessage.playerId)
  return playerid_;
}
 void PlayerInfoReplyMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:PlayerInfoReplyMessage.playerId)
}

// optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
bool PlayerInfoReplyMessage::has_playerinfodata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerInfoReplyMessage::set_has_playerinfodata() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerInfoReplyMessage::clear_has_playerinfodata() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerInfoReplyMessage::clear_playerinfodata() {
  if (playerinfodata_ != NULL) playerinfodata_->::PlayerInfoReplyMessage_PlayerInfoData::Clear();
  clear_has_playerinfodata();
}
const ::PlayerInfoReplyMessage_PlayerInfoData& PlayerInfoReplyMessage::playerinfodata() const {
  // @@protoc_insertion_point(field_get:PlayerInfoReplyMessage.playerInfoData)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerinfodata_ != NULL ? *playerinfodata_ : *default_instance().playerinfodata_;
#else
  return playerinfodata_ != NULL ? *playerinfodata_ : *default_instance_->playerinfodata_;
#endif
}
::PlayerInfoReplyMessage_PlayerInfoData* PlayerInfoReplyMessage::mutable_playerinfodata() {
  set_has_playerinfodata();
  if (playerinfodata_ == NULL) {
    playerinfodata_ = new ::PlayerInfoReplyMessage_PlayerInfoData;
  }
  // @@protoc_insertion_point(field_mutable:PlayerInfoReplyMessage.playerInfoData)
  return playerinfodata_;
}
::PlayerInfoReplyMessage_PlayerInfoData* PlayerInfoReplyMessage::release_playerinfodata() {
  // @@protoc_insertion_point(field_release:PlayerInfoReplyMessage.playerInfoData)
  clear_has_playerinfodata();
  ::PlayerInfoReplyMessage_PlayerInfoData* temp = playerinfodata_;
  playerinfodata_ = NULL;
  return temp;
}
void PlayerInfoReplyMessage::set_allocated_playerinfodata(::PlayerInfoReplyMessage_PlayerInfoData* playerinfodata) {
  delete playerinfodata_;
  playerinfodata_ = playerinfodata;
  if (playerinfodata) {
    set_has_playerinfodata();
  } else {
    clear_has_playerinfodata();
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerInfoReplyMessage.playerInfoData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSubscriptionRequestMessage(
    SubscriptionRequestMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool SubscriptionRequestMessage_SubscriptionAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::unsubscribeGameList;
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::resubscribeGameList;
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::SubscriptionAction_MIN;
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::SubscriptionAction_MAX;
const int SubscriptionRequestMessage::SubscriptionAction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscriptionRequestMessage::kSubscriptionActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscriptionRequestMessage::SubscriptionRequestMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubscriptionRequestMessage)
}

void SubscriptionRequestMessage::InitAsDefaultInstance() {
}

SubscriptionRequestMessage::SubscriptionRequestMessage(const SubscriptionRequestMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SubscriptionRequestMessage)
}

void SubscriptionRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscriptionaction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionRequestMessage::~SubscriptionRequestMessage() {
  // @@protoc_insertion_point(destructor:SubscriptionRequestMessage)
  SharedDtor();
}

void SubscriptionRequestMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SubscriptionRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SubscriptionRequestMessage& SubscriptionRequestMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

SubscriptionRequestMessage* SubscriptionRequestMessage::default_instance_ = NULL;

SubscriptionRequestMessage* SubscriptionRequestMessage::New(::google::protobuf::Arena* arena) const {
  SubscriptionRequestMessage* n = new SubscriptionRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscriptionRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SubscriptionRequestMessage)
  subscriptionaction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SubscriptionRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSubscriptionRequestMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:SubscriptionRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubscriptionRequestMessage_SubscriptionAction_IsValid(value)) {
            set_subscriptionaction(static_cast< ::SubscriptionRequestMessage_SubscriptionAction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubscriptionRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubscriptionRequestMessage)
  return false;
#undef DO_
}

void SubscriptionRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubscriptionRequestMessage)
  // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
  if (has_subscriptionaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->subscriptionaction(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SubscriptionRequestMessage)
}

int SubscriptionRequestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SubscriptionRequestMessage)
  int total_size = 0;

  // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
  if (has_subscriptionaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subscriptionaction());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SubscriptionRequestMessage*>(&from));
}

void SubscriptionRequestMessage::MergeFrom(const SubscriptionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubscriptionRequestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscriptionaction()) {
      set_subscriptionaction(from.subscriptionaction());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SubscriptionRequestMessage::CopyFrom(const SubscriptionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubscriptionRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubscriptionRequestMessage::Swap(SubscriptionRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscriptionRequestMessage::InternalSwap(SubscriptionRequestMessage* other) {
  std::swap(subscriptionaction_, other->subscriptionaction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SubscriptionRequestMessage::GetTypeName() const {
  return "SubscriptionRequestMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscriptionRequestMessage

// required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
bool SubscriptionRequestMessage::has_subscriptionaction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubscriptionRequestMessage::set_has_subscriptionaction() {
  _has_bits_[0] |= 0x00000001u;
}
void SubscriptionRequestMessage::clear_has_subscriptionaction() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubscriptionRequestMessage::clear_subscriptionaction() {
  subscriptionaction_ = 1;
  clear_has_subscriptionaction();
}
 ::SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::subscriptionaction() const {
  // @@protoc_insertion_point(field_get:SubscriptionRequestMessage.subscriptionAction)
  return static_cast< ::SubscriptionRequestMessage_SubscriptionAction >(subscriptionaction_);
}
 void SubscriptionRequestMessage::set_subscriptionaction(::SubscriptionRequestMessage_SubscriptionAction value) {
  assert(::SubscriptionRequestMessage_SubscriptionAction_IsValid(value));
  set_has_subscriptionaction();
  subscriptionaction_ = value;
  // @@protoc_insertion_point(field_set:SubscriptionRequestMessage.subscriptionAction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForJoinExistingGameMessage(
    JoinExistingGameMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinExistingGameMessage::kGameIdFieldNumber;
const int JoinExistingGameMessage::kPasswordFieldNumber;
const int JoinExistingGameMessage::kAutoLeaveFieldNumber;
const int JoinExistingGameMessage::kSpectateOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinExistingGameMessage::JoinExistingGameMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JoinExistingGameMessage)
}

void JoinExistingGameMessage::InitAsDefaultInstance() {
}

JoinExistingGameMessage::JoinExistingGameMessage(const JoinExistingGameMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JoinExistingGameMessage)
}

void JoinExistingGameMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoleave_ = false;
  spectateonly_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinExistingGameMessage::~JoinExistingGameMessage() {
  // @@protoc_insertion_point(destructor:JoinExistingGameMessage)
  SharedDtor();
}

void JoinExistingGameMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JoinExistingGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JoinExistingGameMessage& JoinExistingGameMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

JoinExistingGameMessage* JoinExistingGameMessage::default_instance_ = NULL;

JoinExistingGameMessage* JoinExistingGameMessage::New(::google::protobuf::Arena* arena) const {
  JoinExistingGameMessage* n = new JoinExistingGameMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinExistingGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinExistingGameMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(JoinExistingGameMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JoinExistingGameMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(gameid_, spectateonly_);
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool JoinExistingGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForJoinExistingGameMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:JoinExistingGameMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_autoLeave;
        break;
      }

      // optional bool autoLeave = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_autoLeave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoleave_)));
          set_has_autoleave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_spectateOnly;
        break;
      }

      // optional bool spectateOnly = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_spectateOnly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spectateonly_)));
          set_has_spectateonly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JoinExistingGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JoinExistingGameMessage)
  return false;
#undef DO_
}

void JoinExistingGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JoinExistingGameMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional bool autoLeave = 3 [default = false];
  if (has_autoleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autoleave(), output);
  }

  // optional bool spectateOnly = 4 [default = false];
  if (has_spectateonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->spectateonly(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:JoinExistingGameMessage)
}

int JoinExistingGameMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:JoinExistingGameMessage)
  int total_size = 0;

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional bool autoLeave = 3 [default = false];
    if (has_autoleave()) {
      total_size += 1 + 1;
    }

    // optional bool spectateOnly = 4 [default = false];
    if (has_spectateonly()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinExistingGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JoinExistingGameMessage*>(&from));
}

void JoinExistingGameMessage::MergeFrom(const JoinExistingGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinExistingGameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_autoleave()) {
      set_autoleave(from.autoleave());
    }
    if (from.has_spectateonly()) {
      set_spectateonly(from.spectateonly());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void JoinExistingGameMessage::CopyFrom(const JoinExistingGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinExistingGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinExistingGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JoinExistingGameMessage::Swap(JoinExistingGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinExistingGameMessage::InternalSwap(JoinExistingGameMessage* other) {
  std::swap(gameid_, other->gameid_);
  password_.Swap(&other->password_);
  std::swap(autoleave_, other->autoleave_);
  std::swap(spectateonly_, other->spectateonly_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string JoinExistingGameMessage::GetTypeName() const {
  return "JoinExistingGameMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinExistingGameMessage

// required uint32 gameId = 1;
bool JoinExistingGameMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JoinExistingGameMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void JoinExistingGameMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void JoinExistingGameMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 JoinExistingGameMessage::gameid() const {
  // @@protoc_insertion_point(field_get:JoinExistingGameMessage.gameId)
  return gameid_;
}
 void JoinExistingGameMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:JoinExistingGameMessage.gameId)
}

// optional string password = 2;
bool JoinExistingGameMessage::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JoinExistingGameMessage::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void JoinExistingGameMessage::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void JoinExistingGameMessage::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& JoinExistingGameMessage::password() const {
  // @@protoc_insertion_point(field_get:JoinExistingGameMessage.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JoinExistingGameMessage::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JoinExistingGameMessage.password)
}
 void JoinExistingGameMessage::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JoinExistingGameMessage.password)
}
 void JoinExistingGameMessage::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JoinExistingGameMessage.password)
}
 ::std::string* JoinExistingGameMessage::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:JoinExistingGameMessage.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JoinExistingGameMessage::release_password() {
  // @@protoc_insertion_point(field_release:JoinExistingGameMessage.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JoinExistingGameMessage::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:JoinExistingGameMessage.password)
}

// optional bool autoLeave = 3 [default = false];
bool JoinExistingGameMessage::has_autoleave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void JoinExistingGameMessage::set_has_autoleave() {
  _has_bits_[0] |= 0x00000004u;
}
void JoinExistingGameMessage::clear_has_autoleave() {
  _has_bits_[0] &= ~0x00000004u;
}
void JoinExistingGameMessage::clear_autoleave() {
  autoleave_ = false;
  clear_has_autoleave();
}
 bool JoinExistingGameMessage::autoleave() const {
  // @@protoc_insertion_point(field_get:JoinExistingGameMessage.autoLeave)
  return autoleave_;
}
 void JoinExistingGameMessage::set_autoleave(bool value) {
  set_has_autoleave();
  autoleave_ = value;
  // @@protoc_insertion_point(field_set:JoinExistingGameMessage.autoLeave)
}

// optional bool spectateOnly = 4 [default = false];
bool JoinExistingGameMessage::has_spectateonly() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void JoinExistingGameMessage::set_has_spectateonly() {
  _has_bits_[0] |= 0x00000008u;
}
void JoinExistingGameMessage::clear_has_spectateonly() {
  _has_bits_[0] &= ~0x00000008u;
}
void JoinExistingGameMessage::clear_spectateonly() {
  spectateonly_ = false;
  clear_has_spectateonly();
}
 bool JoinExistingGameMessage::spectateonly() const {
  // @@protoc_insertion_point(field_get:JoinExistingGameMessage.spectateOnly)
  return spectateonly_;
}
 void JoinExistingGameMessage::set_spectateonly(bool value) {
  set_has_spectateonly();
  spectateonly_ = value;
  // @@protoc_insertion_point(field_set:JoinExistingGameMessage.spectateOnly)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForJoinNewGameMessage(
    JoinNewGameMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinNewGameMessage::kGameInfoFieldNumber;
const int JoinNewGameMessage::kPasswordFieldNumber;
const int JoinNewGameMessage::kAutoLeaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinNewGameMessage::JoinNewGameMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JoinNewGameMessage)
}

void JoinNewGameMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gameinfo_ = const_cast< ::NetGameInfo*>(
      ::NetGameInfo::internal_default_instance());
#else
  gameinfo_ = const_cast< ::NetGameInfo*>(&::NetGameInfo::default_instance());
#endif
}

JoinNewGameMessage::JoinNewGameMessage(const JoinNewGameMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JoinNewGameMessage)
}

void JoinNewGameMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameinfo_ = NULL;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoleave_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinNewGameMessage::~JoinNewGameMessage() {
  // @@protoc_insertion_point(destructor:JoinNewGameMessage)
  SharedDtor();
}

void JoinNewGameMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete gameinfo_;
  }
}

void JoinNewGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JoinNewGameMessage& JoinNewGameMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

JoinNewGameMessage* JoinNewGameMessage::default_instance_ = NULL;

JoinNewGameMessage* JoinNewGameMessage::New(::google::protobuf::Arena* arena) const {
  JoinNewGameMessage* n = new JoinNewGameMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinNewGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinNewGameMessage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::NetGameInfo::Clear();
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    autoleave_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool JoinNewGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForJoinNewGameMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:JoinNewGameMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetGameInfo gameInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_autoLeave;
        break;
      }

      // optional bool autoLeave = 3;
      case 3: {
        if (tag == 24) {
         parse_autoLeave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoleave_)));
          set_has_autoleave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JoinNewGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JoinNewGameMessage)
  return false;
#undef DO_
}

void JoinNewGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JoinNewGameMessage)
  // required .NetGameInfo gameInfo = 1;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->gameinfo_, output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional bool autoLeave = 3;
  if (has_autoleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autoleave(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:JoinNewGameMessage)
}

int JoinNewGameMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:JoinNewGameMessage)
  int total_size = 0;

  // required .NetGameInfo gameInfo = 1;
  if (has_gameinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameinfo_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional bool autoLeave = 3;
    if (has_autoleave()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinNewGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JoinNewGameMessage*>(&from));
}

void JoinNewGameMessage::MergeFrom(const JoinNewGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinNewGameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::NetGameInfo::MergeFrom(from.gameinfo());
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_autoleave()) {
      set_autoleave(from.autoleave());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void JoinNewGameMessage::CopyFrom(const JoinNewGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinNewGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinNewGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gameinfo()) {
    if (!this->gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void JoinNewGameMessage::Swap(JoinNewGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinNewGameMessage::InternalSwap(JoinNewGameMessage* other) {
  std::swap(gameinfo_, other->gameinfo_);
  password_.Swap(&other->password_);
  std::swap(autoleave_, other->autoleave_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string JoinNewGameMessage::GetTypeName() const {
  return "JoinNewGameMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinNewGameMessage

// required .NetGameInfo gameInfo = 1;
bool JoinNewGameMessage::has_gameinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JoinNewGameMessage::set_has_gameinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void JoinNewGameMessage::clear_has_gameinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void JoinNewGameMessage::clear_gameinfo() {
  if (gameinfo_ != NULL) gameinfo_->::NetGameInfo::Clear();
  clear_has_gameinfo();
}
const ::NetGameInfo& JoinNewGameMessage::gameinfo() const {
  // @@protoc_insertion_point(field_get:JoinNewGameMessage.gameInfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gameinfo_ != NULL ? *gameinfo_ : *default_instance().gameinfo_;
#else
  return gameinfo_ != NULL ? *gameinfo_ : *default_instance_->gameinfo_;
#endif
}
::NetGameInfo* JoinNewGameMessage::mutable_gameinfo() {
  set_has_gameinfo();
  if (gameinfo_ == NULL) {
    gameinfo_ = new ::NetGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:JoinNewGameMessage.gameInfo)
  return gameinfo_;
}
::NetGameInfo* JoinNewGameMessage::release_gameinfo() {
  // @@protoc_insertion_point(field_release:JoinNewGameMessage.gameInfo)
  clear_has_gameinfo();
  ::NetGameInfo* temp = gameinfo_;
  gameinfo_ = NULL;
  return temp;
}
void JoinNewGameMessage::set_allocated_gameinfo(::NetGameInfo* gameinfo) {
  delete gameinfo_;
  gameinfo_ = gameinfo;
  if (gameinfo) {
    set_has_gameinfo();
  } else {
    clear_has_gameinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:JoinNewGameMessage.gameInfo)
}

// optional string password = 2;
bool JoinNewGameMessage::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JoinNewGameMessage::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void JoinNewGameMessage::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void JoinNewGameMessage::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& JoinNewGameMessage::password() const {
  // @@protoc_insertion_point(field_get:JoinNewGameMessage.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JoinNewGameMessage::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JoinNewGameMessage.password)
}
 void JoinNewGameMessage::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JoinNewGameMessage.password)
}
 void JoinNewGameMessage::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JoinNewGameMessage.password)
}
 ::std::string* JoinNewGameMessage::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:JoinNewGameMessage.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JoinNewGameMessage::release_password() {
  // @@protoc_insertion_point(field_release:JoinNewGameMessage.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JoinNewGameMessage::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:JoinNewGameMessage.password)
}

// optional bool autoLeave = 3;
bool JoinNewGameMessage::has_autoleave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void JoinNewGameMessage::set_has_autoleave() {
  _has_bits_[0] |= 0x00000004u;
}
void JoinNewGameMessage::clear_has_autoleave() {
  _has_bits_[0] &= ~0x00000004u;
}
void JoinNewGameMessage::clear_autoleave() {
  autoleave_ = false;
  clear_has_autoleave();
}
 bool JoinNewGameMessage::autoleave() const {
  // @@protoc_insertion_point(field_get:JoinNewGameMessage.autoLeave)
  return autoleave_;
}
 void JoinNewGameMessage::set_autoleave(bool value) {
  set_has_autoleave();
  autoleave_ = value;
  // @@protoc_insertion_point(field_set:JoinNewGameMessage.autoLeave)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRejoinExistingGameMessage(
    RejoinExistingGameMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RejoinExistingGameMessage::kGameIdFieldNumber;
const int RejoinExistingGameMessage::kAutoLeaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RejoinExistingGameMessage::RejoinExistingGameMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RejoinExistingGameMessage)
}

void RejoinExistingGameMessage::InitAsDefaultInstance() {
}

RejoinExistingGameMessage::RejoinExistingGameMessage(const RejoinExistingGameMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RejoinExistingGameMessage)
}

void RejoinExistingGameMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  autoleave_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejoinExistingGameMessage::~RejoinExistingGameMessage() {
  // @@protoc_insertion_point(destructor:RejoinExistingGameMessage)
  SharedDtor();
}

void RejoinExistingGameMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RejoinExistingGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RejoinExistingGameMessage& RejoinExistingGameMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

RejoinExistingGameMessage* RejoinExistingGameMessage::default_instance_ = NULL;

RejoinExistingGameMessage* RejoinExistingGameMessage::New(::google::protobuf::Arena* arena) const {
  RejoinExistingGameMessage* n = new RejoinExistingGameMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RejoinExistingGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejoinExistingGameMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RejoinExistingGameMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RejoinExistingGameMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, autoleave_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RejoinExistingGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRejoinExistingGameMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:RejoinExistingGameMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_autoLeave;
        break;
      }

      // optional bool autoLeave = 2;
      case 2: {
        if (tag == 16) {
         parse_autoLeave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoleave_)));
          set_has_autoleave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RejoinExistingGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RejoinExistingGameMessage)
  return false;
#undef DO_
}

void RejoinExistingGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RejoinExistingGameMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional bool autoLeave = 2;
  if (has_autoleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autoleave(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RejoinExistingGameMessage)
}

int RejoinExistingGameMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RejoinExistingGameMessage)
  int total_size = 0;

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  // optional bool autoLeave = 2;
  if (has_autoleave()) {
    total_size += 1 + 1;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejoinExistingGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RejoinExistingGameMessage*>(&from));
}

void RejoinExistingGameMessage::MergeFrom(const RejoinExistingGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RejoinExistingGameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_autoleave()) {
      set_autoleave(from.autoleave());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RejoinExistingGameMessage::CopyFrom(const RejoinExistingGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejoinExistingGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejoinExistingGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RejoinExistingGameMessage::Swap(RejoinExistingGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RejoinExistingGameMessage::InternalSwap(RejoinExistingGameMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(autoleave_, other->autoleave_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RejoinExistingGameMessage::GetTypeName() const {
  return "RejoinExistingGameMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RejoinExistingGameMessage

// required uint32 gameId = 1;
bool RejoinExistingGameMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RejoinExistingGameMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void RejoinExistingGameMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RejoinExistingGameMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 RejoinExistingGameMessage::gameid() const {
  // @@protoc_insertion_point(field_get:RejoinExistingGameMessage.gameId)
  return gameid_;
}
 void RejoinExistingGameMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:RejoinExistingGameMessage.gameId)
}

// optional bool autoLeave = 2;
bool RejoinExistingGameMessage::has_autoleave() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RejoinExistingGameMessage::set_has_autoleave() {
  _has_bits_[0] |= 0x00000002u;
}
void RejoinExistingGameMessage::clear_has_autoleave() {
  _has_bits_[0] &= ~0x00000002u;
}
void RejoinExistingGameMessage::clear_autoleave() {
  autoleave_ = false;
  clear_has_autoleave();
}
 bool RejoinExistingGameMessage::autoleave() const {
  // @@protoc_insertion_point(field_get:RejoinExistingGameMessage.autoLeave)
  return autoleave_;
}
 void RejoinExistingGameMessage::set_autoleave(bool value) {
  set_has_autoleave();
  autoleave_ = value;
  // @@protoc_insertion_point(field_set:RejoinExistingGameMessage.autoLeave)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForJoinGameAckMessage(
    JoinGameAckMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGameAckMessage::kGameIdFieldNumber;
const int JoinGameAckMessage::kAreYouGameAdminFieldNumber;
const int JoinGameAckMessage::kGameInfoFieldNumber;
const int JoinGameAckMessage::kSpectateOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGameAckMessage::JoinGameAckMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JoinGameAckMessage)
}

void JoinGameAckMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gameinfo_ = const_cast< ::NetGameInfo*>(
      ::NetGameInfo::internal_default_instance());
#else
  gameinfo_ = const_cast< ::NetGameInfo*>(&::NetGameInfo::default_instance());
#endif
}

JoinGameAckMessage::JoinGameAckMessage(const JoinGameAckMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JoinGameAckMessage)
}

void JoinGameAckMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  areyougameadmin_ = false;
  gameinfo_ = NULL;
  spectateonly_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGameAckMessage::~JoinGameAckMessage() {
  // @@protoc_insertion_point(destructor:JoinGameAckMessage)
  SharedDtor();
}

void JoinGameAckMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete gameinfo_;
  }
}

void JoinGameAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JoinGameAckMessage& JoinGameAckMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

JoinGameAckMessage* JoinGameAckMessage::default_instance_ = NULL;

JoinGameAckMessage* JoinGameAckMessage::New(::google::protobuf::Arena* arena) const {
  JoinGameAckMessage* n = new JoinGameAckMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGameAckMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(JoinGameAckMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JoinGameAckMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(gameid_, spectateonly_);
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::NetGameInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool JoinGameAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForJoinGameAckMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:JoinGameAckMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_areYouGameAdmin;
        break;
      }

      // required bool areYouGameAdmin = 2;
      case 2: {
        if (tag == 16) {
         parse_areYouGameAdmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &areyougameadmin_)));
          set_has_areyougameadmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gameInfo;
        break;
      }

      // required .NetGameInfo gameInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_gameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_spectateOnly;
        break;
      }

      // optional bool spectateOnly = 4;
      case 4: {
        if (tag == 32) {
         parse_spectateOnly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spectateonly_)));
          set_has_spectateonly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JoinGameAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JoinGameAckMessage)
  return false;
#undef DO_
}

void JoinGameAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JoinGameAckMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required bool areYouGameAdmin = 2;
  if (has_areyougameadmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->areyougameadmin(), output);
  }

  // required .NetGameInfo gameInfo = 3;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->gameinfo_, output);
  }

  // optional bool spectateOnly = 4;
  if (has_spectateonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->spectateonly(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:JoinGameAckMessage)
}

int JoinGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:JoinGameAckMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_areyougameadmin()) {
    // required bool areYouGameAdmin = 2;
    total_size += 1 + 1;
  }

  if (has_gameinfo()) {
    // required .NetGameInfo gameInfo = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameinfo_);
  }

  return total_size;
}
int JoinGameAckMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGameAckMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required bool areYouGameAdmin = 2;
    total_size += 1 + 1;

    // required .NetGameInfo gameInfo = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool spectateOnly = 4;
  if (has_spectateonly()) {
    total_size += 1 + 1;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGameAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JoinGameAckMessage*>(&from));
}

void JoinGameAckMessage::MergeFrom(const JoinGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinGameAckMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_areyougameadmin()) {
      set_areyougameadmin(from.areyougameadmin());
    }
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::NetGameInfo::MergeFrom(from.gameinfo());
    }
    if (from.has_spectateonly()) {
      set_spectateonly(from.spectateonly());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void JoinGameAckMessage::CopyFrom(const JoinGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_gameinfo()) {
    if (!this->gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void JoinGameAckMessage::Swap(JoinGameAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinGameAckMessage::InternalSwap(JoinGameAckMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(areyougameadmin_, other->areyougameadmin_);
  std::swap(gameinfo_, other->gameinfo_);
  std::swap(spectateonly_, other->spectateonly_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string JoinGameAckMessage::GetTypeName() const {
  return "JoinGameAckMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinGameAckMessage

// required uint32 gameId = 1;
bool JoinGameAckMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JoinGameAckMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void JoinGameAckMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void JoinGameAckMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 JoinGameAckMessage::gameid() const {
  // @@protoc_insertion_point(field_get:JoinGameAckMessage.gameId)
  return gameid_;
}
 void JoinGameAckMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:JoinGameAckMessage.gameId)
}

// required bool areYouGameAdmin = 2;
bool JoinGameAckMessage::has_areyougameadmin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JoinGameAckMessage::set_has_areyougameadmin() {
  _has_bits_[0] |= 0x00000002u;
}
void JoinGameAckMessage::clear_has_areyougameadmin() {
  _has_bits_[0] &= ~0x00000002u;
}
void JoinGameAckMessage::clear_areyougameadmin() {
  areyougameadmin_ = false;
  clear_has_areyougameadmin();
}
 bool JoinGameAckMessage::areyougameadmin() const {
  // @@protoc_insertion_point(field_get:JoinGameAckMessage.areYouGameAdmin)
  return areyougameadmin_;
}
 void JoinGameAckMessage::set_areyougameadmin(bool value) {
  set_has_areyougameadmin();
  areyougameadmin_ = value;
  // @@protoc_insertion_point(field_set:JoinGameAckMessage.areYouGameAdmin)
}

// required .NetGameInfo gameInfo = 3;
bool JoinGameAckMessage::has_gameinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void JoinGameAckMessage::set_has_gameinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void JoinGameAckMessage::clear_has_gameinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void JoinGameAckMessage::clear_gameinfo() {
  if (gameinfo_ != NULL) gameinfo_->::NetGameInfo::Clear();
  clear_has_gameinfo();
}
const ::NetGameInfo& JoinGameAckMessage::gameinfo() const {
  // @@protoc_insertion_point(field_get:JoinGameAckMessage.gameInfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gameinfo_ != NULL ? *gameinfo_ : *default_instance().gameinfo_;
#else
  return gameinfo_ != NULL ? *gameinfo_ : *default_instance_->gameinfo_;
#endif
}
::NetGameInfo* JoinGameAckMessage::mutable_gameinfo() {
  set_has_gameinfo();
  if (gameinfo_ == NULL) {
    gameinfo_ = new ::NetGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:JoinGameAckMessage.gameInfo)
  return gameinfo_;
}
::NetGameInfo* JoinGameAckMessage::release_gameinfo() {
  // @@protoc_insertion_point(field_release:JoinGameAckMessage.gameInfo)
  clear_has_gameinfo();
  ::NetGameInfo* temp = gameinfo_;
  gameinfo_ = NULL;
  return temp;
}
void JoinGameAckMessage::set_allocated_gameinfo(::NetGameInfo* gameinfo) {
  delete gameinfo_;
  gameinfo_ = gameinfo;
  if (gameinfo) {
    set_has_gameinfo();
  } else {
    clear_has_gameinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:JoinGameAckMessage.gameInfo)
}

// optional bool spectateOnly = 4;
bool JoinGameAckMessage::has_spectateonly() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void JoinGameAckMessage::set_has_spectateonly() {
  _has_bits_[0] |= 0x00000008u;
}
void JoinGameAckMessage::clear_has_spectateonly() {
  _has_bits_[0] &= ~0x00000008u;
}
void JoinGameAckMessage::clear_spectateonly() {
  spectateonly_ = false;
  clear_has_spectateonly();
}
 bool JoinGameAckMessage::spectateonly() const {
  // @@protoc_insertion_point(field_get:JoinGameAckMessage.spectateOnly)
  return spectateonly_;
}
 void JoinGameAckMessage::set_spectateonly(bool value) {
  set_has_spectateonly();
  spectateonly_ = value;
  // @@protoc_insertion_point(field_set:JoinGameAckMessage.spectateOnly)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForJoinGameFailedMessage(
    JoinGameFailedMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool JoinGameFailedMessage_JoinGameFailureReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidGame;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameIsFull;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameIsRunning;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidPassword;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::notAllowedAsGuest;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::notInvited;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameNameInUse;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::badGameName;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidSettings;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::ipAddressBlocked;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::rejoinFailed;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::noSpectatorsAllowed;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::JoinGameFailureReason_MIN;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::JoinGameFailureReason_MAX;
const int JoinGameFailedMessage::JoinGameFailureReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGameFailedMessage::kGameIdFieldNumber;
const int JoinGameFailedMessage::kJoinGameFailureReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGameFailedMessage::JoinGameFailedMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JoinGameFailedMessage)
}

void JoinGameFailedMessage::InitAsDefaultInstance() {
}

JoinGameFailedMessage::JoinGameFailedMessage(const JoinGameFailedMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JoinGameFailedMessage)
}

void JoinGameFailedMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  joingamefailurereason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGameFailedMessage::~JoinGameFailedMessage() {
  // @@protoc_insertion_point(destructor:JoinGameFailedMessage)
  SharedDtor();
}

void JoinGameFailedMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JoinGameFailedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JoinGameFailedMessage& JoinGameFailedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

JoinGameFailedMessage* JoinGameFailedMessage::default_instance_ = NULL;

JoinGameFailedMessage* JoinGameFailedMessage::New(::google::protobuf::Arena* arena) const {
  JoinGameFailedMessage* n = new JoinGameFailedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinGameFailedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGameFailedMessage)
  if (_has_bits_[0 / 32] & 3u) {
    gameid_ = 0u;
    joingamefailurereason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool JoinGameFailedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForJoinGameFailedMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:JoinGameFailedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_joinGameFailureReason;
        break;
      }

      // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
      case 2: {
        if (tag == 16) {
         parse_joinGameFailureReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JoinGameFailedMessage_JoinGameFailureReason_IsValid(value)) {
            set_joingamefailurereason(static_cast< ::JoinGameFailedMessage_JoinGameFailureReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JoinGameFailedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JoinGameFailedMessage)
  return false;
#undef DO_
}

void JoinGameFailedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JoinGameFailedMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
  if (has_joingamefailurereason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->joingamefailurereason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:JoinGameFailedMessage)
}

int JoinGameFailedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:JoinGameFailedMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_joingamefailurereason()) {
    // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->joingamefailurereason());
  }

  return total_size;
}
int JoinGameFailedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGameFailedMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->joingamefailurereason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGameFailedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JoinGameFailedMessage*>(&from));
}

void JoinGameFailedMessage::MergeFrom(const JoinGameFailedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinGameFailedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_joingamefailurereason()) {
      set_joingamefailurereason(from.joingamefailurereason());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void JoinGameFailedMessage::CopyFrom(const JoinGameFailedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGameFailedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameFailedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void JoinGameFailedMessage::Swap(JoinGameFailedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinGameFailedMessage::InternalSwap(JoinGameFailedMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(joingamefailurereason_, other->joingamefailurereason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string JoinGameFailedMessage::GetTypeName() const {
  return "JoinGameFailedMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinGameFailedMessage

// required uint32 gameId = 1;
bool JoinGameFailedMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JoinGameFailedMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void JoinGameFailedMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void JoinGameFailedMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 JoinGameFailedMessage::gameid() const {
  // @@protoc_insertion_point(field_get:JoinGameFailedMessage.gameId)
  return gameid_;
}
 void JoinGameFailedMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:JoinGameFailedMessage.gameId)
}

// required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
bool JoinGameFailedMessage::has_joingamefailurereason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JoinGameFailedMessage::set_has_joingamefailurereason() {
  _has_bits_[0] |= 0x00000002u;
}
void JoinGameFailedMessage::clear_has_joingamefailurereason() {
  _has_bits_[0] &= ~0x00000002u;
}
void JoinGameFailedMessage::clear_joingamefailurereason() {
  joingamefailurereason_ = 1;
  clear_has_joingamefailurereason();
}
 ::JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::joingamefailurereason() const {
  // @@protoc_insertion_point(field_get:JoinGameFailedMessage.joinGameFailureReason)
  return static_cast< ::JoinGameFailedMessage_JoinGameFailureReason >(joingamefailurereason_);
}
 void JoinGameFailedMessage::set_joingamefailurereason(::JoinGameFailedMessage_JoinGameFailureReason value) {
  assert(::JoinGameFailedMessage_JoinGameFailureReason_IsValid(value));
  set_has_joingamefailurereason();
  joingamefailurereason_ = value;
  // @@protoc_insertion_point(field_set:JoinGameFailedMessage.joinGameFailureReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGamePlayerJoinedMessage(
    GamePlayerJoinedMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GamePlayerJoinedMessage::kGameIdFieldNumber;
const int GamePlayerJoinedMessage::kPlayerIdFieldNumber;
const int GamePlayerJoinedMessage::kIsGameAdminFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GamePlayerJoinedMessage::GamePlayerJoinedMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePlayerJoinedMessage)
}

void GamePlayerJoinedMessage::InitAsDefaultInstance() {
}

GamePlayerJoinedMessage::GamePlayerJoinedMessage(const GamePlayerJoinedMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GamePlayerJoinedMessage)
}

void GamePlayerJoinedMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  isgameadmin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerJoinedMessage::~GamePlayerJoinedMessage() {
  // @@protoc_insertion_point(destructor:GamePlayerJoinedMessage)
  SharedDtor();
}

void GamePlayerJoinedMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GamePlayerJoinedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GamePlayerJoinedMessage& GamePlayerJoinedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GamePlayerJoinedMessage* GamePlayerJoinedMessage::default_instance_ = NULL;

GamePlayerJoinedMessage* GamePlayerJoinedMessage::New(::google::protobuf::Arena* arena) const {
  GamePlayerJoinedMessage* n = new GamePlayerJoinedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GamePlayerJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerJoinedMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GamePlayerJoinedMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GamePlayerJoinedMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, isgameadmin_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GamePlayerJoinedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGamePlayerJoinedMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GamePlayerJoinedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isGameAdmin;
        break;
      }

      // required bool isGameAdmin = 3;
      case 3: {
        if (tag == 24) {
         parse_isGameAdmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgameadmin_)));
          set_has_isgameadmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePlayerJoinedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePlayerJoinedMessage)
  return false;
#undef DO_
}

void GamePlayerJoinedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePlayerJoinedMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required bool isGameAdmin = 3;
  if (has_isgameadmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isgameadmin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GamePlayerJoinedMessage)
}

int GamePlayerJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GamePlayerJoinedMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_isgameadmin()) {
    // required bool isGameAdmin = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
int GamePlayerJoinedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerJoinedMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required bool isGameAdmin = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerJoinedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GamePlayerJoinedMessage*>(&from));
}

void GamePlayerJoinedMessage::MergeFrom(const GamePlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerJoinedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isgameadmin()) {
      set_isgameadmin(from.isgameadmin());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GamePlayerJoinedMessage::CopyFrom(const GamePlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerJoinedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GamePlayerJoinedMessage::Swap(GamePlayerJoinedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GamePlayerJoinedMessage::InternalSwap(GamePlayerJoinedMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(isgameadmin_, other->isgameadmin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GamePlayerJoinedMessage::GetTypeName() const {
  return "GamePlayerJoinedMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GamePlayerJoinedMessage

// required uint32 gameId = 1;
bool GamePlayerJoinedMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GamePlayerJoinedMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GamePlayerJoinedMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GamePlayerJoinedMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GamePlayerJoinedMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GamePlayerJoinedMessage.gameId)
  return gameid_;
}
 void GamePlayerJoinedMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GamePlayerJoinedMessage.gameId)
}

// required uint32 playerId = 2;
bool GamePlayerJoinedMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GamePlayerJoinedMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GamePlayerJoinedMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GamePlayerJoinedMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 GamePlayerJoinedMessage::playerid() const {
  // @@protoc_insertion_point(field_get:GamePlayerJoinedMessage.playerId)
  return playerid_;
}
 void GamePlayerJoinedMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GamePlayerJoinedMessage.playerId)
}

// required bool isGameAdmin = 3;
bool GamePlayerJoinedMessage::has_isgameadmin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GamePlayerJoinedMessage::set_has_isgameadmin() {
  _has_bits_[0] |= 0x00000004u;
}
void GamePlayerJoinedMessage::clear_has_isgameadmin() {
  _has_bits_[0] &= ~0x00000004u;
}
void GamePlayerJoinedMessage::clear_isgameadmin() {
  isgameadmin_ = false;
  clear_has_isgameadmin();
}
 bool GamePlayerJoinedMessage::isgameadmin() const {
  // @@protoc_insertion_point(field_get:GamePlayerJoinedMessage.isGameAdmin)
  return isgameadmin_;
}
 void GamePlayerJoinedMessage::set_isgameadmin(bool value) {
  set_has_isgameadmin();
  isgameadmin_ = value;
  // @@protoc_insertion_point(field_set:GamePlayerJoinedMessage.isGameAdmin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGamePlayerLeftMessage(
    GamePlayerLeftMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftOnRequest;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftKicked;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftError;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::GamePlayerLeftReason_MIN;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::GamePlayerLeftReason_MAX;
const int GamePlayerLeftMessage::GamePlayerLeftReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GamePlayerLeftMessage::kGameIdFieldNumber;
const int GamePlayerLeftMessage::kPlayerIdFieldNumber;
const int GamePlayerLeftMessage::kGamePlayerLeftReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GamePlayerLeftMessage::GamePlayerLeftMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePlayerLeftMessage)
}

void GamePlayerLeftMessage::InitAsDefaultInstance() {
}

GamePlayerLeftMessage::GamePlayerLeftMessage(const GamePlayerLeftMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GamePlayerLeftMessage)
}

void GamePlayerLeftMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  gameplayerleftreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerLeftMessage::~GamePlayerLeftMessage() {
  // @@protoc_insertion_point(destructor:GamePlayerLeftMessage)
  SharedDtor();
}

void GamePlayerLeftMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GamePlayerLeftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GamePlayerLeftMessage& GamePlayerLeftMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GamePlayerLeftMessage* GamePlayerLeftMessage::default_instance_ = NULL;

GamePlayerLeftMessage* GamePlayerLeftMessage::New(::google::protobuf::Arena* arena) const {
  GamePlayerLeftMessage* n = new GamePlayerLeftMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GamePlayerLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerLeftMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GamePlayerLeftMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GamePlayerLeftMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, gameplayerleftreason_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GamePlayerLeftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGamePlayerLeftMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GamePlayerLeftMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gamePlayerLeftReason;
        break;
      }

      // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
      case 3: {
        if (tag == 24) {
         parse_gamePlayerLeftReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(value)) {
            set_gameplayerleftreason(static_cast< ::GamePlayerLeftMessage_GamePlayerLeftReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePlayerLeftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePlayerLeftMessage)
  return false;
#undef DO_
}

void GamePlayerLeftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePlayerLeftMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
  if (has_gameplayerleftreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gameplayerleftreason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GamePlayerLeftMessage)
}

int GamePlayerLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GamePlayerLeftMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_gameplayerleftreason()) {
    // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gameplayerleftreason());
  }

  return total_size;
}
int GamePlayerLeftMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerLeftMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gameplayerleftreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerLeftMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GamePlayerLeftMessage*>(&from));
}

void GamePlayerLeftMessage::MergeFrom(const GamePlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerLeftMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gameplayerleftreason()) {
      set_gameplayerleftreason(from.gameplayerleftreason());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GamePlayerLeftMessage::CopyFrom(const GamePlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerLeftMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GamePlayerLeftMessage::Swap(GamePlayerLeftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GamePlayerLeftMessage::InternalSwap(GamePlayerLeftMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(gameplayerleftreason_, other->gameplayerleftreason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GamePlayerLeftMessage::GetTypeName() const {
  return "GamePlayerLeftMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GamePlayerLeftMessage

// required uint32 gameId = 1;
bool GamePlayerLeftMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GamePlayerLeftMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GamePlayerLeftMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GamePlayerLeftMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GamePlayerLeftMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GamePlayerLeftMessage.gameId)
  return gameid_;
}
 void GamePlayerLeftMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GamePlayerLeftMessage.gameId)
}

// required uint32 playerId = 2;
bool GamePlayerLeftMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GamePlayerLeftMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GamePlayerLeftMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GamePlayerLeftMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 GamePlayerLeftMessage::playerid() const {
  // @@protoc_insertion_point(field_get:GamePlayerLeftMessage.playerId)
  return playerid_;
}
 void GamePlayerLeftMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GamePlayerLeftMessage.playerId)
}

// required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
bool GamePlayerLeftMessage::has_gameplayerleftreason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GamePlayerLeftMessage::set_has_gameplayerleftreason() {
  _has_bits_[0] |= 0x00000004u;
}
void GamePlayerLeftMessage::clear_has_gameplayerleftreason() {
  _has_bits_[0] &= ~0x00000004u;
}
void GamePlayerLeftMessage::clear_gameplayerleftreason() {
  gameplayerleftreason_ = 0;
  clear_has_gameplayerleftreason();
}
 ::GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::gameplayerleftreason() const {
  // @@protoc_insertion_point(field_get:GamePlayerLeftMessage.gamePlayerLeftReason)
  return static_cast< ::GamePlayerLeftMessage_GamePlayerLeftReason >(gameplayerleftreason_);
}
 void GamePlayerLeftMessage::set_gameplayerleftreason(::GamePlayerLeftMessage_GamePlayerLeftReason value) {
  assert(::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(value));
  set_has_gameplayerleftreason();
  gameplayerleftreason_ = value;
  // @@protoc_insertion_point(field_set:GamePlayerLeftMessage.gamePlayerLeftReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameSpectatorJoinedMessage(
    GameSpectatorJoinedMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSpectatorJoinedMessage::kGameIdFieldNumber;
const int GameSpectatorJoinedMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSpectatorJoinedMessage::GameSpectatorJoinedMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpectatorJoinedMessage)
}

void GameSpectatorJoinedMessage::InitAsDefaultInstance() {
}

GameSpectatorJoinedMessage::GameSpectatorJoinedMessage(const GameSpectatorJoinedMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameSpectatorJoinedMessage)
}

void GameSpectatorJoinedMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSpectatorJoinedMessage::~GameSpectatorJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameSpectatorJoinedMessage)
  SharedDtor();
}

void GameSpectatorJoinedMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameSpectatorJoinedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameSpectatorJoinedMessage& GameSpectatorJoinedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameSpectatorJoinedMessage* GameSpectatorJoinedMessage::default_instance_ = NULL;

GameSpectatorJoinedMessage* GameSpectatorJoinedMessage::New(::google::protobuf::Arena* arena) const {
  GameSpectatorJoinedMessage* n = new GameSpectatorJoinedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSpectatorJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpectatorJoinedMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameSpectatorJoinedMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameSpectatorJoinedMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameSpectatorJoinedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameSpectatorJoinedMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameSpectatorJoinedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpectatorJoinedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpectatorJoinedMessage)
  return false;
#undef DO_
}

void GameSpectatorJoinedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpectatorJoinedMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameSpectatorJoinedMessage)
}

int GameSpectatorJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameSpectatorJoinedMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
int GameSpectatorJoinedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpectatorJoinedMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSpectatorJoinedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameSpectatorJoinedMessage*>(&from));
}

void GameSpectatorJoinedMessage::MergeFrom(const GameSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpectatorJoinedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameSpectatorJoinedMessage::CopyFrom(const GameSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpectatorJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSpectatorJoinedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameSpectatorJoinedMessage::Swap(GameSpectatorJoinedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSpectatorJoinedMessage::InternalSwap(GameSpectatorJoinedMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameSpectatorJoinedMessage::GetTypeName() const {
  return "GameSpectatorJoinedMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameSpectatorJoinedMessage

// required uint32 gameId = 1;
bool GameSpectatorJoinedMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameSpectatorJoinedMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameSpectatorJoinedMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameSpectatorJoinedMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameSpectatorJoinedMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameSpectatorJoinedMessage.gameId)
  return gameid_;
}
 void GameSpectatorJoinedMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameSpectatorJoinedMessage.gameId)
}

// required uint32 playerId = 2;
bool GameSpectatorJoinedMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameSpectatorJoinedMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameSpectatorJoinedMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameSpectatorJoinedMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 GameSpectatorJoinedMessage::playerid() const {
  // @@protoc_insertion_point(field_get:GameSpectatorJoinedMessage.playerId)
  return playerid_;
}
 void GameSpectatorJoinedMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GameSpectatorJoinedMessage.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameSpectatorLeftMessage(
    GameSpectatorLeftMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSpectatorLeftMessage::kGameIdFieldNumber;
const int GameSpectatorLeftMessage::kPlayerIdFieldNumber;
const int GameSpectatorLeftMessage::kGameSpectatorLeftReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSpectatorLeftMessage::GameSpectatorLeftMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpectatorLeftMessage)
}

void GameSpectatorLeftMessage::InitAsDefaultInstance() {
}

GameSpectatorLeftMessage::GameSpectatorLeftMessage(const GameSpectatorLeftMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameSpectatorLeftMessage)
}

void GameSpectatorLeftMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  gamespectatorleftreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSpectatorLeftMessage::~GameSpectatorLeftMessage() {
  // @@protoc_insertion_point(destructor:GameSpectatorLeftMessage)
  SharedDtor();
}

void GameSpectatorLeftMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameSpectatorLeftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameSpectatorLeftMessage& GameSpectatorLeftMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameSpectatorLeftMessage* GameSpectatorLeftMessage::default_instance_ = NULL;

GameSpectatorLeftMessage* GameSpectatorLeftMessage::New(::google::protobuf::Arena* arena) const {
  GameSpectatorLeftMessage* n = new GameSpectatorLeftMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSpectatorLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpectatorLeftMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameSpectatorLeftMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameSpectatorLeftMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, gamespectatorleftreason_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameSpectatorLeftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameSpectatorLeftMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameSpectatorLeftMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameSpectatorLeftReason;
        break;
      }

      // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 3;
      case 3: {
        if (tag == 24) {
         parse_gameSpectatorLeftReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(value)) {
            set_gamespectatorleftreason(static_cast< ::GamePlayerLeftMessage_GamePlayerLeftReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpectatorLeftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpectatorLeftMessage)
  return false;
#undef DO_
}

void GameSpectatorLeftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpectatorLeftMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 3;
  if (has_gamespectatorleftreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamespectatorleftreason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameSpectatorLeftMessage)
}

int GameSpectatorLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameSpectatorLeftMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_gamespectatorleftreason()) {
    // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamespectatorleftreason());
  }

  return total_size;
}
int GameSpectatorLeftMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpectatorLeftMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamespectatorleftreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSpectatorLeftMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameSpectatorLeftMessage*>(&from));
}

void GameSpectatorLeftMessage::MergeFrom(const GameSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpectatorLeftMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gamespectatorleftreason()) {
      set_gamespectatorleftreason(from.gamespectatorleftreason());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameSpectatorLeftMessage::CopyFrom(const GameSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpectatorLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSpectatorLeftMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GameSpectatorLeftMessage::Swap(GameSpectatorLeftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSpectatorLeftMessage::InternalSwap(GameSpectatorLeftMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(gamespectatorleftreason_, other->gamespectatorleftreason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameSpectatorLeftMessage::GetTypeName() const {
  return "GameSpectatorLeftMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameSpectatorLeftMessage

// required uint32 gameId = 1;
bool GameSpectatorLeftMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameSpectatorLeftMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameSpectatorLeftMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameSpectatorLeftMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameSpectatorLeftMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameSpectatorLeftMessage.gameId)
  return gameid_;
}
 void GameSpectatorLeftMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameSpectatorLeftMessage.gameId)
}

// required uint32 playerId = 2;
bool GameSpectatorLeftMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameSpectatorLeftMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameSpectatorLeftMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameSpectatorLeftMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 GameSpectatorLeftMessage::playerid() const {
  // @@protoc_insertion_point(field_get:GameSpectatorLeftMessage.playerId)
  return playerid_;
}
 void GameSpectatorLeftMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GameSpectatorLeftMessage.playerId)
}

// required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 3;
bool GameSpectatorLeftMessage::has_gamespectatorleftreason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameSpectatorLeftMessage::set_has_gamespectatorleftreason() {
  _has_bits_[0] |= 0x00000004u;
}
void GameSpectatorLeftMessage::clear_has_gamespectatorleftreason() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameSpectatorLeftMessage::clear_gamespectatorleftreason() {
  gamespectatorleftreason_ = 0;
  clear_has_gamespectatorleftreason();
}
 ::GamePlayerLeftMessage_GamePlayerLeftReason GameSpectatorLeftMessage::gamespectatorleftreason() const {
  // @@protoc_insertion_point(field_get:GameSpectatorLeftMessage.gameSpectatorLeftReason)
  return static_cast< ::GamePlayerLeftMessage_GamePlayerLeftReason >(gamespectatorleftreason_);
}
 void GameSpectatorLeftMessage::set_gamespectatorleftreason(::GamePlayerLeftMessage_GamePlayerLeftReason value) {
  assert(::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(value));
  set_has_gamespectatorleftreason();
  gamespectatorleftreason_ = value;
  // @@protoc_insertion_point(field_set:GameSpectatorLeftMessage.gameSpectatorLeftReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameAdminChangedMessage(
    GameAdminChangedMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameAdminChangedMessage::kGameIdFieldNumber;
const int GameAdminChangedMessage::kNewAdminPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameAdminChangedMessage::GameAdminChangedMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameAdminChangedMessage)
}

void GameAdminChangedMessage::InitAsDefaultInstance() {
}

GameAdminChangedMessage::GameAdminChangedMessage(const GameAdminChangedMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameAdminChangedMessage)
}

void GameAdminChangedMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  newadminplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAdminChangedMessage::~GameAdminChangedMessage() {
  // @@protoc_insertion_point(destructor:GameAdminChangedMessage)
  SharedDtor();
}

void GameAdminChangedMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameAdminChangedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameAdminChangedMessage& GameAdminChangedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameAdminChangedMessage* GameAdminChangedMessage::default_instance_ = NULL;

GameAdminChangedMessage* GameAdminChangedMessage::New(::google::protobuf::Arena* arena) const {
  GameAdminChangedMessage* n = new GameAdminChangedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameAdminChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameAdminChangedMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameAdminChangedMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameAdminChangedMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, newadminplayerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameAdminChangedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameAdminChangedMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameAdminChangedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newAdminPlayerId;
        break;
      }

      // required uint32 newAdminPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_newAdminPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newadminplayerid_)));
          set_has_newadminplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameAdminChangedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameAdminChangedMessage)
  return false;
#undef DO_
}

void GameAdminChangedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameAdminChangedMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 newAdminPlayerId = 2;
  if (has_newadminplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newadminplayerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameAdminChangedMessage)
}

int GameAdminChangedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameAdminChangedMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_newadminplayerid()) {
    // required uint32 newAdminPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newadminplayerid());
  }

  return total_size;
}
int GameAdminChangedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameAdminChangedMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 newAdminPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newadminplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAdminChangedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameAdminChangedMessage*>(&from));
}

void GameAdminChangedMessage::MergeFrom(const GameAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameAdminChangedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_newadminplayerid()) {
      set_newadminplayerid(from.newadminplayerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameAdminChangedMessage::CopyFrom(const GameAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameAdminChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAdminChangedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameAdminChangedMessage::Swap(GameAdminChangedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameAdminChangedMessage::InternalSwap(GameAdminChangedMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(newadminplayerid_, other->newadminplayerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameAdminChangedMessage::GetTypeName() const {
  return "GameAdminChangedMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameAdminChangedMessage

// required uint32 gameId = 1;
bool GameAdminChangedMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameAdminChangedMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameAdminChangedMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameAdminChangedMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameAdminChangedMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameAdminChangedMessage.gameId)
  return gameid_;
}
 void GameAdminChangedMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameAdminChangedMessage.gameId)
}

// required uint32 newAdminPlayerId = 2;
bool GameAdminChangedMessage::has_newadminplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameAdminChangedMessage::set_has_newadminplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameAdminChangedMessage::clear_has_newadminplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameAdminChangedMessage::clear_newadminplayerid() {
  newadminplayerid_ = 0u;
  clear_has_newadminplayerid();
}
 ::google::protobuf::uint32 GameAdminChangedMessage::newadminplayerid() const {
  // @@protoc_insertion_point(field_get:GameAdminChangedMessage.newAdminPlayerId)
  return newadminplayerid_;
}
 void GameAdminChangedMessage::set_newadminplayerid(::google::protobuf::uint32 value) {
  set_has_newadminplayerid();
  newadminplayerid_ = value;
  // @@protoc_insertion_point(field_set:GameAdminChangedMessage.newAdminPlayerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRemovedFromGameMessage(
    RemovedFromGameMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool RemovedFromGameMessage_RemovedFromGameReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::removedOnRequest;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::kickedFromGame;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameIsFull;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameIsRunning;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameTimeout;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::removedStartFailed;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameClosed;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::RemovedFromGameReason_MIN;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::RemovedFromGameReason_MAX;
const int RemovedFromGameMessage::RemovedFromGameReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemovedFromGameMessage::kGameIdFieldNumber;
const int RemovedFromGameMessage::kRemovedFromGameReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemovedFromGameMessage::RemovedFromGameMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemovedFromGameMessage)
}

void RemovedFromGameMessage::InitAsDefaultInstance() {
}

RemovedFromGameMessage::RemovedFromGameMessage(const RemovedFromGameMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemovedFromGameMessage)
}

void RemovedFromGameMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  removedfromgamereason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemovedFromGameMessage::~RemovedFromGameMessage() {
  // @@protoc_insertion_point(destructor:RemovedFromGameMessage)
  SharedDtor();
}

void RemovedFromGameMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RemovedFromGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemovedFromGameMessage& RemovedFromGameMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

RemovedFromGameMessage* RemovedFromGameMessage::default_instance_ = NULL;

RemovedFromGameMessage* RemovedFromGameMessage::New(::google::protobuf::Arena* arena) const {
  RemovedFromGameMessage* n = new RemovedFromGameMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemovedFromGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RemovedFromGameMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RemovedFromGameMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RemovedFromGameMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, removedfromgamereason_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RemovedFromGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRemovedFromGameMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:RemovedFromGameMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_removedFromGameReason;
        break;
      }

      // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
      case 2: {
        if (tag == 16) {
         parse_removedFromGameReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RemovedFromGameMessage_RemovedFromGameReason_IsValid(value)) {
            set_removedfromgamereason(static_cast< ::RemovedFromGameMessage_RemovedFromGameReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemovedFromGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemovedFromGameMessage)
  return false;
#undef DO_
}

void RemovedFromGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemovedFromGameMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
  if (has_removedfromgamereason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->removedfromgamereason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RemovedFromGameMessage)
}

int RemovedFromGameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RemovedFromGameMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_removedfromgamereason()) {
    // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->removedfromgamereason());
  }

  return total_size;
}
int RemovedFromGameMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RemovedFromGameMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->removedfromgamereason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovedFromGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemovedFromGameMessage*>(&from));
}

void RemovedFromGameMessage::MergeFrom(const RemovedFromGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemovedFromGameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_removedfromgamereason()) {
      set_removedfromgamereason(from.removedfromgamereason());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RemovedFromGameMessage::CopyFrom(const RemovedFromGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemovedFromGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovedFromGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RemovedFromGameMessage::Swap(RemovedFromGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemovedFromGameMessage::InternalSwap(RemovedFromGameMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(removedfromgamereason_, other->removedfromgamereason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RemovedFromGameMessage::GetTypeName() const {
  return "RemovedFromGameMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemovedFromGameMessage

// required uint32 gameId = 1;
bool RemovedFromGameMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemovedFromGameMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void RemovedFromGameMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemovedFromGameMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 RemovedFromGameMessage::gameid() const {
  // @@protoc_insertion_point(field_get:RemovedFromGameMessage.gameId)
  return gameid_;
}
 void RemovedFromGameMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:RemovedFromGameMessage.gameId)
}

// required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
bool RemovedFromGameMessage::has_removedfromgamereason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemovedFromGameMessage::set_has_removedfromgamereason() {
  _has_bits_[0] |= 0x00000002u;
}
void RemovedFromGameMessage::clear_has_removedfromgamereason() {
  _has_bits_[0] &= ~0x00000002u;
}
void RemovedFromGameMessage::clear_removedfromgamereason() {
  removedfromgamereason_ = 0;
  clear_has_removedfromgamereason();
}
 ::RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::removedfromgamereason() const {
  // @@protoc_insertion_point(field_get:RemovedFromGameMessage.removedFromGameReason)
  return static_cast< ::RemovedFromGameMessage_RemovedFromGameReason >(removedfromgamereason_);
}
 void RemovedFromGameMessage::set_removedfromgamereason(::RemovedFromGameMessage_RemovedFromGameReason value) {
  assert(::RemovedFromGameMessage_RemovedFromGameReason_IsValid(value));
  set_has_removedfromgamereason();
  removedfromgamereason_ = value;
  // @@protoc_insertion_point(field_set:RemovedFromGameMessage.removedFromGameReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForKickPlayerRequestMessage(
    KickPlayerRequestMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickPlayerRequestMessage::kGameIdFieldNumber;
const int KickPlayerRequestMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickPlayerRequestMessage::KickPlayerRequestMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KickPlayerRequestMessage)
}

void KickPlayerRequestMessage::InitAsDefaultInstance() {
}

KickPlayerRequestMessage::KickPlayerRequestMessage(const KickPlayerRequestMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KickPlayerRequestMessage)
}

void KickPlayerRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickPlayerRequestMessage::~KickPlayerRequestMessage() {
  // @@protoc_insertion_point(destructor:KickPlayerRequestMessage)
  SharedDtor();
}

void KickPlayerRequestMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KickPlayerRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KickPlayerRequestMessage& KickPlayerRequestMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

KickPlayerRequestMessage* KickPlayerRequestMessage::default_instance_ = NULL;

KickPlayerRequestMessage* KickPlayerRequestMessage::New(::google::protobuf::Arena* arena) const {
  KickPlayerRequestMessage* n = new KickPlayerRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KickPlayerRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KickPlayerRequestMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KickPlayerRequestMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KickPlayerRequestMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KickPlayerRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForKickPlayerRequestMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:KickPlayerRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KickPlayerRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KickPlayerRequestMessage)
  return false;
#undef DO_
}

void KickPlayerRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KickPlayerRequestMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:KickPlayerRequestMessage)
}

int KickPlayerRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KickPlayerRequestMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
int KickPlayerRequestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KickPlayerRequestMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickPlayerRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KickPlayerRequestMessage*>(&from));
}

void KickPlayerRequestMessage::MergeFrom(const KickPlayerRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KickPlayerRequestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void KickPlayerRequestMessage::CopyFrom(const KickPlayerRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickPlayerRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayerRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KickPlayerRequestMessage::Swap(KickPlayerRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickPlayerRequestMessage::InternalSwap(KickPlayerRequestMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string KickPlayerRequestMessage::GetTypeName() const {
  return "KickPlayerRequestMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KickPlayerRequestMessage

// required uint32 gameId = 1;
bool KickPlayerRequestMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KickPlayerRequestMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void KickPlayerRequestMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void KickPlayerRequestMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 KickPlayerRequestMessage::gameid() const {
  // @@protoc_insertion_point(field_get:KickPlayerRequestMessage.gameId)
  return gameid_;
}
 void KickPlayerRequestMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:KickPlayerRequestMessage.gameId)
}

// required uint32 playerId = 2;
bool KickPlayerRequestMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KickPlayerRequestMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void KickPlayerRequestMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void KickPlayerRequestMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 KickPlayerRequestMessage::playerid() const {
  // @@protoc_insertion_point(field_get:KickPlayerRequestMessage.playerId)
  return playerid_;
}
 void KickPlayerRequestMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KickPlayerRequestMessage.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForLeaveGameRequestMessage(
    LeaveGameRequestMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaveGameRequestMessage::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaveGameRequestMessage::LeaveGameRequestMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LeaveGameRequestMessage)
}

void LeaveGameRequestMessage::InitAsDefaultInstance() {
}

LeaveGameRequestMessage::LeaveGameRequestMessage(const LeaveGameRequestMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LeaveGameRequestMessage)
}

void LeaveGameRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveGameRequestMessage::~LeaveGameRequestMessage() {
  // @@protoc_insertion_point(destructor:LeaveGameRequestMessage)
  SharedDtor();
}

void LeaveGameRequestMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LeaveGameRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LeaveGameRequestMessage& LeaveGameRequestMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

LeaveGameRequestMessage* LeaveGameRequestMessage::default_instance_ = NULL;

LeaveGameRequestMessage* LeaveGameRequestMessage::New(::google::protobuf::Arena* arena) const {
  LeaveGameRequestMessage* n = new LeaveGameRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveGameRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LeaveGameRequestMessage)
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LeaveGameRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForLeaveGameRequestMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:LeaveGameRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LeaveGameRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LeaveGameRequestMessage)
  return false;
#undef DO_
}

void LeaveGameRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LeaveGameRequestMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:LeaveGameRequestMessage)
}

int LeaveGameRequestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LeaveGameRequestMessage)
  int total_size = 0;

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGameRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeaveGameRequestMessage*>(&from));
}

void LeaveGameRequestMessage::MergeFrom(const LeaveGameRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LeaveGameRequestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void LeaveGameRequestMessage::CopyFrom(const LeaveGameRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LeaveGameRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGameRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LeaveGameRequestMessage::Swap(LeaveGameRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveGameRequestMessage::InternalSwap(LeaveGameRequestMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LeaveGameRequestMessage::GetTypeName() const {
  return "LeaveGameRequestMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveGameRequestMessage

// required uint32 gameId = 1;
bool LeaveGameRequestMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaveGameRequestMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaveGameRequestMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaveGameRequestMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 LeaveGameRequestMessage::gameid() const {
  // @@protoc_insertion_point(field_get:LeaveGameRequestMessage.gameId)
  return gameid_;
}
 void LeaveGameRequestMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:LeaveGameRequestMessage.gameId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForInvitePlayerToGameMessage(
    InvitePlayerToGameMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvitePlayerToGameMessage::kGameIdFieldNumber;
const int InvitePlayerToGameMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvitePlayerToGameMessage::InvitePlayerToGameMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InvitePlayerToGameMessage)
}

void InvitePlayerToGameMessage::InitAsDefaultInstance() {
}

InvitePlayerToGameMessage::InvitePlayerToGameMessage(const InvitePlayerToGameMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InvitePlayerToGameMessage)
}

void InvitePlayerToGameMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitePlayerToGameMessage::~InvitePlayerToGameMessage() {
  // @@protoc_insertion_point(destructor:InvitePlayerToGameMessage)
  SharedDtor();
}

void InvitePlayerToGameMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InvitePlayerToGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InvitePlayerToGameMessage& InvitePlayerToGameMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

InvitePlayerToGameMessage* InvitePlayerToGameMessage::default_instance_ = NULL;

InvitePlayerToGameMessage* InvitePlayerToGameMessage::New(::google::protobuf::Arena* arena) const {
  InvitePlayerToGameMessage* n = new InvitePlayerToGameMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InvitePlayerToGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InvitePlayerToGameMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InvitePlayerToGameMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InvitePlayerToGameMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InvitePlayerToGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInvitePlayerToGameMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:InvitePlayerToGameMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InvitePlayerToGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InvitePlayerToGameMessage)
  return false;
#undef DO_
}

void InvitePlayerToGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InvitePlayerToGameMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:InvitePlayerToGameMessage)
}

int InvitePlayerToGameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InvitePlayerToGameMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
int InvitePlayerToGameMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:InvitePlayerToGameMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitePlayerToGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InvitePlayerToGameMessage*>(&from));
}

void InvitePlayerToGameMessage::MergeFrom(const InvitePlayerToGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InvitePlayerToGameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InvitePlayerToGameMessage::CopyFrom(const InvitePlayerToGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InvitePlayerToGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitePlayerToGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InvitePlayerToGameMessage::Swap(InvitePlayerToGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvitePlayerToGameMessage::InternalSwap(InvitePlayerToGameMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InvitePlayerToGameMessage::GetTypeName() const {
  return "InvitePlayerToGameMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InvitePlayerToGameMessage

// required uint32 gameId = 1;
bool InvitePlayerToGameMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InvitePlayerToGameMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void InvitePlayerToGameMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void InvitePlayerToGameMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 InvitePlayerToGameMessage::gameid() const {
  // @@protoc_insertion_point(field_get:InvitePlayerToGameMessage.gameId)
  return gameid_;
}
 void InvitePlayerToGameMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:InvitePlayerToGameMessage.gameId)
}

// required uint32 playerId = 2;
bool InvitePlayerToGameMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InvitePlayerToGameMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void InvitePlayerToGameMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void InvitePlayerToGameMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 InvitePlayerToGameMessage::playerid() const {
  // @@protoc_insertion_point(field_get:InvitePlayerToGameMessage.playerId)
  return playerid_;
}
 void InvitePlayerToGameMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:InvitePlayerToGameMessage.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForInviteNotifyMessage(
    InviteNotifyMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteNotifyMessage::kGameIdFieldNumber;
const int InviteNotifyMessage::kPlayerIdWhoFieldNumber;
const int InviteNotifyMessage::kPlayerIdByWhomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteNotifyMessage::InviteNotifyMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InviteNotifyMessage)
}

void InviteNotifyMessage::InitAsDefaultInstance() {
}

InviteNotifyMessage::InviteNotifyMessage(const InviteNotifyMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InviteNotifyMessage)
}

void InviteNotifyMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playeridwho_ = 0u;
  playeridbywhom_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteNotifyMessage::~InviteNotifyMessage() {
  // @@protoc_insertion_point(destructor:InviteNotifyMessage)
  SharedDtor();
}

void InviteNotifyMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InviteNotifyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InviteNotifyMessage& InviteNotifyMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

InviteNotifyMessage* InviteNotifyMessage::default_instance_ = NULL;

InviteNotifyMessage* InviteNotifyMessage::New(::google::protobuf::Arena* arena) const {
  InviteNotifyMessage* n = new InviteNotifyMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteNotifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InviteNotifyMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InviteNotifyMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InviteNotifyMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, playeridbywhom_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InviteNotifyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInviteNotifyMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:InviteNotifyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerIdWho;
        break;
      }

      // required uint32 playerIdWho = 2;
      case 2: {
        if (tag == 16) {
         parse_playerIdWho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playeridwho_)));
          set_has_playeridwho();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerIdByWhom;
        break;
      }

      // required uint32 playerIdByWhom = 3;
      case 3: {
        if (tag == 24) {
         parse_playerIdByWhom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playeridbywhom_)));
          set_has_playeridbywhom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InviteNotifyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InviteNotifyMessage)
  return false;
#undef DO_
}

void InviteNotifyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InviteNotifyMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerIdWho = 2;
  if (has_playeridwho()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playeridwho(), output);
  }

  // required uint32 playerIdByWhom = 3;
  if (has_playeridbywhom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playeridbywhom(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:InviteNotifyMessage)
}

int InviteNotifyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InviteNotifyMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playeridwho()) {
    // required uint32 playerIdWho = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeridwho());
  }

  if (has_playeridbywhom()) {
    // required uint32 playerIdByWhom = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeridbywhom());
  }

  return total_size;
}
int InviteNotifyMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:InviteNotifyMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerIdWho = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeridwho());

    // required uint32 playerIdByWhom = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeridbywhom());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteNotifyMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteNotifyMessage*>(&from));
}

void InviteNotifyMessage::MergeFrom(const InviteNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InviteNotifyMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playeridwho()) {
      set_playeridwho(from.playeridwho());
    }
    if (from.has_playeridbywhom()) {
      set_playeridbywhom(from.playeridbywhom());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InviteNotifyMessage::CopyFrom(const InviteNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InviteNotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteNotifyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void InviteNotifyMessage::Swap(InviteNotifyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteNotifyMessage::InternalSwap(InviteNotifyMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playeridwho_, other->playeridwho_);
  std::swap(playeridbywhom_, other->playeridbywhom_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InviteNotifyMessage::GetTypeName() const {
  return "InviteNotifyMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteNotifyMessage

// required uint32 gameId = 1;
bool InviteNotifyMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InviteNotifyMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void InviteNotifyMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void InviteNotifyMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 InviteNotifyMessage::gameid() const {
  // @@protoc_insertion_point(field_get:InviteNotifyMessage.gameId)
  return gameid_;
}
 void InviteNotifyMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:InviteNotifyMessage.gameId)
}

// required uint32 playerIdWho = 2;
bool InviteNotifyMessage::has_playeridwho() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InviteNotifyMessage::set_has_playeridwho() {
  _has_bits_[0] |= 0x00000002u;
}
void InviteNotifyMessage::clear_has_playeridwho() {
  _has_bits_[0] &= ~0x00000002u;
}
void InviteNotifyMessage::clear_playeridwho() {
  playeridwho_ = 0u;
  clear_has_playeridwho();
}
 ::google::protobuf::uint32 InviteNotifyMessage::playeridwho() const {
  // @@protoc_insertion_point(field_get:InviteNotifyMessage.playerIdWho)
  return playeridwho_;
}
 void InviteNotifyMessage::set_playeridwho(::google::protobuf::uint32 value) {
  set_has_playeridwho();
  playeridwho_ = value;
  // @@protoc_insertion_point(field_set:InviteNotifyMessage.playerIdWho)
}

// required uint32 playerIdByWhom = 3;
bool InviteNotifyMessage::has_playeridbywhom() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InviteNotifyMessage::set_has_playeridbywhom() {
  _has_bits_[0] |= 0x00000004u;
}
void InviteNotifyMessage::clear_has_playeridbywhom() {
  _has_bits_[0] &= ~0x00000004u;
}
void InviteNotifyMessage::clear_playeridbywhom() {
  playeridbywhom_ = 0u;
  clear_has_playeridbywhom();
}
 ::google::protobuf::uint32 InviteNotifyMessage::playeridbywhom() const {
  // @@protoc_insertion_point(field_get:InviteNotifyMessage.playerIdByWhom)
  return playeridbywhom_;
}
 void InviteNotifyMessage::set_playeridbywhom(::google::protobuf::uint32 value) {
  set_has_playeridbywhom();
  playeridbywhom_ = value;
  // @@protoc_insertion_point(field_set:InviteNotifyMessage.playerIdByWhom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRejectGameInvitationMessage(
    RejectGameInvitationMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool RejectGameInvitationMessage_RejectGameInvReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::rejectReasonNo;
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::rejectReasonBusy;
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::RejectGameInvReason_MIN;
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::RejectGameInvReason_MAX;
const int RejectGameInvitationMessage::RejectGameInvReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RejectGameInvitationMessage::kGameIdFieldNumber;
const int RejectGameInvitationMessage::kMyRejectReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RejectGameInvitationMessage::RejectGameInvitationMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RejectGameInvitationMessage)
}

void RejectGameInvitationMessage::InitAsDefaultInstance() {
}

RejectGameInvitationMessage::RejectGameInvitationMessage(const RejectGameInvitationMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RejectGameInvitationMessage)
}

void RejectGameInvitationMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  myrejectreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejectGameInvitationMessage::~RejectGameInvitationMessage() {
  // @@protoc_insertion_point(destructor:RejectGameInvitationMessage)
  SharedDtor();
}

void RejectGameInvitationMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RejectGameInvitationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RejectGameInvitationMessage& RejectGameInvitationMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

RejectGameInvitationMessage* RejectGameInvitationMessage::default_instance_ = NULL;

RejectGameInvitationMessage* RejectGameInvitationMessage::New(::google::protobuf::Arena* arena) const {
  RejectGameInvitationMessage* n = new RejectGameInvitationMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RejectGameInvitationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejectGameInvitationMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RejectGameInvitationMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RejectGameInvitationMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, myrejectreason_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RejectGameInvitationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRejectGameInvitationMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:RejectGameInvitationMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myRejectReason;
        break;
      }

      // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
      case 2: {
        if (tag == 16) {
         parse_myRejectReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RejectGameInvitationMessage_RejectGameInvReason_IsValid(value)) {
            set_myrejectreason(static_cast< ::RejectGameInvitationMessage_RejectGameInvReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RejectGameInvitationMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RejectGameInvitationMessage)
  return false;
#undef DO_
}

void RejectGameInvitationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RejectGameInvitationMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
  if (has_myrejectreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->myrejectreason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RejectGameInvitationMessage)
}

int RejectGameInvitationMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RejectGameInvitationMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_myrejectreason()) {
    // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->myrejectreason());
  }

  return total_size;
}
int RejectGameInvitationMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RejectGameInvitationMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->myrejectreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejectGameInvitationMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RejectGameInvitationMessage*>(&from));
}

void RejectGameInvitationMessage::MergeFrom(const RejectGameInvitationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RejectGameInvitationMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_myrejectreason()) {
      set_myrejectreason(from.myrejectreason());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RejectGameInvitationMessage::CopyFrom(const RejectGameInvitationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejectGameInvitationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectGameInvitationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RejectGameInvitationMessage::Swap(RejectGameInvitationMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RejectGameInvitationMessage::InternalSwap(RejectGameInvitationMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(myrejectreason_, other->myrejectreason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RejectGameInvitationMessage::GetTypeName() const {
  return "RejectGameInvitationMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RejectGameInvitationMessage

// required uint32 gameId = 1;
bool RejectGameInvitationMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RejectGameInvitationMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void RejectGameInvitationMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RejectGameInvitationMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 RejectGameInvitationMessage::gameid() const {
  // @@protoc_insertion_point(field_get:RejectGameInvitationMessage.gameId)
  return gameid_;
}
 void RejectGameInvitationMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:RejectGameInvitationMessage.gameId)
}

// required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
bool RejectGameInvitationMessage::has_myrejectreason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RejectGameInvitationMessage::set_has_myrejectreason() {
  _has_bits_[0] |= 0x00000002u;
}
void RejectGameInvitationMessage::clear_has_myrejectreason() {
  _has_bits_[0] &= ~0x00000002u;
}
void RejectGameInvitationMessage::clear_myrejectreason() {
  myrejectreason_ = 0;
  clear_has_myrejectreason();
}
 ::RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::myrejectreason() const {
  // @@protoc_insertion_point(field_get:RejectGameInvitationMessage.myRejectReason)
  return static_cast< ::RejectGameInvitationMessage_RejectGameInvReason >(myrejectreason_);
}
 void RejectGameInvitationMessage::set_myrejectreason(::RejectGameInvitationMessage_RejectGameInvReason value) {
  assert(::RejectGameInvitationMessage_RejectGameInvReason_IsValid(value));
  set_has_myrejectreason();
  myrejectreason_ = value;
  // @@protoc_insertion_point(field_set:RejectGameInvitationMessage.myRejectReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRejectInvNotifyMessage(
    RejectInvNotifyMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RejectInvNotifyMessage::kGameIdFieldNumber;
const int RejectInvNotifyMessage::kPlayerIdFieldNumber;
const int RejectInvNotifyMessage::kPlayerRejectReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RejectInvNotifyMessage::RejectInvNotifyMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RejectInvNotifyMessage)
}

void RejectInvNotifyMessage::InitAsDefaultInstance() {
}

RejectInvNotifyMessage::RejectInvNotifyMessage(const RejectInvNotifyMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RejectInvNotifyMessage)
}

void RejectInvNotifyMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  playerrejectreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejectInvNotifyMessage::~RejectInvNotifyMessage() {
  // @@protoc_insertion_point(destructor:RejectInvNotifyMessage)
  SharedDtor();
}

void RejectInvNotifyMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RejectInvNotifyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RejectInvNotifyMessage& RejectInvNotifyMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

RejectInvNotifyMessage* RejectInvNotifyMessage::default_instance_ = NULL;

RejectInvNotifyMessage* RejectInvNotifyMessage::New(::google::protobuf::Arena* arena) const {
  RejectInvNotifyMessage* n = new RejectInvNotifyMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RejectInvNotifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejectInvNotifyMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RejectInvNotifyMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RejectInvNotifyMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, playerrejectreason_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RejectInvNotifyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRejectInvNotifyMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:RejectInvNotifyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerRejectReason;
        break;
      }

      // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
      case 3: {
        if (tag == 24) {
         parse_playerRejectReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RejectGameInvitationMessage_RejectGameInvReason_IsValid(value)) {
            set_playerrejectreason(static_cast< ::RejectGameInvitationMessage_RejectGameInvReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RejectInvNotifyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RejectInvNotifyMessage)
  return false;
#undef DO_
}

void RejectInvNotifyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RejectInvNotifyMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
  if (has_playerrejectreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->playerrejectreason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RejectInvNotifyMessage)
}

int RejectInvNotifyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RejectInvNotifyMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_playerrejectreason()) {
    // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerrejectreason());
  }

  return total_size;
}
int RejectInvNotifyMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RejectInvNotifyMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerrejectreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejectInvNotifyMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RejectInvNotifyMessage*>(&from));
}

void RejectInvNotifyMessage::MergeFrom(const RejectInvNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RejectInvNotifyMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playerrejectreason()) {
      set_playerrejectreason(from.playerrejectreason());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RejectInvNotifyMessage::CopyFrom(const RejectInvNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejectInvNotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectInvNotifyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RejectInvNotifyMessage::Swap(RejectInvNotifyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RejectInvNotifyMessage::InternalSwap(RejectInvNotifyMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(playerrejectreason_, other->playerrejectreason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RejectInvNotifyMessage::GetTypeName() const {
  return "RejectInvNotifyMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RejectInvNotifyMessage

// required uint32 gameId = 1;
bool RejectInvNotifyMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RejectInvNotifyMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void RejectInvNotifyMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RejectInvNotifyMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 RejectInvNotifyMessage::gameid() const {
  // @@protoc_insertion_point(field_get:RejectInvNotifyMessage.gameId)
  return gameid_;
}
 void RejectInvNotifyMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:RejectInvNotifyMessage.gameId)
}

// required uint32 playerId = 2;
bool RejectInvNotifyMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RejectInvNotifyMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void RejectInvNotifyMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RejectInvNotifyMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 RejectInvNotifyMessage::playerid() const {
  // @@protoc_insertion_point(field_get:RejectInvNotifyMessage.playerId)
  return playerid_;
}
 void RejectInvNotifyMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:RejectInvNotifyMessage.playerId)
}

// required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
bool RejectInvNotifyMessage::has_playerrejectreason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RejectInvNotifyMessage::set_has_playerrejectreason() {
  _has_bits_[0] |= 0x00000004u;
}
void RejectInvNotifyMessage::clear_has_playerrejectreason() {
  _has_bits_[0] &= ~0x00000004u;
}
void RejectInvNotifyMessage::clear_playerrejectreason() {
  playerrejectreason_ = 0;
  clear_has_playerrejectreason();
}
 ::RejectGameInvitationMessage_RejectGameInvReason RejectInvNotifyMessage::playerrejectreason() const {
  // @@protoc_insertion_point(field_get:RejectInvNotifyMessage.playerRejectReason)
  return static_cast< ::RejectGameInvitationMessage_RejectGameInvReason >(playerrejectreason_);
}
 void RejectInvNotifyMessage::set_playerrejectreason(::RejectGameInvitationMessage_RejectGameInvReason value) {
  assert(::RejectGameInvitationMessage_RejectGameInvReason_IsValid(value));
  set_has_playerrejectreason();
  playerrejectreason_ = value;
  // @@protoc_insertion_point(field_set:RejectInvNotifyMessage.playerRejectReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStartEventMessage(
    StartEventMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool StartEventMessage_StartEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StartEventMessage_StartEventType StartEventMessage::startEvent;
const StartEventMessage_StartEventType StartEventMessage::rejoinEvent;
const StartEventMessage_StartEventType StartEventMessage::StartEventType_MIN;
const StartEventMessage_StartEventType StartEventMessage::StartEventType_MAX;
const int StartEventMessage::StartEventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartEventMessage::kGameIdFieldNumber;
const int StartEventMessage::kStartEventTypeFieldNumber;
const int StartEventMessage::kFillWithComputerPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartEventMessage::StartEventMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartEventMessage)
}

void StartEventMessage::InitAsDefaultInstance() {
}

StartEventMessage::StartEventMessage(const StartEventMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StartEventMessage)
}

void StartEventMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  starteventtype_ = 0;
  fillwithcomputerplayers_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartEventMessage::~StartEventMessage() {
  // @@protoc_insertion_point(destructor:StartEventMessage)
  SharedDtor();
}

void StartEventMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StartEventMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartEventMessage& StartEventMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

StartEventMessage* StartEventMessage::default_instance_ = NULL;

StartEventMessage* StartEventMessage::New(::google::protobuf::Arena* arena) const {
  StartEventMessage* n = new StartEventMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartEventMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StartEventMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StartEventMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StartEventMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, fillwithcomputerplayers_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StartEventMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForStartEventMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:StartEventMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startEventType;
        break;
      }

      // required .StartEventMessage.StartEventType startEventType = 2;
      case 2: {
        if (tag == 16) {
         parse_startEventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StartEventMessage_StartEventType_IsValid(value)) {
            set_starteventtype(static_cast< ::StartEventMessage_StartEventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fillWithComputerPlayers;
        break;
      }

      // optional bool fillWithComputerPlayers = 3;
      case 3: {
        if (tag == 24) {
         parse_fillWithComputerPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fillwithcomputerplayers_)));
          set_has_fillwithcomputerplayers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StartEventMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartEventMessage)
  return false;
#undef DO_
}

void StartEventMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartEventMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .StartEventMessage.StartEventType startEventType = 2;
  if (has_starteventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->starteventtype(), output);
  }

  // optional bool fillWithComputerPlayers = 3;
  if (has_fillwithcomputerplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fillwithcomputerplayers(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:StartEventMessage)
}

int StartEventMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StartEventMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_starteventtype()) {
    // required .StartEventMessage.StartEventType startEventType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->starteventtype());
  }

  return total_size;
}
int StartEventMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StartEventMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .StartEventMessage.StartEventType startEventType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->starteventtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool fillWithComputerPlayers = 3;
  if (has_fillwithcomputerplayers()) {
    total_size += 1 + 1;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartEventMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartEventMessage*>(&from));
}

void StartEventMessage::MergeFrom(const StartEventMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartEventMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_starteventtype()) {
      set_starteventtype(from.starteventtype());
    }
    if (from.has_fillwithcomputerplayers()) {
      set_fillwithcomputerplayers(from.fillwithcomputerplayers());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StartEventMessage::CopyFrom(const StartEventMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartEventMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartEventMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StartEventMessage::Swap(StartEventMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartEventMessage::InternalSwap(StartEventMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(starteventtype_, other->starteventtype_);
  std::swap(fillwithcomputerplayers_, other->fillwithcomputerplayers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StartEventMessage::GetTypeName() const {
  return "StartEventMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartEventMessage

// required uint32 gameId = 1;
bool StartEventMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StartEventMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void StartEventMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void StartEventMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 StartEventMessage::gameid() const {
  // @@protoc_insertion_point(field_get:StartEventMessage.gameId)
  return gameid_;
}
 void StartEventMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:StartEventMessage.gameId)
}

// required .StartEventMessage.StartEventType startEventType = 2;
bool StartEventMessage::has_starteventtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StartEventMessage::set_has_starteventtype() {
  _has_bits_[0] |= 0x00000002u;
}
void StartEventMessage::clear_has_starteventtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void StartEventMessage::clear_starteventtype() {
  starteventtype_ = 0;
  clear_has_starteventtype();
}
 ::StartEventMessage_StartEventType StartEventMessage::starteventtype() const {
  // @@protoc_insertion_point(field_get:StartEventMessage.startEventType)
  return static_cast< ::StartEventMessage_StartEventType >(starteventtype_);
}
 void StartEventMessage::set_starteventtype(::StartEventMessage_StartEventType value) {
  assert(::StartEventMessage_StartEventType_IsValid(value));
  set_has_starteventtype();
  starteventtype_ = value;
  // @@protoc_insertion_point(field_set:StartEventMessage.startEventType)
}

// optional bool fillWithComputerPlayers = 3;
bool StartEventMessage::has_fillwithcomputerplayers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StartEventMessage::set_has_fillwithcomputerplayers() {
  _has_bits_[0] |= 0x00000004u;
}
void StartEventMessage::clear_has_fillwithcomputerplayers() {
  _has_bits_[0] &= ~0x00000004u;
}
void StartEventMessage::clear_fillwithcomputerplayers() {
  fillwithcomputerplayers_ = false;
  clear_has_fillwithcomputerplayers();
}
 bool StartEventMessage::fillwithcomputerplayers() const {
  // @@protoc_insertion_point(field_get:StartEventMessage.fillWithComputerPlayers)
  return fillwithcomputerplayers_;
}
 void StartEventMessage::set_fillwithcomputerplayers(bool value) {
  set_has_fillwithcomputerplayers();
  fillwithcomputerplayers_ = value;
  // @@protoc_insertion_point(field_set:StartEventMessage.fillWithComputerPlayers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStartEventAckMessage(
    StartEventAckMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartEventAckMessage::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartEventAckMessage::StartEventAckMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartEventAckMessage)
}

void StartEventAckMessage::InitAsDefaultInstance() {
}

StartEventAckMessage::StartEventAckMessage(const StartEventAckMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StartEventAckMessage)
}

void StartEventAckMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartEventAckMessage::~StartEventAckMessage() {
  // @@protoc_insertion_point(destructor:StartEventAckMessage)
  SharedDtor();
}

void StartEventAckMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StartEventAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartEventAckMessage& StartEventAckMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

StartEventAckMessage* StartEventAckMessage::default_instance_ = NULL;

StartEventAckMessage* StartEventAckMessage::New(::google::protobuf::Arena* arena) const {
  StartEventAckMessage* n = new StartEventAckMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartEventAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StartEventAckMessage)
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StartEventAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForStartEventAckMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:StartEventAckMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StartEventAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartEventAckMessage)
  return false;
#undef DO_
}

void StartEventAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartEventAckMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:StartEventAckMessage)
}

int StartEventAckMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StartEventAckMessage)
  int total_size = 0;

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartEventAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartEventAckMessage*>(&from));
}

void StartEventAckMessage::MergeFrom(const StartEventAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartEventAckMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StartEventAckMessage::CopyFrom(const StartEventAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartEventAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartEventAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartEventAckMessage::Swap(StartEventAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartEventAckMessage::InternalSwap(StartEventAckMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StartEventAckMessage::GetTypeName() const {
  return "StartEventAckMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartEventAckMessage

// required uint32 gameId = 1;
bool StartEventAckMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StartEventAckMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void StartEventAckMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void StartEventAckMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 StartEventAckMessage::gameid() const {
  // @@protoc_insertion_point(field_get:StartEventAckMessage.gameId)
  return gameid_;
}
 void StartEventAckMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:StartEventAckMessage.gameId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameStartInitialMessage(
    GameStartInitialMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStartInitialMessage::kGameIdFieldNumber;
const int GameStartInitialMessage::kStartDealerPlayerIdFieldNumber;
const int GameStartInitialMessage::kPlayerSeatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartInitialMessage::GameStartInitialMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameStartInitialMessage)
}

void GameStartInitialMessage::InitAsDefaultInstance() {
}

GameStartInitialMessage::GameStartInitialMessage(const GameStartInitialMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameStartInitialMessage)
}

void GameStartInitialMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  startdealerplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStartInitialMessage::~GameStartInitialMessage() {
  // @@protoc_insertion_point(destructor:GameStartInitialMessage)
  SharedDtor();
}

void GameStartInitialMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameStartInitialMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameStartInitialMessage& GameStartInitialMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameStartInitialMessage* GameStartInitialMessage::default_instance_ = NULL;

GameStartInitialMessage* GameStartInitialMessage::New(::google::protobuf::Arena* arena) const {
  GameStartInitialMessage* n = new GameStartInitialMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameStartInitialMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartInitialMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameStartInitialMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameStartInitialMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, startdealerplayerid_);

#undef ZR_HELPER_
#undef ZR_

  playerseats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameStartInitialMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameStartInitialMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameStartInitialMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startDealerPlayerId;
        break;
      }

      // required uint32 startDealerPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_startDealerPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startdealerplayerid_)));
          set_has_startdealerplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerSeats;
        break;
      }

      // repeated uint32 playerSeats = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_playerSeats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerseats())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_playerseats())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameStartInitialMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameStartInitialMessage)
  return false;
#undef DO_
}

void GameStartInitialMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameStartInitialMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 startDealerPlayerId = 2;
  if (has_startdealerplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startdealerplayerid(), output);
  }

  // repeated uint32 playerSeats = 3 [packed = true];
  if (this->playerseats_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_playerseats_cached_byte_size_);
  }
  for (int i = 0; i < this->playerseats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->playerseats(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameStartInitialMessage)
}

int GameStartInitialMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameStartInitialMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_startdealerplayerid()) {
    // required uint32 startDealerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startdealerplayerid());
  }

  return total_size;
}
int GameStartInitialMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartInitialMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 startDealerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startdealerplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 playerSeats = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->playerseats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playerseats(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _playerseats_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartInitialMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameStartInitialMessage*>(&from));
}

void GameStartInitialMessage::MergeFrom(const GameStartInitialMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartInitialMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  playerseats_.MergeFrom(from.playerseats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_startdealerplayerid()) {
      set_startdealerplayerid(from.startdealerplayerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameStartInitialMessage::CopyFrom(const GameStartInitialMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartInitialMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartInitialMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameStartInitialMessage::Swap(GameStartInitialMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartInitialMessage::InternalSwap(GameStartInitialMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(startdealerplayerid_, other->startdealerplayerid_);
  playerseats_.UnsafeArenaSwap(&other->playerseats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameStartInitialMessage::GetTypeName() const {
  return "GameStartInitialMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameStartInitialMessage

// required uint32 gameId = 1;
bool GameStartInitialMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameStartInitialMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameStartInitialMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameStartInitialMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameStartInitialMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameStartInitialMessage.gameId)
  return gameid_;
}
 void GameStartInitialMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameStartInitialMessage.gameId)
}

// required uint32 startDealerPlayerId = 2;
bool GameStartInitialMessage::has_startdealerplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameStartInitialMessage::set_has_startdealerplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameStartInitialMessage::clear_has_startdealerplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameStartInitialMessage::clear_startdealerplayerid() {
  startdealerplayerid_ = 0u;
  clear_has_startdealerplayerid();
}
 ::google::protobuf::uint32 GameStartInitialMessage::startdealerplayerid() const {
  // @@protoc_insertion_point(field_get:GameStartInitialMessage.startDealerPlayerId)
  return startdealerplayerid_;
}
 void GameStartInitialMessage::set_startdealerplayerid(::google::protobuf::uint32 value) {
  set_has_startdealerplayerid();
  startdealerplayerid_ = value;
  // @@protoc_insertion_point(field_set:GameStartInitialMessage.startDealerPlayerId)
}

// repeated uint32 playerSeats = 3 [packed = true];
int GameStartInitialMessage::playerseats_size() const {
  return playerseats_.size();
}
void GameStartInitialMessage::clear_playerseats() {
  playerseats_.Clear();
}
 ::google::protobuf::uint32 GameStartInitialMessage::playerseats(int index) const {
  // @@protoc_insertion_point(field_get:GameStartInitialMessage.playerSeats)
  return playerseats_.Get(index);
}
 void GameStartInitialMessage::set_playerseats(int index, ::google::protobuf::uint32 value) {
  playerseats_.Set(index, value);
  // @@protoc_insertion_point(field_set:GameStartInitialMessage.playerSeats)
}
 void GameStartInitialMessage::add_playerseats(::google::protobuf::uint32 value) {
  playerseats_.Add(value);
  // @@protoc_insertion_point(field_add:GameStartInitialMessage.playerSeats)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GameStartInitialMessage::playerseats() const {
  // @@protoc_insertion_point(field_list:GameStartInitialMessage.playerSeats)
  return playerseats_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GameStartInitialMessage::mutable_playerseats() {
  // @@protoc_insertion_point(field_mutable_list:GameStartInitialMessage.playerSeats)
  return &playerseats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGameStartRejoinMessage(
    GameStartRejoinMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForGameStartRejoinMessage_RejoinPlayerData(
    GameStartRejoinMessage_RejoinPlayerData* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStartRejoinMessage_RejoinPlayerData::kPlayerIdFieldNumber;
const int GameStartRejoinMessage_RejoinPlayerData::kPlayerMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartRejoinMessage_RejoinPlayerData::GameStartRejoinMessage_RejoinPlayerData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameStartRejoinMessage.RejoinPlayerData)
}

void GameStartRejoinMessage_RejoinPlayerData::InitAsDefaultInstance() {
}

GameStartRejoinMessage_RejoinPlayerData::GameStartRejoinMessage_RejoinPlayerData(const GameStartRejoinMessage_RejoinPlayerData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameStartRejoinMessage.RejoinPlayerData)
}

void GameStartRejoinMessage_RejoinPlayerData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_ = 0u;
  playermoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStartRejoinMessage_RejoinPlayerData::~GameStartRejoinMessage_RejoinPlayerData() {
  // @@protoc_insertion_point(destructor:GameStartRejoinMessage.RejoinPlayerData)
  SharedDtor();
}

void GameStartRejoinMessage_RejoinPlayerData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameStartRejoinMessage_RejoinPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameStartRejoinMessage_RejoinPlayerData& GameStartRejoinMessage_RejoinPlayerData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameStartRejoinMessage_RejoinPlayerData* GameStartRejoinMessage_RejoinPlayerData::default_instance_ = NULL;

GameStartRejoinMessage_RejoinPlayerData* GameStartRejoinMessage_RejoinPlayerData::New(::google::protobuf::Arena* arena) const {
  GameStartRejoinMessage_RejoinPlayerData* n = new GameStartRejoinMessage_RejoinPlayerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameStartRejoinMessage_RejoinPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartRejoinMessage.RejoinPlayerData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameStartRejoinMessage_RejoinPlayerData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameStartRejoinMessage_RejoinPlayerData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, playermoney_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameStartRejoinMessage_RejoinPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameStartRejoinMessage_RejoinPlayerData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameStartRejoinMessage.RejoinPlayerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerMoney;
        break;
      }

      // required uint32 playerMoney = 2;
      case 2: {
        if (tag == 16) {
         parse_playerMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
          set_has_playermoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameStartRejoinMessage.RejoinPlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameStartRejoinMessage.RejoinPlayerData)
  return false;
#undef DO_
}

void GameStartRejoinMessage_RejoinPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameStartRejoinMessage.RejoinPlayerData)
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 playerMoney = 2;
  if (has_playermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playermoney(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameStartRejoinMessage.RejoinPlayerData)
}

int GameStartRejoinMessage_RejoinPlayerData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameStartRejoinMessage.RejoinPlayerData)
  int total_size = 0;

  if (has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_playermoney()) {
    // required uint32 playerMoney = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());
  }

  return total_size;
}
int GameStartRejoinMessage_RejoinPlayerData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartRejoinMessage.RejoinPlayerData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required uint32 playerMoney = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartRejoinMessage_RejoinPlayerData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameStartRejoinMessage_RejoinPlayerData*>(&from));
}

void GameStartRejoinMessage_RejoinPlayerData::MergeFrom(const GameStartRejoinMessage_RejoinPlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartRejoinMessage.RejoinPlayerData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playermoney()) {
      set_playermoney(from.playermoney());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameStartRejoinMessage_RejoinPlayerData::CopyFrom(const GameStartRejoinMessage_RejoinPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartRejoinMessage.RejoinPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRejoinMessage_RejoinPlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameStartRejoinMessage_RejoinPlayerData::Swap(GameStartRejoinMessage_RejoinPlayerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartRejoinMessage_RejoinPlayerData::InternalSwap(GameStartRejoinMessage_RejoinPlayerData* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(playermoney_, other->playermoney_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameStartRejoinMessage_RejoinPlayerData::GetTypeName() const {
  return "GameStartRejoinMessage.RejoinPlayerData";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStartRejoinMessage::kGameIdFieldNumber;
const int GameStartRejoinMessage::kStartDealerPlayerIdFieldNumber;
const int GameStartRejoinMessage::kHandNumFieldNumber;
const int GameStartRejoinMessage::kRejoinPlayerDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartRejoinMessage::GameStartRejoinMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameStartRejoinMessage)
}

void GameStartRejoinMessage::InitAsDefaultInstance() {
}

GameStartRejoinMessage::GameStartRejoinMessage(const GameStartRejoinMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameStartRejoinMessage)
}

void GameStartRejoinMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  startdealerplayerid_ = 0u;
  handnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStartRejoinMessage::~GameStartRejoinMessage() {
  // @@protoc_insertion_point(destructor:GameStartRejoinMessage)
  SharedDtor();
}

void GameStartRejoinMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameStartRejoinMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameStartRejoinMessage& GameStartRejoinMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

GameStartRejoinMessage* GameStartRejoinMessage::default_instance_ = NULL;

GameStartRejoinMessage* GameStartRejoinMessage::New(::google::protobuf::Arena* arena) const {
  GameStartRejoinMessage* n = new GameStartRejoinMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameStartRejoinMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartRejoinMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameStartRejoinMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameStartRejoinMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(gameid_, startdealerplayerid_);
    handnum_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  rejoinplayerdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameStartRejoinMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForGameStartRejoinMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GameStartRejoinMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startDealerPlayerId;
        break;
      }

      // required uint32 startDealerPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_startDealerPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startdealerplayerid_)));
          set_has_startdealerplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_handNum;
        break;
      }

      // required uint32 handNum = 3;
      case 3: {
        if (tag == 24) {
         parse_handNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handnum_)));
          set_has_handnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rejoinPlayerData;
        break;
      }

      // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
      case 4: {
        if (tag == 34) {
         parse_rejoinPlayerData:
          DO_(input->IncrementRecursionDepth());
         parse_loop_rejoinPlayerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rejoinplayerdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_rejoinPlayerData;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameStartRejoinMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameStartRejoinMessage)
  return false;
#undef DO_
}

void GameStartRejoinMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameStartRejoinMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 startDealerPlayerId = 2;
  if (has_startdealerplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startdealerplayerid(), output);
  }

  // required uint32 handNum = 3;
  if (has_handnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->handnum(), output);
  }

  // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
  for (unsigned int i = 0, n = this->rejoinplayerdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->rejoinplayerdata(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameStartRejoinMessage)
}

int GameStartRejoinMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameStartRejoinMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_startdealerplayerid()) {
    // required uint32 startDealerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startdealerplayerid());
  }

  if (has_handnum()) {
    // required uint32 handNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->handnum());
  }

  return total_size;
}
int GameStartRejoinMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartRejoinMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 startDealerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startdealerplayerid());

    // required uint32 handNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->handnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
  total_size += 1 * this->rejoinplayerdata_size();
  for (int i = 0; i < this->rejoinplayerdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rejoinplayerdata(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartRejoinMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameStartRejoinMessage*>(&from));
}

void GameStartRejoinMessage::MergeFrom(const GameStartRejoinMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartRejoinMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  rejoinplayerdata_.MergeFrom(from.rejoinplayerdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_startdealerplayerid()) {
      set_startdealerplayerid(from.startdealerplayerid());
    }
    if (from.has_handnum()) {
      set_handnum(from.handnum());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void GameStartRejoinMessage::CopyFrom(const GameStartRejoinMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartRejoinMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRejoinMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rejoinplayerdata())) return false;
  return true;
}

void GameStartRejoinMessage::Swap(GameStartRejoinMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartRejoinMessage::InternalSwap(GameStartRejoinMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(startdealerplayerid_, other->startdealerplayerid_);
  std::swap(handnum_, other->handnum_);
  rejoinplayerdata_.UnsafeArenaSwap(&other->rejoinplayerdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameStartRejoinMessage::GetTypeName() const {
  return "GameStartRejoinMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameStartRejoinMessage_RejoinPlayerData

// required uint32 playerId = 1;
bool GameStartRejoinMessage_RejoinPlayerData::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameStartRejoinMessage_RejoinPlayerData::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameStartRejoinMessage_RejoinPlayerData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameStartRejoinMessage_RejoinPlayerData::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 GameStartRejoinMessage_RejoinPlayerData::playerid() const {
  // @@protoc_insertion_point(field_get:GameStartRejoinMessage.RejoinPlayerData.playerId)
  return playerid_;
}
 void GameStartRejoinMessage_RejoinPlayerData::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GameStartRejoinMessage.RejoinPlayerData.playerId)
}

// required uint32 playerMoney = 2;
bool GameStartRejoinMessage_RejoinPlayerData::has_playermoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameStartRejoinMessage_RejoinPlayerData::set_has_playermoney() {
  _has_bits_[0] |= 0x00000002u;
}
void GameStartRejoinMessage_RejoinPlayerData::clear_has_playermoney() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameStartRejoinMessage_RejoinPlayerData::clear_playermoney() {
  playermoney_ = 0u;
  clear_has_playermoney();
}
 ::google::protobuf::uint32 GameStartRejoinMessage_RejoinPlayerData::playermoney() const {
  // @@protoc_insertion_point(field_get:GameStartRejoinMessage.RejoinPlayerData.playerMoney)
  return playermoney_;
}
 void GameStartRejoinMessage_RejoinPlayerData::set_playermoney(::google::protobuf::uint32 value) {
  set_has_playermoney();
  playermoney_ = value;
  // @@protoc_insertion_point(field_set:GameStartRejoinMessage.RejoinPlayerData.playerMoney)
}

// -------------------------------------------------------------------

// GameStartRejoinMessage

// required uint32 gameId = 1;
bool GameStartRejoinMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameStartRejoinMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameStartRejoinMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameStartRejoinMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 GameStartRejoinMessage::gameid() const {
  // @@protoc_insertion_point(field_get:GameStartRejoinMessage.gameId)
  return gameid_;
}
 void GameStartRejoinMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:GameStartRejoinMessage.gameId)
}

// required uint32 startDealerPlayerId = 2;
bool GameStartRejoinMessage::has_startdealerplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameStartRejoinMessage::set_has_startdealerplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameStartRejoinMessage::clear_has_startdealerplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameStartRejoinMessage::clear_startdealerplayerid() {
  startdealerplayerid_ = 0u;
  clear_has_startdealerplayerid();
}
 ::google::protobuf::uint32 GameStartRejoinMessage::startdealerplayerid() const {
  // @@protoc_insertion_point(field_get:GameStartRejoinMessage.startDealerPlayerId)
  return startdealerplayerid_;
}
 void GameStartRejoinMessage::set_startdealerplayerid(::google::protobuf::uint32 value) {
  set_has_startdealerplayerid();
  startdealerplayerid_ = value;
  // @@protoc_insertion_point(field_set:GameStartRejoinMessage.startDealerPlayerId)
}

// required uint32 handNum = 3;
bool GameStartRejoinMessage::has_handnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameStartRejoinMessage::set_has_handnum() {
  _has_bits_[0] |= 0x00000004u;
}
void GameStartRejoinMessage::clear_has_handnum() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameStartRejoinMessage::clear_handnum() {
  handnum_ = 0u;
  clear_has_handnum();
}
 ::google::protobuf::uint32 GameStartRejoinMessage::handnum() const {
  // @@protoc_insertion_point(field_get:GameStartRejoinMessage.handNum)
  return handnum_;
}
 void GameStartRejoinMessage::set_handnum(::google::protobuf::uint32 value) {
  set_has_handnum();
  handnum_ = value;
  // @@protoc_insertion_point(field_set:GameStartRejoinMessage.handNum)
}

// repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
int GameStartRejoinMessage::rejoinplayerdata_size() const {
  return rejoinplayerdata_.size();
}
void GameStartRejoinMessage::clear_rejoinplayerdata() {
  rejoinplayerdata_.Clear();
}
const ::GameStartRejoinMessage_RejoinPlayerData& GameStartRejoinMessage::rejoinplayerdata(int index) const {
  // @@protoc_insertion_point(field_get:GameStartRejoinMessage.rejoinPlayerData)
  return rejoinplayerdata_.Get(index);
}
::GameStartRejoinMessage_RejoinPlayerData* GameStartRejoinMessage::mutable_rejoinplayerdata(int index) {
  // @@protoc_insertion_point(field_mutable:GameStartRejoinMessage.rejoinPlayerData)
  return rejoinplayerdata_.Mutable(index);
}
::GameStartRejoinMessage_RejoinPlayerData* GameStartRejoinMessage::add_rejoinplayerdata() {
  // @@protoc_insertion_point(field_add:GameStartRejoinMessage.rejoinPlayerData)
  return rejoinplayerdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameStartRejoinMessage_RejoinPlayerData >*
GameStartRejoinMessage::mutable_rejoinplayerdata() {
  // @@protoc_insertion_point(field_mutable_list:GameStartRejoinMessage.rejoinPlayerData)
  return &rejoinplayerdata_;
}
const ::google::protobuf::RepeatedPtrField< ::GameStartRejoinMessage_RejoinPlayerData >&
GameStartRejoinMessage::rejoinplayerdata() const {
  // @@protoc_insertion_point(field_list:GameStartRejoinMessage.rejoinPlayerData)
  return rejoinplayerdata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForHandStartMessage(
    HandStartMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForHandStartMessage_PlainCards(
    HandStartMessage_PlainCards* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HandStartMessage_PlainCards::kPlainCard1FieldNumber;
const int HandStartMessage_PlainCards::kPlainCard2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandStartMessage_PlainCards::HandStartMessage_PlainCards()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HandStartMessage.PlainCards)
}

void HandStartMessage_PlainCards::InitAsDefaultInstance() {
}

HandStartMessage_PlainCards::HandStartMessage_PlainCards(const HandStartMessage_PlainCards& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HandStartMessage.PlainCards)
}

void HandStartMessage_PlainCards::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plaincard1_ = 0u;
  plaincard2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandStartMessage_PlainCards::~HandStartMessage_PlainCards() {
  // @@protoc_insertion_point(destructor:HandStartMessage.PlainCards)
  SharedDtor();
}

void HandStartMessage_PlainCards::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HandStartMessage_PlainCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HandStartMessage_PlainCards& HandStartMessage_PlainCards::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

HandStartMessage_PlainCards* HandStartMessage_PlainCards::default_instance_ = NULL;

HandStartMessage_PlainCards* HandStartMessage_PlainCards::New(::google::protobuf::Arena* arena) const {
  HandStartMessage_PlainCards* n = new HandStartMessage_PlainCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HandStartMessage_PlainCards::Clear() {
// @@protoc_insertion_point(message_clear_start:HandStartMessage.PlainCards)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HandStartMessage_PlainCards, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HandStartMessage_PlainCards*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(plaincard1_, plaincard2_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HandStartMessage_PlainCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForHandStartMessage_PlainCards, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:HandStartMessage.PlainCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plainCard1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plaincard1_)));
          set_has_plaincard1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plainCard2;
        break;
      }

      // required uint32 plainCard2 = 2;
      case 2: {
        if (tag == 16) {
         parse_plainCard2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plaincard2_)));
          set_has_plaincard2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HandStartMessage.PlainCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HandStartMessage.PlainCards)
  return false;
#undef DO_
}

void HandStartMessage_PlainCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HandStartMessage.PlainCards)
  // required uint32 plainCard1 = 1;
  if (has_plaincard1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plaincard1(), output);
  }

  // required uint32 plainCard2 = 2;
  if (has_plaincard2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plaincard2(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:HandStartMessage.PlainCards)
}

int HandStartMessage_PlainCards::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HandStartMessage.PlainCards)
  int total_size = 0;

  if (has_plaincard1()) {
    // required uint32 plainCard1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->plaincard1());
  }

  if (has_plaincard2()) {
    // required uint32 plainCard2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->plaincard2());
  }

  return total_size;
}
int HandStartMessage_PlainCards::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HandStartMessage.PlainCards)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 plainCard1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->plaincard1());

    // required uint32 plainCard2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->plaincard2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandStartMessage_PlainCards::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HandStartMessage_PlainCards*>(&from));
}

void HandStartMessage_PlainCards::MergeFrom(const HandStartMessage_PlainCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HandStartMessage.PlainCards)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plaincard1()) {
      set_plaincard1(from.plaincard1());
    }
    if (from.has_plaincard2()) {
      set_plaincard2(from.plaincard2());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void HandStartMessage_PlainCards::CopyFrom(const HandStartMessage_PlainCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HandStartMessage.PlainCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandStartMessage_PlainCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HandStartMessage_PlainCards::Swap(HandStartMessage_PlainCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandStartMessage_PlainCards::InternalSwap(HandStartMessage_PlainCards* other) {
  std::swap(plaincard1_, other->plaincard1_);
  std::swap(plaincard2_, other->plaincard2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HandStartMessage_PlainCards::GetTypeName() const {
  return "HandStartMessage.PlainCards";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HandStartMessage::kGameIdFieldNumber;
const int HandStartMessage::kPlainCardsFieldNumber;
const int HandStartMessage::kEncryptedCardsFieldNumber;
const int HandStartMessage::kSmallBlindFieldNumber;
const int HandStartMessage::kSeatStatesFieldNumber;
const int HandStartMessage::kDealerPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandStartMessage::HandStartMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HandStartMessage)
}

void HandStartMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  plaincards_ = const_cast< ::HandStartMessage_PlainCards*>(
      ::HandStartMessage_PlainCards::internal_default_instance());
#else
  plaincards_ = const_cast< ::HandStartMessage_PlainCards*>(&::HandStartMessage_PlainCards::default_instance());
#endif
}

HandStartMessage::HandStartMessage(const HandStartMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HandStartMessage)
}

void HandStartMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  plaincards_ = NULL;
  encryptedcards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallblind_ = 0u;
  dealerplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandStartMessage::~HandStartMessage() {
  // @@protoc_insertion_point(destructor:HandStartMessage)
  SharedDtor();
}

void HandStartMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptedcards_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete plaincards_;
  }
}

void HandStartMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HandStartMessage& HandStartMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

HandStartMessage* HandStartMessage::default_instance_ = NULL;

HandStartMessage* HandStartMessage::New(::google::protobuf::Arena* arena) const {
  HandStartMessage* n = new HandStartMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HandStartMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HandStartMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HandStartMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HandStartMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 47u) {
    ZR_(gameid_, smallblind_);
    if (has_plaincards()) {
      if (plaincards_ != NULL) plaincards_->::HandStartMessage_PlainCards::Clear();
    }
    if (has_encryptedcards()) {
      encryptedcards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    dealerplayerid_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  seatstates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HandStartMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForHandStartMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:HandStartMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_plainCards;
        break;
      }

      // optional .HandStartMessage.PlainCards plainCards = 2;
      case 2: {
        if (tag == 18) {
         parse_plainCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plaincards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_encryptedCards;
        break;
      }

      // optional bytes encryptedCards = 3;
      case 3: {
        if (tag == 26) {
         parse_encryptedCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryptedcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_smallBlind;
        break;
      }

      // required uint32 smallBlind = 4;
      case 4: {
        if (tag == 32) {
         parse_smallBlind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smallblind_)));
          set_has_smallblind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seatStates;
        break;
      }

      // repeated .NetPlayerState seatStates = 5;
      case 5: {
        if (tag == 40) {
         parse_seatStates:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetPlayerState_IsValid(value)) {
            add_seatstates(static_cast< ::NetPlayerState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 5,
                 ::NetPlayerState_IsValid,
                 &unknown_fields_stream,
                 this->mutable_seatstates())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seatStates;
        if (input->ExpectTag(48)) goto parse_dealerPlayerId;
        break;
      }

      // optional uint32 dealerPlayerId = 6;
      case 6: {
        if (tag == 48) {
         parse_dealerPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealerplayerid_)));
          set_has_dealerplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HandStartMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HandStartMessage)
  return false;
#undef DO_
}

void HandStartMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HandStartMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional .HandStartMessage.PlainCards plainCards = 2;
  if (has_plaincards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->plaincards_, output);
  }

  // optional bytes encryptedCards = 3;
  if (has_encryptedcards()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->encryptedcards(), output);
  }

  // required uint32 smallBlind = 4;
  if (has_smallblind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->smallblind(), output);
  }

  // repeated .NetPlayerState seatStates = 5;
  for (int i = 0; i < this->seatstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->seatstates(i), output);
  }

  // optional uint32 dealerPlayerId = 6;
  if (has_dealerplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dealerplayerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:HandStartMessage)
}

int HandStartMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HandStartMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_smallblind()) {
    // required uint32 smallBlind = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->smallblind());
  }

  return total_size;
}
int HandStartMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HandStartMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 smallBlind = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->smallblind());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 38u) {
    // optional .HandStartMessage.PlainCards plainCards = 2;
    if (has_plaincards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->plaincards_);
    }

    // optional bytes encryptedCards = 3;
    if (has_encryptedcards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryptedcards());
    }

    // optional uint32 dealerPlayerId = 6;
    if (has_dealerplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dealerplayerid());
    }

  }
  // repeated .NetPlayerState seatStates = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->seatstates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->seatstates(i));
    }
    total_size += 1 * this->seatstates_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandStartMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HandStartMessage*>(&from));
}

void HandStartMessage::MergeFrom(const HandStartMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HandStartMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  seatstates_.MergeFrom(from.seatstates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_plaincards()) {
      mutable_plaincards()->::HandStartMessage_PlainCards::MergeFrom(from.plaincards());
    }
    if (from.has_encryptedcards()) {
      set_has_encryptedcards();
      encryptedcards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryptedcards_);
    }
    if (from.has_smallblind()) {
      set_smallblind(from.smallblind());
    }
    if (from.has_dealerplayerid()) {
      set_dealerplayerid(from.dealerplayerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void HandStartMessage::CopyFrom(const HandStartMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HandStartMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandStartMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_plaincards()) {
    if (!this->plaincards_->IsInitialized()) return false;
  }
  return true;
}

void HandStartMessage::Swap(HandStartMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandStartMessage::InternalSwap(HandStartMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(plaincards_, other->plaincards_);
  encryptedcards_.Swap(&other->encryptedcards_);
  std::swap(smallblind_, other->smallblind_);
  seatstates_.UnsafeArenaSwap(&other->seatstates_);
  std::swap(dealerplayerid_, other->dealerplayerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HandStartMessage::GetTypeName() const {
  return "HandStartMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HandStartMessage_PlainCards

// required uint32 plainCard1 = 1;
bool HandStartMessage_PlainCards::has_plaincard1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HandStartMessage_PlainCards::set_has_plaincard1() {
  _has_bits_[0] |= 0x00000001u;
}
void HandStartMessage_PlainCards::clear_has_plaincard1() {
  _has_bits_[0] &= ~0x00000001u;
}
void HandStartMessage_PlainCards::clear_plaincard1() {
  plaincard1_ = 0u;
  clear_has_plaincard1();
}
 ::google::protobuf::uint32 HandStartMessage_PlainCards::plaincard1() const {
  // @@protoc_insertion_point(field_get:HandStartMessage.PlainCards.plainCard1)
  return plaincard1_;
}
 void HandStartMessage_PlainCards::set_plaincard1(::google::protobuf::uint32 value) {
  set_has_plaincard1();
  plaincard1_ = value;
  // @@protoc_insertion_point(field_set:HandStartMessage.PlainCards.plainCard1)
}

// required uint32 plainCard2 = 2;
bool HandStartMessage_PlainCards::has_plaincard2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HandStartMessage_PlainCards::set_has_plaincard2() {
  _has_bits_[0] |= 0x00000002u;
}
void HandStartMessage_PlainCards::clear_has_plaincard2() {
  _has_bits_[0] &= ~0x00000002u;
}
void HandStartMessage_PlainCards::clear_plaincard2() {
  plaincard2_ = 0u;
  clear_has_plaincard2();
}
 ::google::protobuf::uint32 HandStartMessage_PlainCards::plaincard2() const {
  // @@protoc_insertion_point(field_get:HandStartMessage.PlainCards.plainCard2)
  return plaincard2_;
}
 void HandStartMessage_PlainCards::set_plaincard2(::google::protobuf::uint32 value) {
  set_has_plaincard2();
  plaincard2_ = value;
  // @@protoc_insertion_point(field_set:HandStartMessage.PlainCards.plainCard2)
}

// -------------------------------------------------------------------

// HandStartMessage

// required uint32 gameId = 1;
bool HandStartMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HandStartMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void HandStartMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void HandStartMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 HandStartMessage::gameid() const {
  // @@protoc_insertion_point(field_get:HandStartMessage.gameId)
  return gameid_;
}
 void HandStartMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:HandStartMessage.gameId)
}

// optional .HandStartMessage.PlainCards plainCards = 2;
bool HandStartMessage::has_plaincards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HandStartMessage::set_has_plaincards() {
  _has_bits_[0] |= 0x00000002u;
}
void HandStartMessage::clear_has_plaincards() {
  _has_bits_[0] &= ~0x00000002u;
}
void HandStartMessage::clear_plaincards() {
  if (plaincards_ != NULL) plaincards_->::HandStartMessage_PlainCards::Clear();
  clear_has_plaincards();
}
const ::HandStartMessage_PlainCards& HandStartMessage::plaincards() const {
  // @@protoc_insertion_point(field_get:HandStartMessage.plainCards)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return plaincards_ != NULL ? *plaincards_ : *default_instance().plaincards_;
#else
  return plaincards_ != NULL ? *plaincards_ : *default_instance_->plaincards_;
#endif
}
::HandStartMessage_PlainCards* HandStartMessage::mutable_plaincards() {
  set_has_plaincards();
  if (plaincards_ == NULL) {
    plaincards_ = new ::HandStartMessage_PlainCards;
  }
  // @@protoc_insertion_point(field_mutable:HandStartMessage.plainCards)
  return plaincards_;
}
::HandStartMessage_PlainCards* HandStartMessage::release_plaincards() {
  // @@protoc_insertion_point(field_release:HandStartMessage.plainCards)
  clear_has_plaincards();
  ::HandStartMessage_PlainCards* temp = plaincards_;
  plaincards_ = NULL;
  return temp;
}
void HandStartMessage::set_allocated_plaincards(::HandStartMessage_PlainCards* plaincards) {
  delete plaincards_;
  plaincards_ = plaincards;
  if (plaincards) {
    set_has_plaincards();
  } else {
    clear_has_plaincards();
  }
  // @@protoc_insertion_point(field_set_allocated:HandStartMessage.plainCards)
}

// optional bytes encryptedCards = 3;
bool HandStartMessage::has_encryptedcards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HandStartMessage::set_has_encryptedcards() {
  _has_bits_[0] |= 0x00000004u;
}
void HandStartMessage::clear_has_encryptedcards() {
  _has_bits_[0] &= ~0x00000004u;
}
void HandStartMessage::clear_encryptedcards() {
  encryptedcards_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encryptedcards();
}
 const ::std::string& HandStartMessage::encryptedcards() const {
  // @@protoc_insertion_point(field_get:HandStartMessage.encryptedCards)
  return encryptedcards_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HandStartMessage::set_encryptedcards(const ::std::string& value) {
  set_has_encryptedcards();
  encryptedcards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HandStartMessage.encryptedCards)
}
 void HandStartMessage::set_encryptedcards(const char* value) {
  set_has_encryptedcards();
  encryptedcards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HandStartMessage.encryptedCards)
}
 void HandStartMessage::set_encryptedcards(const void* value, size_t size) {
  set_has_encryptedcards();
  encryptedcards_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HandStartMessage.encryptedCards)
}
 ::std::string* HandStartMessage::mutable_encryptedcards() {
  set_has_encryptedcards();
  // @@protoc_insertion_point(field_mutable:HandStartMessage.encryptedCards)
  return encryptedcards_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HandStartMessage::release_encryptedcards() {
  // @@protoc_insertion_point(field_release:HandStartMessage.encryptedCards)
  clear_has_encryptedcards();
  return encryptedcards_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HandStartMessage::set_allocated_encryptedcards(::std::string* encryptedcards) {
  if (encryptedcards != NULL) {
    set_has_encryptedcards();
  } else {
    clear_has_encryptedcards();
  }
  encryptedcards_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryptedcards);
  // @@protoc_insertion_point(field_set_allocated:HandStartMessage.encryptedCards)
}

// required uint32 smallBlind = 4;
bool HandStartMessage::has_smallblind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HandStartMessage::set_has_smallblind() {
  _has_bits_[0] |= 0x00000008u;
}
void HandStartMessage::clear_has_smallblind() {
  _has_bits_[0] &= ~0x00000008u;
}
void HandStartMessage::clear_smallblind() {
  smallblind_ = 0u;
  clear_has_smallblind();
}
 ::google::protobuf::uint32 HandStartMessage::smallblind() const {
  // @@protoc_insertion_point(field_get:HandStartMessage.smallBlind)
  return smallblind_;
}
 void HandStartMessage::set_smallblind(::google::protobuf::uint32 value) {
  set_has_smallblind();
  smallblind_ = value;
  // @@protoc_insertion_point(field_set:HandStartMessage.smallBlind)
}

// repeated .NetPlayerState seatStates = 5;
int HandStartMessage::seatstates_size() const {
  return seatstates_.size();
}
void HandStartMessage::clear_seatstates() {
  seatstates_.Clear();
}
 ::NetPlayerState HandStartMessage::seatstates(int index) const {
  // @@protoc_insertion_point(field_get:HandStartMessage.seatStates)
  return static_cast< ::NetPlayerState >(seatstates_.Get(index));
}
 void HandStartMessage::set_seatstates(int index, ::NetPlayerState value) {
  assert(::NetPlayerState_IsValid(value));
  seatstates_.Set(index, value);
  // @@protoc_insertion_point(field_set:HandStartMessage.seatStates)
}
 void HandStartMessage::add_seatstates(::NetPlayerState value) {
  assert(::NetPlayerState_IsValid(value));
  seatstates_.Add(value);
  // @@protoc_insertion_point(field_add:HandStartMessage.seatStates)
}
 const ::google::protobuf::RepeatedField<int>&
HandStartMessage::seatstates() const {
  // @@protoc_insertion_point(field_list:HandStartMessage.seatStates)
  return seatstates_;
}
 ::google::protobuf::RepeatedField<int>*
HandStartMessage::mutable_seatstates() {
  // @@protoc_insertion_point(field_mutable_list:HandStartMessage.seatStates)
  return &seatstates_;
}

// optional uint32 dealerPlayerId = 6;
bool HandStartMessage::has_dealerplayerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HandStartMessage::set_has_dealerplayerid() {
  _has_bits_[0] |= 0x00000020u;
}
void HandStartMessage::clear_has_dealerplayerid() {
  _has_bits_[0] &= ~0x00000020u;
}
void HandStartMessage::clear_dealerplayerid() {
  dealerplayerid_ = 0u;
  clear_has_dealerplayerid();
}
 ::google::protobuf::uint32 HandStartMessage::dealerplayerid() const {
  // @@protoc_insertion_point(field_get:HandStartMessage.dealerPlayerId)
  return dealerplayerid_;
}
 void HandStartMessage::set_dealerplayerid(::google::protobuf::uint32 value) {
  set_has_dealerplayerid();
  dealerplayerid_ = value;
  // @@protoc_insertion_point(field_set:HandStartMessage.dealerPlayerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPlayersTurnMessage(
    PlayersTurnMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayersTurnMessage::kGameIdFieldNumber;
const int PlayersTurnMessage::kPlayerIdFieldNumber;
const int PlayersTurnMessage::kGameStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayersTurnMessage::PlayersTurnMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayersTurnMessage)
}

void PlayersTurnMessage::InitAsDefaultInstance() {
}

PlayersTurnMessage::PlayersTurnMessage(const PlayersTurnMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayersTurnMessage)
}

void PlayersTurnMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  gamestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayersTurnMessage::~PlayersTurnMessage() {
  // @@protoc_insertion_point(destructor:PlayersTurnMessage)
  SharedDtor();
}

void PlayersTurnMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayersTurnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayersTurnMessage& PlayersTurnMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

PlayersTurnMessage* PlayersTurnMessage::default_instance_ = NULL;

PlayersTurnMessage* PlayersTurnMessage::New(::google::protobuf::Arena* arena) const {
  PlayersTurnMessage* n = new PlayersTurnMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayersTurnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayersTurnMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayersTurnMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayersTurnMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, gamestate_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlayersTurnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPlayersTurnMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PlayersTurnMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameState;
        break;
      }

      // required .NetGameState gameState = 3;
      case 3: {
        if (tag == 24) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameState_IsValid(value)) {
            set_gamestate(static_cast< ::NetGameState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayersTurnMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayersTurnMessage)
  return false;
#undef DO_
}

void PlayersTurnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayersTurnMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .NetGameState gameState = 3;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamestate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayersTurnMessage)
}

int PlayersTurnMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayersTurnMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_gamestate()) {
    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
  }

  return total_size;
}
int PlayersTurnMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayersTurnMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayersTurnMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayersTurnMessage*>(&from));
}

void PlayersTurnMessage::MergeFrom(const PlayersTurnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayersTurnMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PlayersTurnMessage::CopyFrom(const PlayersTurnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayersTurnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayersTurnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlayersTurnMessage::Swap(PlayersTurnMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayersTurnMessage::InternalSwap(PlayersTurnMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(gamestate_, other->gamestate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayersTurnMessage::GetTypeName() const {
  return "PlayersTurnMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayersTurnMessage

// required uint32 gameId = 1;
bool PlayersTurnMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayersTurnMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayersTurnMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayersTurnMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 PlayersTurnMessage::gameid() const {
  // @@protoc_insertion_point(field_get:PlayersTurnMessage.gameId)
  return gameid_;
}
 void PlayersTurnMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:PlayersTurnMessage.gameId)
}

// required uint32 playerId = 2;
bool PlayersTurnMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayersTurnMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayersTurnMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayersTurnMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 PlayersTurnMessage::playerid() const {
  // @@protoc_insertion_point(field_get:PlayersTurnMessage.playerId)
  return playerid_;
}
 void PlayersTurnMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:PlayersTurnMessage.playerId)
}

// required .NetGameState gameState = 3;
bool PlayersTurnMessage::has_gamestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayersTurnMessage::set_has_gamestate() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayersTurnMessage::clear_has_gamestate() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayersTurnMessage::clear_gamestate() {
  gamestate_ = 0;
  clear_has_gamestate();
}
 ::NetGameState PlayersTurnMessage::gamestate() const {
  // @@protoc_insertion_point(field_get:PlayersTurnMessage.gameState)
  return static_cast< ::NetGameState >(gamestate_);
}
 void PlayersTurnMessage::set_gamestate(::NetGameState value) {
  assert(::NetGameState_IsValid(value));
  set_has_gamestate();
  gamestate_ = value;
  // @@protoc_insertion_point(field_set:PlayersTurnMessage.gameState)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForMyActionRequestMessage(
    MyActionRequestMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyActionRequestMessage::kGameIdFieldNumber;
const int MyActionRequestMessage::kHandNumFieldNumber;
const int MyActionRequestMessage::kGameStateFieldNumber;
const int MyActionRequestMessage::kMyActionFieldNumber;
const int MyActionRequestMessage::kMyRelativeBetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyActionRequestMessage::MyActionRequestMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyActionRequestMessage)
}

void MyActionRequestMessage::InitAsDefaultInstance() {
}

MyActionRequestMessage::MyActionRequestMessage(const MyActionRequestMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyActionRequestMessage)
}

void MyActionRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  handnum_ = 0u;
  gamestate_ = 0;
  myaction_ = 0;
  myrelativebet_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyActionRequestMessage::~MyActionRequestMessage() {
  // @@protoc_insertion_point(destructor:MyActionRequestMessage)
  SharedDtor();
}

void MyActionRequestMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MyActionRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MyActionRequestMessage& MyActionRequestMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

MyActionRequestMessage* MyActionRequestMessage::default_instance_ = NULL;

MyActionRequestMessage* MyActionRequestMessage::New(::google::protobuf::Arena* arena) const {
  MyActionRequestMessage* n = new MyActionRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyActionRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MyActionRequestMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MyActionRequestMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MyActionRequestMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(gameid_, myrelativebet_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MyActionRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForMyActionRequestMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:MyActionRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handNum;
        break;
      }

      // required uint32 handNum = 2;
      case 2: {
        if (tag == 16) {
         parse_handNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handnum_)));
          set_has_handnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameState;
        break;
      }

      // required .NetGameState gameState = 3;
      case 3: {
        if (tag == 24) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameState_IsValid(value)) {
            set_gamestate(static_cast< ::NetGameState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_myAction;
        break;
      }

      // required .NetPlayerAction myAction = 4;
      case 4: {
        if (tag == 32) {
         parse_myAction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetPlayerAction_IsValid(value)) {
            set_myaction(static_cast< ::NetPlayerAction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_myRelativeBet;
        break;
      }

      // required uint32 myRelativeBet = 5;
      case 5: {
        if (tag == 40) {
         parse_myRelativeBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrelativebet_)));
          set_has_myrelativebet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyActionRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyActionRequestMessage)
  return false;
#undef DO_
}

void MyActionRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyActionRequestMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 handNum = 2;
  if (has_handnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->handnum(), output);
  }

  // required .NetGameState gameState = 3;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamestate(), output);
  }

  // required .NetPlayerAction myAction = 4;
  if (has_myaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->myaction(), output);
  }

  // required uint32 myRelativeBet = 5;
  if (has_myrelativebet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->myrelativebet(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:MyActionRequestMessage)
}

int MyActionRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MyActionRequestMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_handnum()) {
    // required uint32 handNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->handnum());
  }

  if (has_gamestate()) {
    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
  }

  if (has_myaction()) {
    // required .NetPlayerAction myAction = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->myaction());
  }

  if (has_myrelativebet()) {
    // required uint32 myRelativeBet = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->myrelativebet());
  }

  return total_size;
}
int MyActionRequestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyActionRequestMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 handNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->handnum());

    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());

    // required .NetPlayerAction myAction = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->myaction());

    // required uint32 myRelativeBet = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->myrelativebet());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyActionRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MyActionRequestMessage*>(&from));
}

void MyActionRequestMessage::MergeFrom(const MyActionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyActionRequestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_handnum()) {
      set_handnum(from.handnum());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
    if (from.has_myaction()) {
      set_myaction(from.myaction());
    }
    if (from.has_myrelativebet()) {
      set_myrelativebet(from.myrelativebet());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void MyActionRequestMessage::CopyFrom(const MyActionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyActionRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyActionRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MyActionRequestMessage::Swap(MyActionRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyActionRequestMessage::InternalSwap(MyActionRequestMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(handnum_, other->handnum_);
  std::swap(gamestate_, other->gamestate_);
  std::swap(myaction_, other->myaction_);
  std::swap(myrelativebet_, other->myrelativebet_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MyActionRequestMessage::GetTypeName() const {
  return "MyActionRequestMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyActionRequestMessage

// required uint32 gameId = 1;
bool MyActionRequestMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MyActionRequestMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void MyActionRequestMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MyActionRequestMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 MyActionRequestMessage::gameid() const {
  // @@protoc_insertion_point(field_get:MyActionRequestMessage.gameId)
  return gameid_;
}
 void MyActionRequestMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:MyActionRequestMessage.gameId)
}

// required uint32 handNum = 2;
bool MyActionRequestMessage::has_handnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MyActionRequestMessage::set_has_handnum() {
  _has_bits_[0] |= 0x00000002u;
}
void MyActionRequestMessage::clear_has_handnum() {
  _has_bits_[0] &= ~0x00000002u;
}
void MyActionRequestMessage::clear_handnum() {
  handnum_ = 0u;
  clear_has_handnum();
}
 ::google::protobuf::uint32 MyActionRequestMessage::handnum() const {
  // @@protoc_insertion_point(field_get:MyActionRequestMessage.handNum)
  return handnum_;
}
 void MyActionRequestMessage::set_handnum(::google::protobuf::uint32 value) {
  set_has_handnum();
  handnum_ = value;
  // @@protoc_insertion_point(field_set:MyActionRequestMessage.handNum)
}

// required .NetGameState gameState = 3;
bool MyActionRequestMessage::has_gamestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MyActionRequestMessage::set_has_gamestate() {
  _has_bits_[0] |= 0x00000004u;
}
void MyActionRequestMessage::clear_has_gamestate() {
  _has_bits_[0] &= ~0x00000004u;
}
void MyActionRequestMessage::clear_gamestate() {
  gamestate_ = 0;
  clear_has_gamestate();
}
 ::NetGameState MyActionRequestMessage::gamestate() const {
  // @@protoc_insertion_point(field_get:MyActionRequestMessage.gameState)
  return static_cast< ::NetGameState >(gamestate_);
}
 void MyActionRequestMessage::set_gamestate(::NetGameState value) {
  assert(::NetGameState_IsValid(value));
  set_has_gamestate();
  gamestate_ = value;
  // @@protoc_insertion_point(field_set:MyActionRequestMessage.gameState)
}

// required .NetPlayerAction myAction = 4;
bool MyActionRequestMessage::has_myaction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MyActionRequestMessage::set_has_myaction() {
  _has_bits_[0] |= 0x00000008u;
}
void MyActionRequestMessage::clear_has_myaction() {
  _has_bits_[0] &= ~0x00000008u;
}
void MyActionRequestMessage::clear_myaction() {
  myaction_ = 0;
  clear_has_myaction();
}
 ::NetPlayerAction MyActionRequestMessage::myaction() const {
  // @@protoc_insertion_point(field_get:MyActionRequestMessage.myAction)
  return static_cast< ::NetPlayerAction >(myaction_);
}
 void MyActionRequestMessage::set_myaction(::NetPlayerAction value) {
  assert(::NetPlayerAction_IsValid(value));
  set_has_myaction();
  myaction_ = value;
  // @@protoc_insertion_point(field_set:MyActionRequestMessage.myAction)
}

// required uint32 myRelativeBet = 5;
bool MyActionRequestMessage::has_myrelativebet() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MyActionRequestMessage::set_has_myrelativebet() {
  _has_bits_[0] |= 0x00000010u;
}
void MyActionRequestMessage::clear_has_myrelativebet() {
  _has_bits_[0] &= ~0x00000010u;
}
void MyActionRequestMessage::clear_myrelativebet() {
  myrelativebet_ = 0u;
  clear_has_myrelativebet();
}
 ::google::protobuf::uint32 MyActionRequestMessage::myrelativebet() const {
  // @@protoc_insertion_point(field_get:MyActionRequestMessage.myRelativeBet)
  return myrelativebet_;
}
 void MyActionRequestMessage::set_myrelativebet(::google::protobuf::uint32 value) {
  set_has_myrelativebet();
  myrelativebet_ = value;
  // @@protoc_insertion_point(field_set:MyActionRequestMessage.myRelativeBet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForYourActionRejectedMessage(
    YourActionRejectedMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool YourActionRejectedMessage_RejectionReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedInvalidGameState;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedNotYourTurn;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedActionNotAllowed;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::RejectionReason_MIN;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::RejectionReason_MAX;
const int YourActionRejectedMessage::RejectionReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YourActionRejectedMessage::kGameIdFieldNumber;
const int YourActionRejectedMessage::kGameStateFieldNumber;
const int YourActionRejectedMessage::kYourActionFieldNumber;
const int YourActionRejectedMessage::kYourRelativeBetFieldNumber;
const int YourActionRejectedMessage::kRejectionReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YourActionRejectedMessage::YourActionRejectedMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YourActionRejectedMessage)
}

void YourActionRejectedMessage::InitAsDefaultInstance() {
}

YourActionRejectedMessage::YourActionRejectedMessage(const YourActionRejectedMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YourActionRejectedMessage)
}

void YourActionRejectedMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  gamestate_ = 0;
  youraction_ = 0;
  yourrelativebet_ = 0u;
  rejectionreason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YourActionRejectedMessage::~YourActionRejectedMessage() {
  // @@protoc_insertion_point(destructor:YourActionRejectedMessage)
  SharedDtor();
}

void YourActionRejectedMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YourActionRejectedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YourActionRejectedMessage& YourActionRejectedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

YourActionRejectedMessage* YourActionRejectedMessage::default_instance_ = NULL;

YourActionRejectedMessage* YourActionRejectedMessage::New(::google::protobuf::Arena* arena) const {
  YourActionRejectedMessage* n = new YourActionRejectedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YourActionRejectedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:YourActionRejectedMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(YourActionRejectedMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YourActionRejectedMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(gameid_, yourrelativebet_);
    rejectionreason_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YourActionRejectedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForYourActionRejectedMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:YourActionRejectedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameState;
        break;
      }

      // required .NetGameState gameState = 2;
      case 2: {
        if (tag == 16) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameState_IsValid(value)) {
            set_gamestate(static_cast< ::NetGameState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_yourAction;
        break;
      }

      // required .NetPlayerAction yourAction = 3;
      case 3: {
        if (tag == 24) {
         parse_yourAction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetPlayerAction_IsValid(value)) {
            set_youraction(static_cast< ::NetPlayerAction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_yourRelativeBet;
        break;
      }

      // required uint32 yourRelativeBet = 4;
      case 4: {
        if (tag == 32) {
         parse_yourRelativeBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yourrelativebet_)));
          set_has_yourrelativebet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rejectionReason;
        break;
      }

      // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
      case 5: {
        if (tag == 40) {
         parse_rejectionReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YourActionRejectedMessage_RejectionReason_IsValid(value)) {
            set_rejectionreason(static_cast< ::YourActionRejectedMessage_RejectionReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YourActionRejectedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YourActionRejectedMessage)
  return false;
#undef DO_
}

void YourActionRejectedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YourActionRejectedMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .NetGameState gameState = 2;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gamestate(), output);
  }

  // required .NetPlayerAction yourAction = 3;
  if (has_youraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->youraction(), output);
  }

  // required uint32 yourRelativeBet = 4;
  if (has_yourrelativebet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->yourrelativebet(), output);
  }

  // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
  if (has_rejectionreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->rejectionreason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:YourActionRejectedMessage)
}

int YourActionRejectedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:YourActionRejectedMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_gamestate()) {
    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
  }

  if (has_youraction()) {
    // required .NetPlayerAction yourAction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->youraction());
  }

  if (has_yourrelativebet()) {
    // required uint32 yourRelativeBet = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yourrelativebet());
  }

  if (has_rejectionreason()) {
    // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rejectionreason());
  }

  return total_size;
}
int YourActionRejectedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:YourActionRejectedMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());

    // required .NetPlayerAction yourAction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->youraction());

    // required uint32 yourRelativeBet = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yourrelativebet());

    // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rejectionreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YourActionRejectedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const YourActionRejectedMessage*>(&from));
}

void YourActionRejectedMessage::MergeFrom(const YourActionRejectedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YourActionRejectedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
    if (from.has_youraction()) {
      set_youraction(from.youraction());
    }
    if (from.has_yourrelativebet()) {
      set_yourrelativebet(from.yourrelativebet());
    }
    if (from.has_rejectionreason()) {
      set_rejectionreason(from.rejectionreason());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void YourActionRejectedMessage::CopyFrom(const YourActionRejectedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YourActionRejectedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YourActionRejectedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void YourActionRejectedMessage::Swap(YourActionRejectedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YourActionRejectedMessage::InternalSwap(YourActionRejectedMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(gamestate_, other->gamestate_);
  std::swap(youraction_, other->youraction_);
  std::swap(yourrelativebet_, other->yourrelativebet_);
  std::swap(rejectionreason_, other->rejectionreason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YourActionRejectedMessage::GetTypeName() const {
  return "YourActionRejectedMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YourActionRejectedMessage

// required uint32 gameId = 1;
bool YourActionRejectedMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YourActionRejectedMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void YourActionRejectedMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void YourActionRejectedMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 YourActionRejectedMessage::gameid() const {
  // @@protoc_insertion_point(field_get:YourActionRejectedMessage.gameId)
  return gameid_;
}
 void YourActionRejectedMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:YourActionRejectedMessage.gameId)
}

// required .NetGameState gameState = 2;
bool YourActionRejectedMessage::has_gamestate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YourActionRejectedMessage::set_has_gamestate() {
  _has_bits_[0] |= 0x00000002u;
}
void YourActionRejectedMessage::clear_has_gamestate() {
  _has_bits_[0] &= ~0x00000002u;
}
void YourActionRejectedMessage::clear_gamestate() {
  gamestate_ = 0;
  clear_has_gamestate();
}
 ::NetGameState YourActionRejectedMessage::gamestate() const {
  // @@protoc_insertion_point(field_get:YourActionRejectedMessage.gameState)
  return static_cast< ::NetGameState >(gamestate_);
}
 void YourActionRejectedMessage::set_gamestate(::NetGameState value) {
  assert(::NetGameState_IsValid(value));
  set_has_gamestate();
  gamestate_ = value;
  // @@protoc_insertion_point(field_set:YourActionRejectedMessage.gameState)
}

// required .NetPlayerAction yourAction = 3;
bool YourActionRejectedMessage::has_youraction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YourActionRejectedMessage::set_has_youraction() {
  _has_bits_[0] |= 0x00000004u;
}
void YourActionRejectedMessage::clear_has_youraction() {
  _has_bits_[0] &= ~0x00000004u;
}
void YourActionRejectedMessage::clear_youraction() {
  youraction_ = 0;
  clear_has_youraction();
}
 ::NetPlayerAction YourActionRejectedMessage::youraction() const {
  // @@protoc_insertion_point(field_get:YourActionRejectedMessage.yourAction)
  return static_cast< ::NetPlayerAction >(youraction_);
}
 void YourActionRejectedMessage::set_youraction(::NetPlayerAction value) {
  assert(::NetPlayerAction_IsValid(value));
  set_has_youraction();
  youraction_ = value;
  // @@protoc_insertion_point(field_set:YourActionRejectedMessage.yourAction)
}

// required uint32 yourRelativeBet = 4;
bool YourActionRejectedMessage::has_yourrelativebet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YourActionRejectedMessage::set_has_yourrelativebet() {
  _has_bits_[0] |= 0x00000008u;
}
void YourActionRejectedMessage::clear_has_yourrelativebet() {
  _has_bits_[0] &= ~0x00000008u;
}
void YourActionRejectedMessage::clear_yourrelativebet() {
  yourrelativebet_ = 0u;
  clear_has_yourrelativebet();
}
 ::google::protobuf::uint32 YourActionRejectedMessage::yourrelativebet() const {
  // @@protoc_insertion_point(field_get:YourActionRejectedMessage.yourRelativeBet)
  return yourrelativebet_;
}
 void YourActionRejectedMessage::set_yourrelativebet(::google::protobuf::uint32 value) {
  set_has_yourrelativebet();
  yourrelativebet_ = value;
  // @@protoc_insertion_point(field_set:YourActionRejectedMessage.yourRelativeBet)
}

// required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
bool YourActionRejectedMessage::has_rejectionreason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YourActionRejectedMessage::set_has_rejectionreason() {
  _has_bits_[0] |= 0x00000010u;
}
void YourActionRejectedMessage::clear_has_rejectionreason() {
  _has_bits_[0] &= ~0x00000010u;
}
void YourActionRejectedMessage::clear_rejectionreason() {
  rejectionreason_ = 1;
  clear_has_rejectionreason();
}
 ::YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectionreason() const {
  // @@protoc_insertion_point(field_get:YourActionRejectedMessage.rejectionReason)
  return static_cast< ::YourActionRejectedMessage_RejectionReason >(rejectionreason_);
}
 void YourActionRejectedMessage::set_rejectionreason(::YourActionRejectedMessage_RejectionReason value) {
  assert(::YourActionRejectedMessage_RejectionReason_IsValid(value));
  set_has_rejectionreason();
  rejectionreason_ = value;
  // @@protoc_insertion_point(field_set:YourActionRejectedMessage.rejectionReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPlayersActionDoneMessage(
    PlayersActionDoneMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayersActionDoneMessage::kGameIdFieldNumber;
const int PlayersActionDoneMessage::kPlayerIdFieldNumber;
const int PlayersActionDoneMessage::kGameStateFieldNumber;
const int PlayersActionDoneMessage::kPlayerActionFieldNumber;
const int PlayersActionDoneMessage::kTotalPlayerBetFieldNumber;
const int PlayersActionDoneMessage::kPlayerMoneyFieldNumber;
const int PlayersActionDoneMessage::kHighestSetFieldNumber;
const int PlayersActionDoneMessage::kMinimumRaiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayersActionDoneMessage::PlayersActionDoneMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayersActionDoneMessage)
}

void PlayersActionDoneMessage::InitAsDefaultInstance() {
}

PlayersActionDoneMessage::PlayersActionDoneMessage(const PlayersActionDoneMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayersActionDoneMessage)
}

void PlayersActionDoneMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  gamestate_ = 0;
  playeraction_ = 0;
  totalplayerbet_ = 0u;
  playermoney_ = 0u;
  highestset_ = 0u;
  minimumraise_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayersActionDoneMessage::~PlayersActionDoneMessage() {
  // @@protoc_insertion_point(destructor:PlayersActionDoneMessage)
  SharedDtor();
}

void PlayersActionDoneMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayersActionDoneMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayersActionDoneMessage& PlayersActionDoneMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

PlayersActionDoneMessage* PlayersActionDoneMessage::default_instance_ = NULL;

PlayersActionDoneMessage* PlayersActionDoneMessage::New(::google::protobuf::Arena* arena) const {
  PlayersActionDoneMessage* n = new PlayersActionDoneMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayersActionDoneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayersActionDoneMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayersActionDoneMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayersActionDoneMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(gameid_, minimumraise_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlayersActionDoneMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPlayersActionDoneMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PlayersActionDoneMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameState;
        break;
      }

      // required .NetGameState gameState = 3;
      case 3: {
        if (tag == 24) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameState_IsValid(value)) {
            set_gamestate(static_cast< ::NetGameState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerAction;
        break;
      }

      // required .NetPlayerAction playerAction = 4;
      case 4: {
        if (tag == 32) {
         parse_playerAction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetPlayerAction_IsValid(value)) {
            set_playeraction(static_cast< ::NetPlayerAction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_totalPlayerBet;
        break;
      }

      // required uint32 totalPlayerBet = 5;
      case 5: {
        if (tag == 40) {
         parse_totalPlayerBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalplayerbet_)));
          set_has_totalplayerbet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_playerMoney;
        break;
      }

      // required uint32 playerMoney = 6;
      case 6: {
        if (tag == 48) {
         parse_playerMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
          set_has_playermoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_highestSet;
        break;
      }

      // required uint32 highestSet = 7;
      case 7: {
        if (tag == 56) {
         parse_highestSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highestset_)));
          set_has_highestset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_minimumRaise;
        break;
      }

      // required uint32 minimumRaise = 8;
      case 8: {
        if (tag == 64) {
         parse_minimumRaise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minimumraise_)));
          set_has_minimumraise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayersActionDoneMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayersActionDoneMessage)
  return false;
#undef DO_
}

void PlayersActionDoneMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayersActionDoneMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .NetGameState gameState = 3;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamestate(), output);
  }

  // required .NetPlayerAction playerAction = 4;
  if (has_playeraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->playeraction(), output);
  }

  // required uint32 totalPlayerBet = 5;
  if (has_totalplayerbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totalplayerbet(), output);
  }

  // required uint32 playerMoney = 6;
  if (has_playermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playermoney(), output);
  }

  // required uint32 highestSet = 7;
  if (has_highestset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->highestset(), output);
  }

  // required uint32 minimumRaise = 8;
  if (has_minimumraise()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->minimumraise(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayersActionDoneMessage)
}

int PlayersActionDoneMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayersActionDoneMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_gamestate()) {
    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
  }

  if (has_playeraction()) {
    // required .NetPlayerAction playerAction = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playeraction());
  }

  if (has_totalplayerbet()) {
    // required uint32 totalPlayerBet = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalplayerbet());
  }

  if (has_playermoney()) {
    // required uint32 playerMoney = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());
  }

  if (has_highestset()) {
    // required uint32 highestSet = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->highestset());
  }

  if (has_minimumraise()) {
    // required uint32 minimumRaise = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minimumraise());
  }

  return total_size;
}
int PlayersActionDoneMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayersActionDoneMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());

    // required .NetPlayerAction playerAction = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playeraction());

    // required uint32 totalPlayerBet = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalplayerbet());

    // required uint32 playerMoney = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());

    // required uint32 highestSet = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->highestset());

    // required uint32 minimumRaise = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minimumraise());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayersActionDoneMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayersActionDoneMessage*>(&from));
}

void PlayersActionDoneMessage::MergeFrom(const PlayersActionDoneMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayersActionDoneMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
    if (from.has_playeraction()) {
      set_playeraction(from.playeraction());
    }
    if (from.has_totalplayerbet()) {
      set_totalplayerbet(from.totalplayerbet());
    }
    if (from.has_playermoney()) {
      set_playermoney(from.playermoney());
    }
    if (from.has_highestset()) {
      set_highestset(from.highestset());
    }
    if (from.has_minimumraise()) {
      set_minimumraise(from.minimumraise());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PlayersActionDoneMessage::CopyFrom(const PlayersActionDoneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayersActionDoneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayersActionDoneMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void PlayersActionDoneMessage::Swap(PlayersActionDoneMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayersActionDoneMessage::InternalSwap(PlayersActionDoneMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(gamestate_, other->gamestate_);
  std::swap(playeraction_, other->playeraction_);
  std::swap(totalplayerbet_, other->totalplayerbet_);
  std::swap(playermoney_, other->playermoney_);
  std::swap(highestset_, other->highestset_);
  std::swap(minimumraise_, other->minimumraise_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayersActionDoneMessage::GetTypeName() const {
  return "PlayersActionDoneMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayersActionDoneMessage

// required uint32 gameId = 1;
bool PlayersActionDoneMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayersActionDoneMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayersActionDoneMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayersActionDoneMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 PlayersActionDoneMessage::gameid() const {
  // @@protoc_insertion_point(field_get:PlayersActionDoneMessage.gameId)
  return gameid_;
}
 void PlayersActionDoneMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:PlayersActionDoneMessage.gameId)
}

// required uint32 playerId = 2;
bool PlayersActionDoneMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayersActionDoneMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayersActionDoneMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayersActionDoneMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 PlayersActionDoneMessage::playerid() const {
  // @@protoc_insertion_point(field_get:PlayersActionDoneMessage.playerId)
  return playerid_;
}
 void PlayersActionDoneMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:PlayersActionDoneMessage.playerId)
}

// required .NetGameState gameState = 3;
bool PlayersActionDoneMessage::has_gamestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayersActionDoneMessage::set_has_gamestate() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayersActionDoneMessage::clear_has_gamestate() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayersActionDoneMessage::clear_gamestate() {
  gamestate_ = 0;
  clear_has_gamestate();
}
 ::NetGameState PlayersActionDoneMessage::gamestate() const {
  // @@protoc_insertion_point(field_get:PlayersActionDoneMessage.gameState)
  return static_cast< ::NetGameState >(gamestate_);
}
 void PlayersActionDoneMessage::set_gamestate(::NetGameState value) {
  assert(::NetGameState_IsValid(value));
  set_has_gamestate();
  gamestate_ = value;
  // @@protoc_insertion_point(field_set:PlayersActionDoneMessage.gameState)
}

// required .NetPlayerAction playerAction = 4;
bool PlayersActionDoneMessage::has_playeraction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayersActionDoneMessage::set_has_playeraction() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayersActionDoneMessage::clear_has_playeraction() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayersActionDoneMessage::clear_playeraction() {
  playeraction_ = 0;
  clear_has_playeraction();
}
 ::NetPlayerAction PlayersActionDoneMessage::playeraction() const {
  // @@protoc_insertion_point(field_get:PlayersActionDoneMessage.playerAction)
  return static_cast< ::NetPlayerAction >(playeraction_);
}
 void PlayersActionDoneMessage::set_playeraction(::NetPlayerAction value) {
  assert(::NetPlayerAction_IsValid(value));
  set_has_playeraction();
  playeraction_ = value;
  // @@protoc_insertion_point(field_set:PlayersActionDoneMessage.playerAction)
}

// required uint32 totalPlayerBet = 5;
bool PlayersActionDoneMessage::has_totalplayerbet() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayersActionDoneMessage::set_has_totalplayerbet() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayersActionDoneMessage::clear_has_totalplayerbet() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayersActionDoneMessage::clear_totalplayerbet() {
  totalplayerbet_ = 0u;
  clear_has_totalplayerbet();
}
 ::google::protobuf::uint32 PlayersActionDoneMessage::totalplayerbet() const {
  // @@protoc_insertion_point(field_get:PlayersActionDoneMessage.totalPlayerBet)
  return totalplayerbet_;
}
 void PlayersActionDoneMessage::set_totalplayerbet(::google::protobuf::uint32 value) {
  set_has_totalplayerbet();
  totalplayerbet_ = value;
  // @@protoc_insertion_point(field_set:PlayersActionDoneMessage.totalPlayerBet)
}

// required uint32 playerMoney = 6;
bool PlayersActionDoneMessage::has_playermoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlayersActionDoneMessage::set_has_playermoney() {
  _has_bits_[0] |= 0x00000020u;
}
void PlayersActionDoneMessage::clear_has_playermoney() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlayersActionDoneMessage::clear_playermoney() {
  playermoney_ = 0u;
  clear_has_playermoney();
}
 ::google::protobuf::uint32 PlayersActionDoneMessage::playermoney() const {
  // @@protoc_insertion_point(field_get:PlayersActionDoneMessage.playerMoney)
  return playermoney_;
}
 void PlayersActionDoneMessage::set_playermoney(::google::protobuf::uint32 value) {
  set_has_playermoney();
  playermoney_ = value;
  // @@protoc_insertion_point(field_set:PlayersActionDoneMessage.playerMoney)
}

// required uint32 highestSet = 7;
bool PlayersActionDoneMessage::has_highestset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlayersActionDoneMessage::set_has_highestset() {
  _has_bits_[0] |= 0x00000040u;
}
void PlayersActionDoneMessage::clear_has_highestset() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlayersActionDoneMessage::clear_highestset() {
  highestset_ = 0u;
  clear_has_highestset();
}
 ::google::protobuf::uint32 PlayersActionDoneMessage::highestset() const {
  // @@protoc_insertion_point(field_get:PlayersActionDoneMessage.highestSet)
  return highestset_;
}
 void PlayersActionDoneMessage::set_highestset(::google::protobuf::uint32 value) {
  set_has_highestset();
  highestset_ = value;
  // @@protoc_insertion_point(field_set:PlayersActionDoneMessage.highestSet)
}

// required uint32 minimumRaise = 8;
bool PlayersActionDoneMessage::has_minimumraise() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PlayersActionDoneMessage::set_has_minimumraise() {
  _has_bits_[0] |= 0x00000080u;
}
void PlayersActionDoneMessage::clear_has_minimumraise() {
  _has_bits_[0] &= ~0x00000080u;
}
void PlayersActionDoneMessage::clear_minimumraise() {
  minimumraise_ = 0u;
  clear_has_minimumraise();
}
 ::google::protobuf::uint32 PlayersActionDoneMessage::minimumraise() const {
  // @@protoc_insertion_point(field_get:PlayersActionDoneMessage.minimumRaise)
  return minimumraise_;
}
 void PlayersActionDoneMessage::set_minimumraise(::google::protobuf::uint32 value) {
  set_has_minimumraise();
  minimumraise_ = value;
  // @@protoc_insertion_point(field_set:PlayersActionDoneMessage.minimumRaise)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDealFlopCardsMessage(
    DealFlopCardsMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DealFlopCardsMessage::kGameIdFieldNumber;
const int DealFlopCardsMessage::kFlopCard1FieldNumber;
const int DealFlopCardsMessage::kFlopCard2FieldNumber;
const int DealFlopCardsMessage::kFlopCard3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DealFlopCardsMessage::DealFlopCardsMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DealFlopCardsMessage)
}

void DealFlopCardsMessage::InitAsDefaultInstance() {
}

DealFlopCardsMessage::DealFlopCardsMessage(const DealFlopCardsMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DealFlopCardsMessage)
}

void DealFlopCardsMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  flopcard1_ = 0u;
  flopcard2_ = 0u;
  flopcard3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealFlopCardsMessage::~DealFlopCardsMessage() {
  // @@protoc_insertion_point(destructor:DealFlopCardsMessage)
  SharedDtor();
}

void DealFlopCardsMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DealFlopCardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DealFlopCardsMessage& DealFlopCardsMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

DealFlopCardsMessage* DealFlopCardsMessage::default_instance_ = NULL;

DealFlopCardsMessage* DealFlopCardsMessage::New(::google::protobuf::Arena* arena) const {
  DealFlopCardsMessage* n = new DealFlopCardsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DealFlopCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealFlopCardsMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DealFlopCardsMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DealFlopCardsMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, flopcard3_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DealFlopCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDealFlopCardsMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:DealFlopCardsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flopCard1;
        break;
      }

      // required uint32 flopCard1 = 2;
      case 2: {
        if (tag == 16) {
         parse_flopCard1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flopcard1_)));
          set_has_flopcard1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flopCard2;
        break;
      }

      // required uint32 flopCard2 = 3;
      case 3: {
        if (tag == 24) {
         parse_flopCard2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flopcard2_)));
          set_has_flopcard2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flopCard3;
        break;
      }

      // required uint32 flopCard3 = 4;
      case 4: {
        if (tag == 32) {
         parse_flopCard3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flopcard3_)));
          set_has_flopcard3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DealFlopCardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DealFlopCardsMessage)
  return false;
#undef DO_
}

void DealFlopCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DealFlopCardsMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 flopCard1 = 2;
  if (has_flopcard1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flopcard1(), output);
  }

  // required uint32 flopCard2 = 3;
  if (has_flopcard2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flopcard2(), output);
  }

  // required uint32 flopCard3 = 4;
  if (has_flopcard3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flopcard3(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DealFlopCardsMessage)
}

int DealFlopCardsMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DealFlopCardsMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_flopcard1()) {
    // required uint32 flopCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard1());
  }

  if (has_flopcard2()) {
    // required uint32 flopCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard2());
  }

  if (has_flopcard3()) {
    // required uint32 flopCard3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard3());
  }

  return total_size;
}
int DealFlopCardsMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DealFlopCardsMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 flopCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard1());

    // required uint32 flopCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard2());

    // required uint32 flopCard3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard3());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealFlopCardsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DealFlopCardsMessage*>(&from));
}

void DealFlopCardsMessage::MergeFrom(const DealFlopCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DealFlopCardsMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_flopcard1()) {
      set_flopcard1(from.flopcard1());
    }
    if (from.has_flopcard2()) {
      set_flopcard2(from.flopcard2());
    }
    if (from.has_flopcard3()) {
      set_flopcard3(from.flopcard3());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DealFlopCardsMessage::CopyFrom(const DealFlopCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealFlopCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealFlopCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DealFlopCardsMessage::Swap(DealFlopCardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DealFlopCardsMessage::InternalSwap(DealFlopCardsMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(flopcard1_, other->flopcard1_);
  std::swap(flopcard2_, other->flopcard2_);
  std::swap(flopcard3_, other->flopcard3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DealFlopCardsMessage::GetTypeName() const {
  return "DealFlopCardsMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DealFlopCardsMessage

// required uint32 gameId = 1;
bool DealFlopCardsMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DealFlopCardsMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void DealFlopCardsMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DealFlopCardsMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 DealFlopCardsMessage::gameid() const {
  // @@protoc_insertion_point(field_get:DealFlopCardsMessage.gameId)
  return gameid_;
}
 void DealFlopCardsMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:DealFlopCardsMessage.gameId)
}

// required uint32 flopCard1 = 2;
bool DealFlopCardsMessage::has_flopcard1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DealFlopCardsMessage::set_has_flopcard1() {
  _has_bits_[0] |= 0x00000002u;
}
void DealFlopCardsMessage::clear_has_flopcard1() {
  _has_bits_[0] &= ~0x00000002u;
}
void DealFlopCardsMessage::clear_flopcard1() {
  flopcard1_ = 0u;
  clear_has_flopcard1();
}
 ::google::protobuf::uint32 DealFlopCardsMessage::flopcard1() const {
  // @@protoc_insertion_point(field_get:DealFlopCardsMessage.flopCard1)
  return flopcard1_;
}
 void DealFlopCardsMessage::set_flopcard1(::google::protobuf::uint32 value) {
  set_has_flopcard1();
  flopcard1_ = value;
  // @@protoc_insertion_point(field_set:DealFlopCardsMessage.flopCard1)
}

// required uint32 flopCard2 = 3;
bool DealFlopCardsMessage::has_flopcard2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DealFlopCardsMessage::set_has_flopcard2() {
  _has_bits_[0] |= 0x00000004u;
}
void DealFlopCardsMessage::clear_has_flopcard2() {
  _has_bits_[0] &= ~0x00000004u;
}
void DealFlopCardsMessage::clear_flopcard2() {
  flopcard2_ = 0u;
  clear_has_flopcard2();
}
 ::google::protobuf::uint32 DealFlopCardsMessage::flopcard2() const {
  // @@protoc_insertion_point(field_get:DealFlopCardsMessage.flopCard2)
  return flopcard2_;
}
 void DealFlopCardsMessage::set_flopcard2(::google::protobuf::uint32 value) {
  set_has_flopcard2();
  flopcard2_ = value;
  // @@protoc_insertion_point(field_set:DealFlopCardsMessage.flopCard2)
}

// required uint32 flopCard3 = 4;
bool DealFlopCardsMessage::has_flopcard3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DealFlopCardsMessage::set_has_flopcard3() {
  _has_bits_[0] |= 0x00000008u;
}
void DealFlopCardsMessage::clear_has_flopcard3() {
  _has_bits_[0] &= ~0x00000008u;
}
void DealFlopCardsMessage::clear_flopcard3() {
  flopcard3_ = 0u;
  clear_has_flopcard3();
}
 ::google::protobuf::uint32 DealFlopCardsMessage::flopcard3() const {
  // @@protoc_insertion_point(field_get:DealFlopCardsMessage.flopCard3)
  return flopcard3_;
}
 void DealFlopCardsMessage::set_flopcard3(::google::protobuf::uint32 value) {
  set_has_flopcard3();
  flopcard3_ = value;
  // @@protoc_insertion_point(field_set:DealFlopCardsMessage.flopCard3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDealTurnCardMessage(
    DealTurnCardMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DealTurnCardMessage::kGameIdFieldNumber;
const int DealTurnCardMessage::kTurnCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DealTurnCardMessage::DealTurnCardMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DealTurnCardMessage)
}

void DealTurnCardMessage::InitAsDefaultInstance() {
}

DealTurnCardMessage::DealTurnCardMessage(const DealTurnCardMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DealTurnCardMessage)
}

void DealTurnCardMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  turncard_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealTurnCardMessage::~DealTurnCardMessage() {
  // @@protoc_insertion_point(destructor:DealTurnCardMessage)
  SharedDtor();
}

void DealTurnCardMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DealTurnCardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DealTurnCardMessage& DealTurnCardMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

DealTurnCardMessage* DealTurnCardMessage::default_instance_ = NULL;

DealTurnCardMessage* DealTurnCardMessage::New(::google::protobuf::Arena* arena) const {
  DealTurnCardMessage* n = new DealTurnCardMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DealTurnCardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealTurnCardMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DealTurnCardMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DealTurnCardMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, turncard_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DealTurnCardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDealTurnCardMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:DealTurnCardMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_turnCard;
        break;
      }

      // required uint32 turnCard = 2;
      case 2: {
        if (tag == 16) {
         parse_turnCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turncard_)));
          set_has_turncard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DealTurnCardMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DealTurnCardMessage)
  return false;
#undef DO_
}

void DealTurnCardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DealTurnCardMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 turnCard = 2;
  if (has_turncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->turncard(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DealTurnCardMessage)
}

int DealTurnCardMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DealTurnCardMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_turncard()) {
    // required uint32 turnCard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turncard());
  }

  return total_size;
}
int DealTurnCardMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DealTurnCardMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 turnCard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turncard());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealTurnCardMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DealTurnCardMessage*>(&from));
}

void DealTurnCardMessage::MergeFrom(const DealTurnCardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DealTurnCardMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_turncard()) {
      set_turncard(from.turncard());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DealTurnCardMessage::CopyFrom(const DealTurnCardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealTurnCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealTurnCardMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DealTurnCardMessage::Swap(DealTurnCardMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DealTurnCardMessage::InternalSwap(DealTurnCardMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(turncard_, other->turncard_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DealTurnCardMessage::GetTypeName() const {
  return "DealTurnCardMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DealTurnCardMessage

// required uint32 gameId = 1;
bool DealTurnCardMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DealTurnCardMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void DealTurnCardMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DealTurnCardMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 DealTurnCardMessage::gameid() const {
  // @@protoc_insertion_point(field_get:DealTurnCardMessage.gameId)
  return gameid_;
}
 void DealTurnCardMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:DealTurnCardMessage.gameId)
}

// required uint32 turnCard = 2;
bool DealTurnCardMessage::has_turncard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DealTurnCardMessage::set_has_turncard() {
  _has_bits_[0] |= 0x00000002u;
}
void DealTurnCardMessage::clear_has_turncard() {
  _has_bits_[0] &= ~0x00000002u;
}
void DealTurnCardMessage::clear_turncard() {
  turncard_ = 0u;
  clear_has_turncard();
}
 ::google::protobuf::uint32 DealTurnCardMessage::turncard() const {
  // @@protoc_insertion_point(field_get:DealTurnCardMessage.turnCard)
  return turncard_;
}
 void DealTurnCardMessage::set_turncard(::google::protobuf::uint32 value) {
  set_has_turncard();
  turncard_ = value;
  // @@protoc_insertion_point(field_set:DealTurnCardMessage.turnCard)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDealRiverCardMessage(
    DealRiverCardMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DealRiverCardMessage::kGameIdFieldNumber;
const int DealRiverCardMessage::kRiverCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DealRiverCardMessage::DealRiverCardMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DealRiverCardMessage)
}

void DealRiverCardMessage::InitAsDefaultInstance() {
}

DealRiverCardMessage::DealRiverCardMessage(const DealRiverCardMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DealRiverCardMessage)
}

void DealRiverCardMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  rivercard_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealRiverCardMessage::~DealRiverCardMessage() {
  // @@protoc_insertion_point(destructor:DealRiverCardMessage)
  SharedDtor();
}

void DealRiverCardMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DealRiverCardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DealRiverCardMessage& DealRiverCardMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

DealRiverCardMessage* DealRiverCardMessage::default_instance_ = NULL;

DealRiverCardMessage* DealRiverCardMessage::New(::google::protobuf::Arena* arena) const {
  DealRiverCardMessage* n = new DealRiverCardMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DealRiverCardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealRiverCardMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DealRiverCardMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DealRiverCardMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, rivercard_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DealRiverCardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDealRiverCardMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:DealRiverCardMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_riverCard;
        break;
      }

      // required uint32 riverCard = 2;
      case 2: {
        if (tag == 16) {
         parse_riverCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rivercard_)));
          set_has_rivercard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DealRiverCardMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DealRiverCardMessage)
  return false;
#undef DO_
}

void DealRiverCardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DealRiverCardMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 riverCard = 2;
  if (has_rivercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rivercard(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DealRiverCardMessage)
}

int DealRiverCardMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DealRiverCardMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_rivercard()) {
    // required uint32 riverCard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rivercard());
  }

  return total_size;
}
int DealRiverCardMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DealRiverCardMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 riverCard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rivercard());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealRiverCardMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DealRiverCardMessage*>(&from));
}

void DealRiverCardMessage::MergeFrom(const DealRiverCardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DealRiverCardMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_rivercard()) {
      set_rivercard(from.rivercard());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DealRiverCardMessage::CopyFrom(const DealRiverCardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealRiverCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealRiverCardMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DealRiverCardMessage::Swap(DealRiverCardMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DealRiverCardMessage::InternalSwap(DealRiverCardMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(rivercard_, other->rivercard_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DealRiverCardMessage::GetTypeName() const {
  return "DealRiverCardMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DealRiverCardMessage

// required uint32 gameId = 1;
bool DealRiverCardMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DealRiverCardMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void DealRiverCardMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DealRiverCardMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 DealRiverCardMessage::gameid() const {
  // @@protoc_insertion_point(field_get:DealRiverCardMessage.gameId)
  return gameid_;
}
 void DealRiverCardMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:DealRiverCardMessage.gameId)
}

// required uint32 riverCard = 2;
bool DealRiverCardMessage::has_rivercard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DealRiverCardMessage::set_has_rivercard() {
  _has_bits_[0] |= 0x00000002u;
}
void DealRiverCardMessage::clear_has_rivercard() {
  _has_bits_[0] &= ~0x00000002u;
}
void DealRiverCardMessage::clear_rivercard() {
  rivercard_ = 0u;
  clear_has_rivercard();
}
 ::google::protobuf::uint32 DealRiverCardMessage::rivercard() const {
  // @@protoc_insertion_point(field_get:DealRiverCardMessage.riverCard)
  return rivercard_;
}
 void DealRiverCardMessage::set_rivercard(::google::protobuf::uint32 value) {
  set_has_rivercard();
  rivercard_ = value;
  // @@protoc_insertion_point(field_set:DealRiverCardMessage.riverCard)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAllInShowCardsMessage(
    AllInShowCardsMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForAllInShowCardsMessage_PlayerAllIn(
    AllInShowCardsMessage_PlayerAllIn* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllInShowCardsMessage_PlayerAllIn::kPlayerIdFieldNumber;
const int AllInShowCardsMessage_PlayerAllIn::kAllInCard1FieldNumber;
const int AllInShowCardsMessage_PlayerAllIn::kAllInCard2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllInShowCardsMessage_PlayerAllIn::AllInShowCardsMessage_PlayerAllIn()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllInShowCardsMessage.PlayerAllIn)
}

void AllInShowCardsMessage_PlayerAllIn::InitAsDefaultInstance() {
}

AllInShowCardsMessage_PlayerAllIn::AllInShowCardsMessage_PlayerAllIn(const AllInShowCardsMessage_PlayerAllIn& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllInShowCardsMessage.PlayerAllIn)
}

void AllInShowCardsMessage_PlayerAllIn::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_ = 0u;
  allincard1_ = 0u;
  allincard2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllInShowCardsMessage_PlayerAllIn::~AllInShowCardsMessage_PlayerAllIn() {
  // @@protoc_insertion_point(destructor:AllInShowCardsMessage.PlayerAllIn)
  SharedDtor();
}

void AllInShowCardsMessage_PlayerAllIn::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AllInShowCardsMessage_PlayerAllIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AllInShowCardsMessage_PlayerAllIn& AllInShowCardsMessage_PlayerAllIn::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AllInShowCardsMessage_PlayerAllIn* AllInShowCardsMessage_PlayerAllIn::default_instance_ = NULL;

AllInShowCardsMessage_PlayerAllIn* AllInShowCardsMessage_PlayerAllIn::New(::google::protobuf::Arena* arena) const {
  AllInShowCardsMessage_PlayerAllIn* n = new AllInShowCardsMessage_PlayerAllIn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllInShowCardsMessage_PlayerAllIn::Clear() {
// @@protoc_insertion_point(message_clear_start:AllInShowCardsMessage.PlayerAllIn)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AllInShowCardsMessage_PlayerAllIn, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AllInShowCardsMessage_PlayerAllIn*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, allincard2_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AllInShowCardsMessage_PlayerAllIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAllInShowCardsMessage_PlayerAllIn, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AllInShowCardsMessage.PlayerAllIn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_allInCard1;
        break;
      }

      // required uint32 allInCard1 = 2;
      case 2: {
        if (tag == 16) {
         parse_allInCard1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allincard1_)));
          set_has_allincard1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_allInCard2;
        break;
      }

      // required uint32 allInCard2 = 3;
      case 3: {
        if (tag == 24) {
         parse_allInCard2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allincard2_)));
          set_has_allincard2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllInShowCardsMessage.PlayerAllIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllInShowCardsMessage.PlayerAllIn)
  return false;
#undef DO_
}

void AllInShowCardsMessage_PlayerAllIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllInShowCardsMessage.PlayerAllIn)
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 allInCard1 = 2;
  if (has_allincard1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allincard1(), output);
  }

  // required uint32 allInCard2 = 3;
  if (has_allincard2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->allincard2(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AllInShowCardsMessage.PlayerAllIn)
}

int AllInShowCardsMessage_PlayerAllIn::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AllInShowCardsMessage.PlayerAllIn)
  int total_size = 0;

  if (has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_allincard1()) {
    // required uint32 allInCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allincard1());
  }

  if (has_allincard2()) {
    // required uint32 allInCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allincard2());
  }

  return total_size;
}
int AllInShowCardsMessage_PlayerAllIn::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AllInShowCardsMessage.PlayerAllIn)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required uint32 allInCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allincard1());

    // required uint32 allInCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allincard2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllInShowCardsMessage_PlayerAllIn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AllInShowCardsMessage_PlayerAllIn*>(&from));
}

void AllInShowCardsMessage_PlayerAllIn::MergeFrom(const AllInShowCardsMessage_PlayerAllIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AllInShowCardsMessage.PlayerAllIn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_allincard1()) {
      set_allincard1(from.allincard1());
    }
    if (from.has_allincard2()) {
      set_allincard2(from.allincard2());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AllInShowCardsMessage_PlayerAllIn::CopyFrom(const AllInShowCardsMessage_PlayerAllIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AllInShowCardsMessage.PlayerAllIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllInShowCardsMessage_PlayerAllIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AllInShowCardsMessage_PlayerAllIn::Swap(AllInShowCardsMessage_PlayerAllIn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllInShowCardsMessage_PlayerAllIn::InternalSwap(AllInShowCardsMessage_PlayerAllIn* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(allincard1_, other->allincard1_);
  std::swap(allincard2_, other->allincard2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AllInShowCardsMessage_PlayerAllIn::GetTypeName() const {
  return "AllInShowCardsMessage.PlayerAllIn";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllInShowCardsMessage::kGameIdFieldNumber;
const int AllInShowCardsMessage::kPlayersAllInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllInShowCardsMessage::AllInShowCardsMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllInShowCardsMessage)
}

void AllInShowCardsMessage::InitAsDefaultInstance() {
}

AllInShowCardsMessage::AllInShowCardsMessage(const AllInShowCardsMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllInShowCardsMessage)
}

void AllInShowCardsMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllInShowCardsMessage::~AllInShowCardsMessage() {
  // @@protoc_insertion_point(destructor:AllInShowCardsMessage)
  SharedDtor();
}

void AllInShowCardsMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AllInShowCardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AllInShowCardsMessage& AllInShowCardsMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AllInShowCardsMessage* AllInShowCardsMessage::default_instance_ = NULL;

AllInShowCardsMessage* AllInShowCardsMessage::New(::google::protobuf::Arena* arena) const {
  AllInShowCardsMessage* n = new AllInShowCardsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllInShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AllInShowCardsMessage)
  gameid_ = 0u;
  playersallin_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AllInShowCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAllInShowCardsMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AllInShowCardsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playersAllIn;
        break;
      }

      // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
      case 2: {
        if (tag == 18) {
         parse_playersAllIn:
          DO_(input->IncrementRecursionDepth());
         parse_loop_playersAllIn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_playersallin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_playersAllIn;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllInShowCardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllInShowCardsMessage)
  return false;
#undef DO_
}

void AllInShowCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllInShowCardsMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
  for (unsigned int i = 0, n = this->playersallin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->playersallin(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AllInShowCardsMessage)
}

int AllInShowCardsMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AllInShowCardsMessage)
  int total_size = 0;

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
  total_size += 1 * this->playersallin_size();
  for (int i = 0; i < this->playersallin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playersallin(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllInShowCardsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AllInShowCardsMessage*>(&from));
}

void AllInShowCardsMessage::MergeFrom(const AllInShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AllInShowCardsMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  playersallin_.MergeFrom(from.playersallin_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AllInShowCardsMessage::CopyFrom(const AllInShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AllInShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllInShowCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->playersallin())) return false;
  return true;
}

void AllInShowCardsMessage::Swap(AllInShowCardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllInShowCardsMessage::InternalSwap(AllInShowCardsMessage* other) {
  std::swap(gameid_, other->gameid_);
  playersallin_.UnsafeArenaSwap(&other->playersallin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AllInShowCardsMessage::GetTypeName() const {
  return "AllInShowCardsMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllInShowCardsMessage_PlayerAllIn

// required uint32 playerId = 1;
bool AllInShowCardsMessage_PlayerAllIn::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AllInShowCardsMessage_PlayerAllIn::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void AllInShowCardsMessage_PlayerAllIn::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AllInShowCardsMessage_PlayerAllIn::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 AllInShowCardsMessage_PlayerAllIn::playerid() const {
  // @@protoc_insertion_point(field_get:AllInShowCardsMessage.PlayerAllIn.playerId)
  return playerid_;
}
 void AllInShowCardsMessage_PlayerAllIn::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:AllInShowCardsMessage.PlayerAllIn.playerId)
}

// required uint32 allInCard1 = 2;
bool AllInShowCardsMessage_PlayerAllIn::has_allincard1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AllInShowCardsMessage_PlayerAllIn::set_has_allincard1() {
  _has_bits_[0] |= 0x00000002u;
}
void AllInShowCardsMessage_PlayerAllIn::clear_has_allincard1() {
  _has_bits_[0] &= ~0x00000002u;
}
void AllInShowCardsMessage_PlayerAllIn::clear_allincard1() {
  allincard1_ = 0u;
  clear_has_allincard1();
}
 ::google::protobuf::uint32 AllInShowCardsMessage_PlayerAllIn::allincard1() const {
  // @@protoc_insertion_point(field_get:AllInShowCardsMessage.PlayerAllIn.allInCard1)
  return allincard1_;
}
 void AllInShowCardsMessage_PlayerAllIn::set_allincard1(::google::protobuf::uint32 value) {
  set_has_allincard1();
  allincard1_ = value;
  // @@protoc_insertion_point(field_set:AllInShowCardsMessage.PlayerAllIn.allInCard1)
}

// required uint32 allInCard2 = 3;
bool AllInShowCardsMessage_PlayerAllIn::has_allincard2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AllInShowCardsMessage_PlayerAllIn::set_has_allincard2() {
  _has_bits_[0] |= 0x00000004u;
}
void AllInShowCardsMessage_PlayerAllIn::clear_has_allincard2() {
  _has_bits_[0] &= ~0x00000004u;
}
void AllInShowCardsMessage_PlayerAllIn::clear_allincard2() {
  allincard2_ = 0u;
  clear_has_allincard2();
}
 ::google::protobuf::uint32 AllInShowCardsMessage_PlayerAllIn::allincard2() const {
  // @@protoc_insertion_point(field_get:AllInShowCardsMessage.PlayerAllIn.allInCard2)
  return allincard2_;
}
 void AllInShowCardsMessage_PlayerAllIn::set_allincard2(::google::protobuf::uint32 value) {
  set_has_allincard2();
  allincard2_ = value;
  // @@protoc_insertion_point(field_set:AllInShowCardsMessage.PlayerAllIn.allInCard2)
}

// -------------------------------------------------------------------

// AllInShowCardsMessage

// required uint32 gameId = 1;
bool AllInShowCardsMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AllInShowCardsMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void AllInShowCardsMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AllInShowCardsMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 AllInShowCardsMessage::gameid() const {
  // @@protoc_insertion_point(field_get:AllInShowCardsMessage.gameId)
  return gameid_;
}
 void AllInShowCardsMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:AllInShowCardsMessage.gameId)
}

// repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
int AllInShowCardsMessage::playersallin_size() const {
  return playersallin_.size();
}
void AllInShowCardsMessage::clear_playersallin() {
  playersallin_.Clear();
}
const ::AllInShowCardsMessage_PlayerAllIn& AllInShowCardsMessage::playersallin(int index) const {
  // @@protoc_insertion_point(field_get:AllInShowCardsMessage.playersAllIn)
  return playersallin_.Get(index);
}
::AllInShowCardsMessage_PlayerAllIn* AllInShowCardsMessage::mutable_playersallin(int index) {
  // @@protoc_insertion_point(field_mutable:AllInShowCardsMessage.playersAllIn)
  return playersallin_.Mutable(index);
}
::AllInShowCardsMessage_PlayerAllIn* AllInShowCardsMessage::add_playersallin() {
  // @@protoc_insertion_point(field_add:AllInShowCardsMessage.playersAllIn)
  return playersallin_.Add();
}
::google::protobuf::RepeatedPtrField< ::AllInShowCardsMessage_PlayerAllIn >*
AllInShowCardsMessage::mutable_playersallin() {
  // @@protoc_insertion_point(field_mutable_list:AllInShowCardsMessage.playersAllIn)
  return &playersallin_;
}
const ::google::protobuf::RepeatedPtrField< ::AllInShowCardsMessage_PlayerAllIn >&
AllInShowCardsMessage::playersallin() const {
  // @@protoc_insertion_point(field_list:AllInShowCardsMessage.playersAllIn)
  return playersallin_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForEndOfHandShowCardsMessage(
    EndOfHandShowCardsMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndOfHandShowCardsMessage::kGameIdFieldNumber;
const int EndOfHandShowCardsMessage::kPlayerResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndOfHandShowCardsMessage::EndOfHandShowCardsMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndOfHandShowCardsMessage)
}

void EndOfHandShowCardsMessage::InitAsDefaultInstance() {
}

EndOfHandShowCardsMessage::EndOfHandShowCardsMessage(const EndOfHandShowCardsMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EndOfHandShowCardsMessage)
}

void EndOfHandShowCardsMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndOfHandShowCardsMessage::~EndOfHandShowCardsMessage() {
  // @@protoc_insertion_point(destructor:EndOfHandShowCardsMessage)
  SharedDtor();
}

void EndOfHandShowCardsMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EndOfHandShowCardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EndOfHandShowCardsMessage& EndOfHandShowCardsMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

EndOfHandShowCardsMessage* EndOfHandShowCardsMessage::default_instance_ = NULL;

EndOfHandShowCardsMessage* EndOfHandShowCardsMessage::New(::google::protobuf::Arena* arena) const {
  EndOfHandShowCardsMessage* n = new EndOfHandShowCardsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndOfHandShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfHandShowCardsMessage)
  gameid_ = 0u;
  playerresults_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EndOfHandShowCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForEndOfHandShowCardsMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:EndOfHandShowCardsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerResults;
        break;
      }

      // repeated .PlayerResult playerResults = 2;
      case 2: {
        if (tag == 18) {
         parse_playerResults:
          DO_(input->IncrementRecursionDepth());
         parse_loop_playerResults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_playerresults()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_playerResults;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EndOfHandShowCardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EndOfHandShowCardsMessage)
  return false;
#undef DO_
}

void EndOfHandShowCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EndOfHandShowCardsMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // repeated .PlayerResult playerResults = 2;
  for (unsigned int i = 0, n = this->playerresults_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->playerresults(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:EndOfHandShowCardsMessage)
}

int EndOfHandShowCardsMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfHandShowCardsMessage)
  int total_size = 0;

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  // repeated .PlayerResult playerResults = 2;
  total_size += 1 * this->playerresults_size();
  for (int i = 0; i < this->playerresults_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerresults(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndOfHandShowCardsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndOfHandShowCardsMessage*>(&from));
}

void EndOfHandShowCardsMessage::MergeFrom(const EndOfHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndOfHandShowCardsMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  playerresults_.MergeFrom(from.playerresults_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void EndOfHandShowCardsMessage::CopyFrom(const EndOfHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfHandShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfHandShowCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->playerresults())) return false;
  return true;
}

void EndOfHandShowCardsMessage::Swap(EndOfHandShowCardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndOfHandShowCardsMessage::InternalSwap(EndOfHandShowCardsMessage* other) {
  std::swap(gameid_, other->gameid_);
  playerresults_.UnsafeArenaSwap(&other->playerresults_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EndOfHandShowCardsMessage::GetTypeName() const {
  return "EndOfHandShowCardsMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndOfHandShowCardsMessage

// required uint32 gameId = 1;
bool EndOfHandShowCardsMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EndOfHandShowCardsMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void EndOfHandShowCardsMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void EndOfHandShowCardsMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 EndOfHandShowCardsMessage::gameid() const {
  // @@protoc_insertion_point(field_get:EndOfHandShowCardsMessage.gameId)
  return gameid_;
}
 void EndOfHandShowCardsMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:EndOfHandShowCardsMessage.gameId)
}

// repeated .PlayerResult playerResults = 2;
int EndOfHandShowCardsMessage::playerresults_size() const {
  return playerresults_.size();
}
void EndOfHandShowCardsMessage::clear_playerresults() {
  playerresults_.Clear();
}
const ::PlayerResult& EndOfHandShowCardsMessage::playerresults(int index) const {
  // @@protoc_insertion_point(field_get:EndOfHandShowCardsMessage.playerResults)
  return playerresults_.Get(index);
}
::PlayerResult* EndOfHandShowCardsMessage::mutable_playerresults(int index) {
  // @@protoc_insertion_point(field_mutable:EndOfHandShowCardsMessage.playerResults)
  return playerresults_.Mutable(index);
}
::PlayerResult* EndOfHandShowCardsMessage::add_playerresults() {
  // @@protoc_insertion_point(field_add:EndOfHandShowCardsMessage.playerResults)
  return playerresults_.Add();
}
::google::protobuf::RepeatedPtrField< ::PlayerResult >*
EndOfHandShowCardsMessage::mutable_playerresults() {
  // @@protoc_insertion_point(field_mutable_list:EndOfHandShowCardsMessage.playerResults)
  return &playerresults_;
}
const ::google::protobuf::RepeatedPtrField< ::PlayerResult >&
EndOfHandShowCardsMessage::playerresults() const {
  // @@protoc_insertion_point(field_list:EndOfHandShowCardsMessage.playerResults)
  return playerresults_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForEndOfHandHideCardsMessage(
    EndOfHandHideCardsMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndOfHandHideCardsMessage::kGameIdFieldNumber;
const int EndOfHandHideCardsMessage::kPlayerIdFieldNumber;
const int EndOfHandHideCardsMessage::kMoneyWonFieldNumber;
const int EndOfHandHideCardsMessage::kPlayerMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndOfHandHideCardsMessage::EndOfHandHideCardsMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndOfHandHideCardsMessage)
}

void EndOfHandHideCardsMessage::InitAsDefaultInstance() {
}

EndOfHandHideCardsMessage::EndOfHandHideCardsMessage(const EndOfHandHideCardsMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EndOfHandHideCardsMessage)
}

void EndOfHandHideCardsMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  moneywon_ = 0u;
  playermoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndOfHandHideCardsMessage::~EndOfHandHideCardsMessage() {
  // @@protoc_insertion_point(destructor:EndOfHandHideCardsMessage)
  SharedDtor();
}

void EndOfHandHideCardsMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EndOfHandHideCardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EndOfHandHideCardsMessage& EndOfHandHideCardsMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

EndOfHandHideCardsMessage* EndOfHandHideCardsMessage::default_instance_ = NULL;

EndOfHandHideCardsMessage* EndOfHandHideCardsMessage::New(::google::protobuf::Arena* arena) const {
  EndOfHandHideCardsMessage* n = new EndOfHandHideCardsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndOfHandHideCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfHandHideCardsMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EndOfHandHideCardsMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EndOfHandHideCardsMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, playermoney_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EndOfHandHideCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForEndOfHandHideCardsMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:EndOfHandHideCardsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_moneyWon;
        break;
      }

      // required uint32 moneyWon = 3;
      case 3: {
        if (tag == 24) {
         parse_moneyWon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneywon_)));
          set_has_moneywon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerMoney;
        break;
      }

      // required uint32 playerMoney = 4;
      case 4: {
        if (tag == 32) {
         parse_playerMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
          set_has_playermoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EndOfHandHideCardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EndOfHandHideCardsMessage)
  return false;
#undef DO_
}

void EndOfHandHideCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EndOfHandHideCardsMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 moneyWon = 3;
  if (has_moneywon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->moneywon(), output);
  }

  // required uint32 playerMoney = 4;
  if (has_playermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playermoney(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:EndOfHandHideCardsMessage)
}

int EndOfHandHideCardsMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EndOfHandHideCardsMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_moneywon()) {
    // required uint32 moneyWon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moneywon());
  }

  if (has_playermoney()) {
    // required uint32 playerMoney = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());
  }

  return total_size;
}
int EndOfHandHideCardsMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfHandHideCardsMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required uint32 moneyWon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moneywon());

    // required uint32 playerMoney = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndOfHandHideCardsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndOfHandHideCardsMessage*>(&from));
}

void EndOfHandHideCardsMessage::MergeFrom(const EndOfHandHideCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndOfHandHideCardsMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_moneywon()) {
      set_moneywon(from.moneywon());
    }
    if (from.has_playermoney()) {
      set_playermoney(from.playermoney());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void EndOfHandHideCardsMessage::CopyFrom(const EndOfHandHideCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfHandHideCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfHandHideCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void EndOfHandHideCardsMessage::Swap(EndOfHandHideCardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndOfHandHideCardsMessage::InternalSwap(EndOfHandHideCardsMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(moneywon_, other->moneywon_);
  std::swap(playermoney_, other->playermoney_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EndOfHandHideCardsMessage::GetTypeName() const {
  return "EndOfHandHideCardsMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndOfHandHideCardsMessage

// required uint32 gameId = 1;
bool EndOfHandHideCardsMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EndOfHandHideCardsMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void EndOfHandHideCardsMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void EndOfHandHideCardsMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 EndOfHandHideCardsMessage::gameid() const {
  // @@protoc_insertion_point(field_get:EndOfHandHideCardsMessage.gameId)
  return gameid_;
}
 void EndOfHandHideCardsMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:EndOfHandHideCardsMessage.gameId)
}

// required uint32 playerId = 2;
bool EndOfHandHideCardsMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EndOfHandHideCardsMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void EndOfHandHideCardsMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void EndOfHandHideCardsMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 EndOfHandHideCardsMessage::playerid() const {
  // @@protoc_insertion_point(field_get:EndOfHandHideCardsMessage.playerId)
  return playerid_;
}
 void EndOfHandHideCardsMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:EndOfHandHideCardsMessage.playerId)
}

// required uint32 moneyWon = 3;
bool EndOfHandHideCardsMessage::has_moneywon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EndOfHandHideCardsMessage::set_has_moneywon() {
  _has_bits_[0] |= 0x00000004u;
}
void EndOfHandHideCardsMessage::clear_has_moneywon() {
  _has_bits_[0] &= ~0x00000004u;
}
void EndOfHandHideCardsMessage::clear_moneywon() {
  moneywon_ = 0u;
  clear_has_moneywon();
}
 ::google::protobuf::uint32 EndOfHandHideCardsMessage::moneywon() const {
  // @@protoc_insertion_point(field_get:EndOfHandHideCardsMessage.moneyWon)
  return moneywon_;
}
 void EndOfHandHideCardsMessage::set_moneywon(::google::protobuf::uint32 value) {
  set_has_moneywon();
  moneywon_ = value;
  // @@protoc_insertion_point(field_set:EndOfHandHideCardsMessage.moneyWon)
}

// required uint32 playerMoney = 4;
bool EndOfHandHideCardsMessage::has_playermoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EndOfHandHideCardsMessage::set_has_playermoney() {
  _has_bits_[0] |= 0x00000008u;
}
void EndOfHandHideCardsMessage::clear_has_playermoney() {
  _has_bits_[0] &= ~0x00000008u;
}
void EndOfHandHideCardsMessage::clear_playermoney() {
  playermoney_ = 0u;
  clear_has_playermoney();
}
 ::google::protobuf::uint32 EndOfHandHideCardsMessage::playermoney() const {
  // @@protoc_insertion_point(field_get:EndOfHandHideCardsMessage.playerMoney)
  return playermoney_;
}
 void EndOfHandHideCardsMessage::set_playermoney(::google::protobuf::uint32 value) {
  set_has_playermoney();
  playermoney_ = value;
  // @@protoc_insertion_point(field_set:EndOfHandHideCardsMessage.playerMoney)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForShowMyCardsRequestMessage(
    ShowMyCardsRequestMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowMyCardsRequestMessage::ShowMyCardsRequestMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShowMyCardsRequestMessage)
}

void ShowMyCardsRequestMessage::InitAsDefaultInstance() {
}

ShowMyCardsRequestMessage::ShowMyCardsRequestMessage(const ShowMyCardsRequestMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShowMyCardsRequestMessage)
}

void ShowMyCardsRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowMyCardsRequestMessage::~ShowMyCardsRequestMessage() {
  // @@protoc_insertion_point(destructor:ShowMyCardsRequestMessage)
  SharedDtor();
}

void ShowMyCardsRequestMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShowMyCardsRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShowMyCardsRequestMessage& ShowMyCardsRequestMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

ShowMyCardsRequestMessage* ShowMyCardsRequestMessage::default_instance_ = NULL;

ShowMyCardsRequestMessage* ShowMyCardsRequestMessage::New(::google::protobuf::Arena* arena) const {
  ShowMyCardsRequestMessage* n = new ShowMyCardsRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowMyCardsRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ShowMyCardsRequestMessage)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ShowMyCardsRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForShowMyCardsRequestMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ShowMyCardsRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:ShowMyCardsRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShowMyCardsRequestMessage)
  return false;
#undef DO_
}

void ShowMyCardsRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShowMyCardsRequestMessage)
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ShowMyCardsRequestMessage)
}

int ShowMyCardsRequestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ShowMyCardsRequestMessage)
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowMyCardsRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShowMyCardsRequestMessage*>(&from));
}

void ShowMyCardsRequestMessage::MergeFrom(const ShowMyCardsRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShowMyCardsRequestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ShowMyCardsRequestMessage::CopyFrom(const ShowMyCardsRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShowMyCardsRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowMyCardsRequestMessage::IsInitialized() const {

  return true;
}

void ShowMyCardsRequestMessage::Swap(ShowMyCardsRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowMyCardsRequestMessage::InternalSwap(ShowMyCardsRequestMessage* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ShowMyCardsRequestMessage::GetTypeName() const {
  return "ShowMyCardsRequestMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowMyCardsRequestMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAfterHandShowCardsMessage(
    AfterHandShowCardsMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AfterHandShowCardsMessage::kPlayerResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AfterHandShowCardsMessage::AfterHandShowCardsMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AfterHandShowCardsMessage)
}

void AfterHandShowCardsMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerresult_ = const_cast< ::PlayerResult*>(
      ::PlayerResult::internal_default_instance());
#else
  playerresult_ = const_cast< ::PlayerResult*>(&::PlayerResult::default_instance());
#endif
}

AfterHandShowCardsMessage::AfterHandShowCardsMessage(const AfterHandShowCardsMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AfterHandShowCardsMessage)
}

void AfterHandShowCardsMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfterHandShowCardsMessage::~AfterHandShowCardsMessage() {
  // @@protoc_insertion_point(destructor:AfterHandShowCardsMessage)
  SharedDtor();
}

void AfterHandShowCardsMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerresult_;
  }
}

void AfterHandShowCardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AfterHandShowCardsMessage& AfterHandShowCardsMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AfterHandShowCardsMessage* AfterHandShowCardsMessage::default_instance_ = NULL;

AfterHandShowCardsMessage* AfterHandShowCardsMessage::New(::google::protobuf::Arena* arena) const {
  AfterHandShowCardsMessage* n = new AfterHandShowCardsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AfterHandShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AfterHandShowCardsMessage)
  if (has_playerresult()) {
    if (playerresult_ != NULL) playerresult_->::PlayerResult::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AfterHandShowCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAfterHandShowCardsMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AfterHandShowCardsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlayerResult playerResult = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AfterHandShowCardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AfterHandShowCardsMessage)
  return false;
#undef DO_
}

void AfterHandShowCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AfterHandShowCardsMessage)
  // required .PlayerResult playerResult = 1;
  if (has_playerresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->playerresult_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AfterHandShowCardsMessage)
}

int AfterHandShowCardsMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AfterHandShowCardsMessage)
  int total_size = 0;

  // required .PlayerResult playerResult = 1;
  if (has_playerresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerresult_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfterHandShowCardsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AfterHandShowCardsMessage*>(&from));
}

void AfterHandShowCardsMessage::MergeFrom(const AfterHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AfterHandShowCardsMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerresult()) {
      mutable_playerresult()->::PlayerResult::MergeFrom(from.playerresult());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AfterHandShowCardsMessage::CopyFrom(const AfterHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AfterHandShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfterHandShowCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_playerresult()) {
    if (!this->playerresult_->IsInitialized()) return false;
  }
  return true;
}

void AfterHandShowCardsMessage::Swap(AfterHandShowCardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AfterHandShowCardsMessage::InternalSwap(AfterHandShowCardsMessage* other) {
  std::swap(playerresult_, other->playerresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AfterHandShowCardsMessage::GetTypeName() const {
  return "AfterHandShowCardsMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AfterHandShowCardsMessage

// required .PlayerResult playerResult = 1;
bool AfterHandShowCardsMessage::has_playerresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AfterHandShowCardsMessage::set_has_playerresult() {
  _has_bits_[0] |= 0x00000001u;
}
void AfterHandShowCardsMessage::clear_has_playerresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void AfterHandShowCardsMessage::clear_playerresult() {
  if (playerresult_ != NULL) playerresult_->::PlayerResult::Clear();
  clear_has_playerresult();
}
const ::PlayerResult& AfterHandShowCardsMessage::playerresult() const {
  // @@protoc_insertion_point(field_get:AfterHandShowCardsMessage.playerResult)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerresult_ != NULL ? *playerresult_ : *default_instance().playerresult_;
#else
  return playerresult_ != NULL ? *playerresult_ : *default_instance_->playerresult_;
#endif
}
::PlayerResult* AfterHandShowCardsMessage::mutable_playerresult() {
  set_has_playerresult();
  if (playerresult_ == NULL) {
    playerresult_ = new ::PlayerResult;
  }
  // @@protoc_insertion_point(field_mutable:AfterHandShowCardsMessage.playerResult)
  return playerresult_;
}
::PlayerResult* AfterHandShowCardsMessage::release_playerresult() {
  // @@protoc_insertion_point(field_release:AfterHandShowCardsMessage.playerResult)
  clear_has_playerresult();
  ::PlayerResult* temp = playerresult_;
  playerresult_ = NULL;
  return temp;
}
void AfterHandShowCardsMessage::set_allocated_playerresult(::PlayerResult* playerresult) {
  delete playerresult_;
  playerresult_ = playerresult;
  if (playerresult) {
    set_has_playerresult();
  } else {
    clear_has_playerresult();
  }
  // @@protoc_insertion_point(field_set_allocated:AfterHandShowCardsMessage.playerResult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForEndOfGameMessage(
    EndOfGameMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndOfGameMessage::kGameIdFieldNumber;
const int EndOfGameMessage::kWinnerPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndOfGameMessage::EndOfGameMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndOfGameMessage)
}

void EndOfGameMessage::InitAsDefaultInstance() {
}

EndOfGameMessage::EndOfGameMessage(const EndOfGameMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EndOfGameMessage)
}

void EndOfGameMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  winnerplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndOfGameMessage::~EndOfGameMessage() {
  // @@protoc_insertion_point(destructor:EndOfGameMessage)
  SharedDtor();
}

void EndOfGameMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EndOfGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EndOfGameMessage& EndOfGameMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

EndOfGameMessage* EndOfGameMessage::default_instance_ = NULL;

EndOfGameMessage* EndOfGameMessage::New(::google::protobuf::Arena* arena) const {
  EndOfGameMessage* n = new EndOfGameMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndOfGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfGameMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EndOfGameMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EndOfGameMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, winnerplayerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EndOfGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForEndOfGameMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:EndOfGameMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_winnerPlayerId;
        break;
      }

      // required uint32 winnerPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_winnerPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnerplayerid_)));
          set_has_winnerplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EndOfGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EndOfGameMessage)
  return false;
#undef DO_
}

void EndOfGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EndOfGameMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 winnerPlayerId = 2;
  if (has_winnerplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winnerplayerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:EndOfGameMessage)
}

int EndOfGameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EndOfGameMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_winnerplayerid()) {
    // required uint32 winnerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->winnerplayerid());
  }

  return total_size;
}
int EndOfGameMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfGameMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 winnerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->winnerplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndOfGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndOfGameMessage*>(&from));
}

void EndOfGameMessage::MergeFrom(const EndOfGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndOfGameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_winnerplayerid()) {
      set_winnerplayerid(from.winnerplayerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void EndOfGameMessage::CopyFrom(const EndOfGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EndOfGameMessage::Swap(EndOfGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndOfGameMessage::InternalSwap(EndOfGameMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(winnerplayerid_, other->winnerplayerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EndOfGameMessage::GetTypeName() const {
  return "EndOfGameMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndOfGameMessage

// required uint32 gameId = 1;
bool EndOfGameMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EndOfGameMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void EndOfGameMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void EndOfGameMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 EndOfGameMessage::gameid() const {
  // @@protoc_insertion_point(field_get:EndOfGameMessage.gameId)
  return gameid_;
}
 void EndOfGameMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:EndOfGameMessage.gameId)
}

// required uint32 winnerPlayerId = 2;
bool EndOfGameMessage::has_winnerplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EndOfGameMessage::set_has_winnerplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
void EndOfGameMessage::clear_has_winnerplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void EndOfGameMessage::clear_winnerplayerid() {
  winnerplayerid_ = 0u;
  clear_has_winnerplayerid();
}
 ::google::protobuf::uint32 EndOfGameMessage::winnerplayerid() const {
  // @@protoc_insertion_point(field_get:EndOfGameMessage.winnerPlayerId)
  return winnerplayerid_;
}
 void EndOfGameMessage::set_winnerplayerid(::google::protobuf::uint32 value) {
  set_has_winnerplayerid();
  winnerplayerid_ = value;
  // @@protoc_insertion_point(field_set:EndOfGameMessage.winnerPlayerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPlayerIdChangedMessage(
    PlayerIdChangedMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerIdChangedMessage::kOldPlayerIdFieldNumber;
const int PlayerIdChangedMessage::kNewPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerIdChangedMessage::PlayerIdChangedMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerIdChangedMessage)
}

void PlayerIdChangedMessage::InitAsDefaultInstance() {
}

PlayerIdChangedMessage::PlayerIdChangedMessage(const PlayerIdChangedMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerIdChangedMessage)
}

void PlayerIdChangedMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oldplayerid_ = 0u;
  newplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerIdChangedMessage::~PlayerIdChangedMessage() {
  // @@protoc_insertion_point(destructor:PlayerIdChangedMessage)
  SharedDtor();
}

void PlayerIdChangedMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerIdChangedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerIdChangedMessage& PlayerIdChangedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

PlayerIdChangedMessage* PlayerIdChangedMessage::default_instance_ = NULL;

PlayerIdChangedMessage* PlayerIdChangedMessage::New(::google::protobuf::Arena* arena) const {
  PlayerIdChangedMessage* n = new PlayerIdChangedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerIdChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerIdChangedMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerIdChangedMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerIdChangedMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(oldplayerid_, newplayerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlayerIdChangedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPlayerIdChangedMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PlayerIdChangedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oldPlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldplayerid_)));
          set_has_oldplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newPlayerId;
        break;
      }

      // required uint32 newPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_newPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newplayerid_)));
          set_has_newplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerIdChangedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerIdChangedMessage)
  return false;
#undef DO_
}

void PlayerIdChangedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerIdChangedMessage)
  // required uint32 oldPlayerId = 1;
  if (has_oldplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oldplayerid(), output);
  }

  // required uint32 newPlayerId = 2;
  if (has_newplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newplayerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerIdChangedMessage)
}

int PlayerIdChangedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerIdChangedMessage)
  int total_size = 0;

  if (has_oldplayerid()) {
    // required uint32 oldPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->oldplayerid());
  }

  if (has_newplayerid()) {
    // required uint32 newPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newplayerid());
  }

  return total_size;
}
int PlayerIdChangedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerIdChangedMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 oldPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->oldplayerid());

    // required uint32 newPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerIdChangedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerIdChangedMessage*>(&from));
}

void PlayerIdChangedMessage::MergeFrom(const PlayerIdChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerIdChangedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldplayerid()) {
      set_oldplayerid(from.oldplayerid());
    }
    if (from.has_newplayerid()) {
      set_newplayerid(from.newplayerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PlayerIdChangedMessage::CopyFrom(const PlayerIdChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerIdChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerIdChangedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerIdChangedMessage::Swap(PlayerIdChangedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerIdChangedMessage::InternalSwap(PlayerIdChangedMessage* other) {
  std::swap(oldplayerid_, other->oldplayerid_);
  std::swap(newplayerid_, other->newplayerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerIdChangedMessage::GetTypeName() const {
  return "PlayerIdChangedMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerIdChangedMessage

// required uint32 oldPlayerId = 1;
bool PlayerIdChangedMessage::has_oldplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerIdChangedMessage::set_has_oldplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerIdChangedMessage::clear_has_oldplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerIdChangedMessage::clear_oldplayerid() {
  oldplayerid_ = 0u;
  clear_has_oldplayerid();
}
 ::google::protobuf::uint32 PlayerIdChangedMessage::oldplayerid() const {
  // @@protoc_insertion_point(field_get:PlayerIdChangedMessage.oldPlayerId)
  return oldplayerid_;
}
 void PlayerIdChangedMessage::set_oldplayerid(::google::protobuf::uint32 value) {
  set_has_oldplayerid();
  oldplayerid_ = value;
  // @@protoc_insertion_point(field_set:PlayerIdChangedMessage.oldPlayerId)
}

// required uint32 newPlayerId = 2;
bool PlayerIdChangedMessage::has_newplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerIdChangedMessage::set_has_newplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerIdChangedMessage::clear_has_newplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerIdChangedMessage::clear_newplayerid() {
  newplayerid_ = 0u;
  clear_has_newplayerid();
}
 ::google::protobuf::uint32 PlayerIdChangedMessage::newplayerid() const {
  // @@protoc_insertion_point(field_get:PlayerIdChangedMessage.newPlayerId)
  return newplayerid_;
}
 void PlayerIdChangedMessage::set_newplayerid(::google::protobuf::uint32 value) {
  set_has_newplayerid();
  newplayerid_ = value;
  // @@protoc_insertion_point(field_set:PlayerIdChangedMessage.newPlayerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAskKickPlayerMessage(
    AskKickPlayerMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskKickPlayerMessage::kGameIdFieldNumber;
const int AskKickPlayerMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskKickPlayerMessage::AskKickPlayerMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AskKickPlayerMessage)
}

void AskKickPlayerMessage::InitAsDefaultInstance() {
}

AskKickPlayerMessage::AskKickPlayerMessage(const AskKickPlayerMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AskKickPlayerMessage)
}

void AskKickPlayerMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskKickPlayerMessage::~AskKickPlayerMessage() {
  // @@protoc_insertion_point(destructor:AskKickPlayerMessage)
  SharedDtor();
}

void AskKickPlayerMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AskKickPlayerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AskKickPlayerMessage& AskKickPlayerMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AskKickPlayerMessage* AskKickPlayerMessage::default_instance_ = NULL;

AskKickPlayerMessage* AskKickPlayerMessage::New(::google::protobuf::Arena* arena) const {
  AskKickPlayerMessage* n = new AskKickPlayerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskKickPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AskKickPlayerMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AskKickPlayerMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AskKickPlayerMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, playerid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AskKickPlayerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAskKickPlayerMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AskKickPlayerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AskKickPlayerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AskKickPlayerMessage)
  return false;
#undef DO_
}

void AskKickPlayerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AskKickPlayerMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AskKickPlayerMessage)
}

int AskKickPlayerMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AskKickPlayerMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
int AskKickPlayerMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AskKickPlayerMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskKickPlayerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AskKickPlayerMessage*>(&from));
}

void AskKickPlayerMessage::MergeFrom(const AskKickPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AskKickPlayerMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AskKickPlayerMessage::CopyFrom(const AskKickPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AskKickPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskKickPlayerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AskKickPlayerMessage::Swap(AskKickPlayerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskKickPlayerMessage::InternalSwap(AskKickPlayerMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AskKickPlayerMessage::GetTypeName() const {
  return "AskKickPlayerMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskKickPlayerMessage

// required uint32 gameId = 1;
bool AskKickPlayerMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AskKickPlayerMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void AskKickPlayerMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AskKickPlayerMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 AskKickPlayerMessage::gameid() const {
  // @@protoc_insertion_point(field_get:AskKickPlayerMessage.gameId)
  return gameid_;
}
 void AskKickPlayerMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:AskKickPlayerMessage.gameId)
}

// required uint32 playerId = 2;
bool AskKickPlayerMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AskKickPlayerMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void AskKickPlayerMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AskKickPlayerMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 AskKickPlayerMessage::playerid() const {
  // @@protoc_insertion_point(field_get:AskKickPlayerMessage.playerId)
  return playerid_;
}
 void AskKickPlayerMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:AskKickPlayerMessage.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAskKickDeniedMessage(
    AskKickDeniedMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool AskKickDeniedMessage_KickDeniedReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedInvalidGameState;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedNotPossible;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedTryAgainLater;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedAlreadyInProgress;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedInvalidPlayerId;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::KickDeniedReason_MIN;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::KickDeniedReason_MAX;
const int AskKickDeniedMessage::KickDeniedReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskKickDeniedMessage::kGameIdFieldNumber;
const int AskKickDeniedMessage::kPlayerIdFieldNumber;
const int AskKickDeniedMessage::kKickDeniedReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskKickDeniedMessage::AskKickDeniedMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AskKickDeniedMessage)
}

void AskKickDeniedMessage::InitAsDefaultInstance() {
}

AskKickDeniedMessage::AskKickDeniedMessage(const AskKickDeniedMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AskKickDeniedMessage)
}

void AskKickDeniedMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  kickdeniedreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskKickDeniedMessage::~AskKickDeniedMessage() {
  // @@protoc_insertion_point(destructor:AskKickDeniedMessage)
  SharedDtor();
}

void AskKickDeniedMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AskKickDeniedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AskKickDeniedMessage& AskKickDeniedMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AskKickDeniedMessage* AskKickDeniedMessage::default_instance_ = NULL;

AskKickDeniedMessage* AskKickDeniedMessage::New(::google::protobuf::Arena* arena) const {
  AskKickDeniedMessage* n = new AskKickDeniedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskKickDeniedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AskKickDeniedMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AskKickDeniedMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AskKickDeniedMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, kickdeniedreason_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AskKickDeniedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAskKickDeniedMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AskKickDeniedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kickDeniedReason;
        break;
      }

      // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
      case 3: {
        if (tag == 24) {
         parse_kickDeniedReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AskKickDeniedMessage_KickDeniedReason_IsValid(value)) {
            set_kickdeniedreason(static_cast< ::AskKickDeniedMessage_KickDeniedReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AskKickDeniedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AskKickDeniedMessage)
  return false;
#undef DO_
}

void AskKickDeniedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AskKickDeniedMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
  if (has_kickdeniedreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kickdeniedreason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AskKickDeniedMessage)
}

int AskKickDeniedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AskKickDeniedMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_kickdeniedreason()) {
    // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kickdeniedreason());
  }

  return total_size;
}
int AskKickDeniedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AskKickDeniedMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kickdeniedreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskKickDeniedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AskKickDeniedMessage*>(&from));
}

void AskKickDeniedMessage::MergeFrom(const AskKickDeniedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AskKickDeniedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_kickdeniedreason()) {
      set_kickdeniedreason(from.kickdeniedreason());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AskKickDeniedMessage::CopyFrom(const AskKickDeniedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AskKickDeniedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskKickDeniedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AskKickDeniedMessage::Swap(AskKickDeniedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskKickDeniedMessage::InternalSwap(AskKickDeniedMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(kickdeniedreason_, other->kickdeniedreason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AskKickDeniedMessage::GetTypeName() const {
  return "AskKickDeniedMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskKickDeniedMessage

// required uint32 gameId = 1;
bool AskKickDeniedMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AskKickDeniedMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void AskKickDeniedMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AskKickDeniedMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 AskKickDeniedMessage::gameid() const {
  // @@protoc_insertion_point(field_get:AskKickDeniedMessage.gameId)
  return gameid_;
}
 void AskKickDeniedMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:AskKickDeniedMessage.gameId)
}

// required uint32 playerId = 2;
bool AskKickDeniedMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AskKickDeniedMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void AskKickDeniedMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AskKickDeniedMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 AskKickDeniedMessage::playerid() const {
  // @@protoc_insertion_point(field_get:AskKickDeniedMessage.playerId)
  return playerid_;
}
 void AskKickDeniedMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:AskKickDeniedMessage.playerId)
}

// required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
bool AskKickDeniedMessage::has_kickdeniedreason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AskKickDeniedMessage::set_has_kickdeniedreason() {
  _has_bits_[0] |= 0x00000004u;
}
void AskKickDeniedMessage::clear_has_kickdeniedreason() {
  _has_bits_[0] &= ~0x00000004u;
}
void AskKickDeniedMessage::clear_kickdeniedreason() {
  kickdeniedreason_ = 0;
  clear_has_kickdeniedreason();
}
 ::AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickdeniedreason() const {
  // @@protoc_insertion_point(field_get:AskKickDeniedMessage.kickDeniedReason)
  return static_cast< ::AskKickDeniedMessage_KickDeniedReason >(kickdeniedreason_);
}
 void AskKickDeniedMessage::set_kickdeniedreason(::AskKickDeniedMessage_KickDeniedReason value) {
  assert(::AskKickDeniedMessage_KickDeniedReason_IsValid(value));
  set_has_kickdeniedreason();
  kickdeniedreason_ = value;
  // @@protoc_insertion_point(field_set:AskKickDeniedMessage.kickDeniedReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStartKickPetitionMessage(
    StartKickPetitionMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartKickPetitionMessage::kGameIdFieldNumber;
const int StartKickPetitionMessage::kPetitionIdFieldNumber;
const int StartKickPetitionMessage::kProposingPlayerIdFieldNumber;
const int StartKickPetitionMessage::kKickPlayerIdFieldNumber;
const int StartKickPetitionMessage::kKickTimeoutSecFieldNumber;
const int StartKickPetitionMessage::kNumVotesNeededToKickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartKickPetitionMessage::StartKickPetitionMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartKickPetitionMessage)
}

void StartKickPetitionMessage::InitAsDefaultInstance() {
}

StartKickPetitionMessage::StartKickPetitionMessage(const StartKickPetitionMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StartKickPetitionMessage)
}

void StartKickPetitionMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  petitionid_ = 0u;
  proposingplayerid_ = 0u;
  kickplayerid_ = 0u;
  kicktimeoutsec_ = 0u;
  numvotesneededtokick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartKickPetitionMessage::~StartKickPetitionMessage() {
  // @@protoc_insertion_point(destructor:StartKickPetitionMessage)
  SharedDtor();
}

void StartKickPetitionMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StartKickPetitionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartKickPetitionMessage& StartKickPetitionMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

StartKickPetitionMessage* StartKickPetitionMessage::default_instance_ = NULL;

StartKickPetitionMessage* StartKickPetitionMessage::New(::google::protobuf::Arena* arena) const {
  StartKickPetitionMessage* n = new StartKickPetitionMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartKickPetitionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StartKickPetitionMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StartKickPetitionMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StartKickPetitionMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(gameid_, numvotesneededtokick_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StartKickPetitionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForStartKickPetitionMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:StartKickPetitionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_petitionId;
        break;
      }

      // required uint32 petitionId = 2;
      case 2: {
        if (tag == 16) {
         parse_petitionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
          set_has_petitionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_proposingPlayerId;
        break;
      }

      // required uint32 proposingPlayerId = 3;
      case 3: {
        if (tag == 24) {
         parse_proposingPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proposingplayerid_)));
          set_has_proposingplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kickPlayerId;
        break;
      }

      // required uint32 kickPlayerId = 4;
      case 4: {
        if (tag == 32) {
         parse_kickPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kickplayerid_)));
          set_has_kickplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kickTimeoutSec;
        break;
      }

      // required uint32 kickTimeoutSec = 5;
      case 5: {
        if (tag == 40) {
         parse_kickTimeoutSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kicktimeoutsec_)));
          set_has_kicktimeoutsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_numVotesNeededToKick;
        break;
      }

      // required uint32 numVotesNeededToKick = 6;
      case 6: {
        if (tag == 48) {
         parse_numVotesNeededToKick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesneededtokick_)));
          set_has_numvotesneededtokick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StartKickPetitionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartKickPetitionMessage)
  return false;
#undef DO_
}

void StartKickPetitionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartKickPetitionMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }

  // required uint32 proposingPlayerId = 3;
  if (has_proposingplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->proposingplayerid(), output);
  }

  // required uint32 kickPlayerId = 4;
  if (has_kickplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kickplayerid(), output);
  }

  // required uint32 kickTimeoutSec = 5;
  if (has_kicktimeoutsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kicktimeoutsec(), output);
  }

  // required uint32 numVotesNeededToKick = 6;
  if (has_numvotesneededtokick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->numvotesneededtokick(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:StartKickPetitionMessage)
}

int StartKickPetitionMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StartKickPetitionMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_petitionid()) {
    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());
  }

  if (has_proposingplayerid()) {
    // required uint32 proposingPlayerId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proposingplayerid());
  }

  if (has_kickplayerid()) {
    // required uint32 kickPlayerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kickplayerid());
  }

  if (has_kicktimeoutsec()) {
    // required uint32 kickTimeoutSec = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kicktimeoutsec());
  }

  if (has_numvotesneededtokick()) {
    // required uint32 numVotesNeededToKick = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesneededtokick());
  }

  return total_size;
}
int StartKickPetitionMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StartKickPetitionMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());

    // required uint32 proposingPlayerId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proposingplayerid());

    // required uint32 kickPlayerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kickplayerid());

    // required uint32 kickTimeoutSec = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kicktimeoutsec());

    // required uint32 numVotesNeededToKick = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesneededtokick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartKickPetitionMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartKickPetitionMessage*>(&from));
}

void StartKickPetitionMessage::MergeFrom(const StartKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartKickPetitionMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_petitionid()) {
      set_petitionid(from.petitionid());
    }
    if (from.has_proposingplayerid()) {
      set_proposingplayerid(from.proposingplayerid());
    }
    if (from.has_kickplayerid()) {
      set_kickplayerid(from.kickplayerid());
    }
    if (from.has_kicktimeoutsec()) {
      set_kicktimeoutsec(from.kicktimeoutsec());
    }
    if (from.has_numvotesneededtokick()) {
      set_numvotesneededtokick(from.numvotesneededtokick());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StartKickPetitionMessage::CopyFrom(const StartKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartKickPetitionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartKickPetitionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void StartKickPetitionMessage::Swap(StartKickPetitionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartKickPetitionMessage::InternalSwap(StartKickPetitionMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(petitionid_, other->petitionid_);
  std::swap(proposingplayerid_, other->proposingplayerid_);
  std::swap(kickplayerid_, other->kickplayerid_);
  std::swap(kicktimeoutsec_, other->kicktimeoutsec_);
  std::swap(numvotesneededtokick_, other->numvotesneededtokick_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StartKickPetitionMessage::GetTypeName() const {
  return "StartKickPetitionMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartKickPetitionMessage

// required uint32 gameId = 1;
bool StartKickPetitionMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StartKickPetitionMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void StartKickPetitionMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void StartKickPetitionMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 StartKickPetitionMessage::gameid() const {
  // @@protoc_insertion_point(field_get:StartKickPetitionMessage.gameId)
  return gameid_;
}
 void StartKickPetitionMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:StartKickPetitionMessage.gameId)
}

// required uint32 petitionId = 2;
bool StartKickPetitionMessage::has_petitionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StartKickPetitionMessage::set_has_petitionid() {
  _has_bits_[0] |= 0x00000002u;
}
void StartKickPetitionMessage::clear_has_petitionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void StartKickPetitionMessage::clear_petitionid() {
  petitionid_ = 0u;
  clear_has_petitionid();
}
 ::google::protobuf::uint32 StartKickPetitionMessage::petitionid() const {
  // @@protoc_insertion_point(field_get:StartKickPetitionMessage.petitionId)
  return petitionid_;
}
 void StartKickPetitionMessage::set_petitionid(::google::protobuf::uint32 value) {
  set_has_petitionid();
  petitionid_ = value;
  // @@protoc_insertion_point(field_set:StartKickPetitionMessage.petitionId)
}

// required uint32 proposingPlayerId = 3;
bool StartKickPetitionMessage::has_proposingplayerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StartKickPetitionMessage::set_has_proposingplayerid() {
  _has_bits_[0] |= 0x00000004u;
}
void StartKickPetitionMessage::clear_has_proposingplayerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void StartKickPetitionMessage::clear_proposingplayerid() {
  proposingplayerid_ = 0u;
  clear_has_proposingplayerid();
}
 ::google::protobuf::uint32 StartKickPetitionMessage::proposingplayerid() const {
  // @@protoc_insertion_point(field_get:StartKickPetitionMessage.proposingPlayerId)
  return proposingplayerid_;
}
 void StartKickPetitionMessage::set_proposingplayerid(::google::protobuf::uint32 value) {
  set_has_proposingplayerid();
  proposingplayerid_ = value;
  // @@protoc_insertion_point(field_set:StartKickPetitionMessage.proposingPlayerId)
}

// required uint32 kickPlayerId = 4;
bool StartKickPetitionMessage::has_kickplayerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StartKickPetitionMessage::set_has_kickplayerid() {
  _has_bits_[0] |= 0x00000008u;
}
void StartKickPetitionMessage::clear_has_kickplayerid() {
  _has_bits_[0] &= ~0x00000008u;
}
void StartKickPetitionMessage::clear_kickplayerid() {
  kickplayerid_ = 0u;
  clear_has_kickplayerid();
}
 ::google::protobuf::uint32 StartKickPetitionMessage::kickplayerid() const {
  // @@protoc_insertion_point(field_get:StartKickPetitionMessage.kickPlayerId)
  return kickplayerid_;
}
 void StartKickPetitionMessage::set_kickplayerid(::google::protobuf::uint32 value) {
  set_has_kickplayerid();
  kickplayerid_ = value;
  // @@protoc_insertion_point(field_set:StartKickPetitionMessage.kickPlayerId)
}

// required uint32 kickTimeoutSec = 5;
bool StartKickPetitionMessage::has_kicktimeoutsec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StartKickPetitionMessage::set_has_kicktimeoutsec() {
  _has_bits_[0] |= 0x00000010u;
}
void StartKickPetitionMessage::clear_has_kicktimeoutsec() {
  _has_bits_[0] &= ~0x00000010u;
}
void StartKickPetitionMessage::clear_kicktimeoutsec() {
  kicktimeoutsec_ = 0u;
  clear_has_kicktimeoutsec();
}
 ::google::protobuf::uint32 StartKickPetitionMessage::kicktimeoutsec() const {
  // @@protoc_insertion_point(field_get:StartKickPetitionMessage.kickTimeoutSec)
  return kicktimeoutsec_;
}
 void StartKickPetitionMessage::set_kicktimeoutsec(::google::protobuf::uint32 value) {
  set_has_kicktimeoutsec();
  kicktimeoutsec_ = value;
  // @@protoc_insertion_point(field_set:StartKickPetitionMessage.kickTimeoutSec)
}

// required uint32 numVotesNeededToKick = 6;
bool StartKickPetitionMessage::has_numvotesneededtokick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StartKickPetitionMessage::set_has_numvotesneededtokick() {
  _has_bits_[0] |= 0x00000020u;
}
void StartKickPetitionMessage::clear_has_numvotesneededtokick() {
  _has_bits_[0] &= ~0x00000020u;
}
void StartKickPetitionMessage::clear_numvotesneededtokick() {
  numvotesneededtokick_ = 0u;
  clear_has_numvotesneededtokick();
}
 ::google::protobuf::uint32 StartKickPetitionMessage::numvotesneededtokick() const {
  // @@protoc_insertion_point(field_get:StartKickPetitionMessage.numVotesNeededToKick)
  return numvotesneededtokick_;
}
 void StartKickPetitionMessage::set_numvotesneededtokick(::google::protobuf::uint32 value) {
  set_has_numvotesneededtokick();
  numvotesneededtokick_ = value;
  // @@protoc_insertion_point(field_set:StartKickPetitionMessage.numVotesNeededToKick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForVoteKickRequestMessage(
    VoteKickRequestMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteKickRequestMessage::kGameIdFieldNumber;
const int VoteKickRequestMessage::kPetitionIdFieldNumber;
const int VoteKickRequestMessage::kVoteKickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteKickRequestMessage::VoteKickRequestMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoteKickRequestMessage)
}

void VoteKickRequestMessage::InitAsDefaultInstance() {
}

VoteKickRequestMessage::VoteKickRequestMessage(const VoteKickRequestMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoteKickRequestMessage)
}

void VoteKickRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  petitionid_ = 0u;
  votekick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteKickRequestMessage::~VoteKickRequestMessage() {
  // @@protoc_insertion_point(destructor:VoteKickRequestMessage)
  SharedDtor();
}

void VoteKickRequestMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VoteKickRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VoteKickRequestMessage& VoteKickRequestMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

VoteKickRequestMessage* VoteKickRequestMessage::default_instance_ = NULL;

VoteKickRequestMessage* VoteKickRequestMessage::New(::google::protobuf::Arena* arena) const {
  VoteKickRequestMessage* n = new VoteKickRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteKickRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:VoteKickRequestMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VoteKickRequestMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VoteKickRequestMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, votekick_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VoteKickRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForVoteKickRequestMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:VoteKickRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_petitionId;
        break;
      }

      // required uint32 petitionId = 2;
      case 2: {
        if (tag == 16) {
         parse_petitionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
          set_has_petitionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_voteKick;
        break;
      }

      // required bool voteKick = 3;
      case 3: {
        if (tag == 24) {
         parse_voteKick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votekick_)));
          set_has_votekick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoteKickRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoteKickRequestMessage)
  return false;
#undef DO_
}

void VoteKickRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoteKickRequestMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }

  // required bool voteKick = 3;
  if (has_votekick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->votekick(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:VoteKickRequestMessage)
}

int VoteKickRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VoteKickRequestMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_petitionid()) {
    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());
  }

  if (has_votekick()) {
    // required bool voteKick = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
int VoteKickRequestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:VoteKickRequestMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());

    // required bool voteKick = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteKickRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VoteKickRequestMessage*>(&from));
}

void VoteKickRequestMessage::MergeFrom(const VoteKickRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VoteKickRequestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_petitionid()) {
      set_petitionid(from.petitionid());
    }
    if (from.has_votekick()) {
      set_votekick(from.votekick());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void VoteKickRequestMessage::CopyFrom(const VoteKickRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoteKickRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteKickRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VoteKickRequestMessage::Swap(VoteKickRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteKickRequestMessage::InternalSwap(VoteKickRequestMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(petitionid_, other->petitionid_);
  std::swap(votekick_, other->votekick_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VoteKickRequestMessage::GetTypeName() const {
  return "VoteKickRequestMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoteKickRequestMessage

// required uint32 gameId = 1;
bool VoteKickRequestMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoteKickRequestMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void VoteKickRequestMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoteKickRequestMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 VoteKickRequestMessage::gameid() const {
  // @@protoc_insertion_point(field_get:VoteKickRequestMessage.gameId)
  return gameid_;
}
 void VoteKickRequestMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:VoteKickRequestMessage.gameId)
}

// required uint32 petitionId = 2;
bool VoteKickRequestMessage::has_petitionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoteKickRequestMessage::set_has_petitionid() {
  _has_bits_[0] |= 0x00000002u;
}
void VoteKickRequestMessage::clear_has_petitionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoteKickRequestMessage::clear_petitionid() {
  petitionid_ = 0u;
  clear_has_petitionid();
}
 ::google::protobuf::uint32 VoteKickRequestMessage::petitionid() const {
  // @@protoc_insertion_point(field_get:VoteKickRequestMessage.petitionId)
  return petitionid_;
}
 void VoteKickRequestMessage::set_petitionid(::google::protobuf::uint32 value) {
  set_has_petitionid();
  petitionid_ = value;
  // @@protoc_insertion_point(field_set:VoteKickRequestMessage.petitionId)
}

// required bool voteKick = 3;
bool VoteKickRequestMessage::has_votekick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoteKickRequestMessage::set_has_votekick() {
  _has_bits_[0] |= 0x00000004u;
}
void VoteKickRequestMessage::clear_has_votekick() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoteKickRequestMessage::clear_votekick() {
  votekick_ = false;
  clear_has_votekick();
}
 bool VoteKickRequestMessage::votekick() const {
  // @@protoc_insertion_point(field_get:VoteKickRequestMessage.voteKick)
  return votekick_;
}
 void VoteKickRequestMessage::set_votekick(bool value) {
  set_has_votekick();
  votekick_ = value;
  // @@protoc_insertion_point(field_set:VoteKickRequestMessage.voteKick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForVoteKickReplyMessage(
    VoteKickReplyMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool VoteKickReplyMessage_VoteKickReplyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickAck;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickDeniedInvalid;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickDeniedAlreadyVoted;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::VoteKickReplyType_MIN;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::VoteKickReplyType_MAX;
const int VoteKickReplyMessage::VoteKickReplyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteKickReplyMessage::kGameIdFieldNumber;
const int VoteKickReplyMessage::kPetitionIdFieldNumber;
const int VoteKickReplyMessage::kVoteKickReplyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteKickReplyMessage::VoteKickReplyMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoteKickReplyMessage)
}

void VoteKickReplyMessage::InitAsDefaultInstance() {
}

VoteKickReplyMessage::VoteKickReplyMessage(const VoteKickReplyMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoteKickReplyMessage)
}

void VoteKickReplyMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  petitionid_ = 0u;
  votekickreplytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteKickReplyMessage::~VoteKickReplyMessage() {
  // @@protoc_insertion_point(destructor:VoteKickReplyMessage)
  SharedDtor();
}

void VoteKickReplyMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VoteKickReplyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VoteKickReplyMessage& VoteKickReplyMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

VoteKickReplyMessage* VoteKickReplyMessage::default_instance_ = NULL;

VoteKickReplyMessage* VoteKickReplyMessage::New(::google::protobuf::Arena* arena) const {
  VoteKickReplyMessage* n = new VoteKickReplyMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteKickReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:VoteKickReplyMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VoteKickReplyMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VoteKickReplyMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gameid_, votekickreplytype_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VoteKickReplyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForVoteKickReplyMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:VoteKickReplyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_petitionId;
        break;
      }

      // required uint32 petitionId = 2;
      case 2: {
        if (tag == 16) {
         parse_petitionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
          set_has_petitionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_voteKickReplyType;
        break;
      }

      // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
      case 3: {
        if (tag == 24) {
         parse_voteKickReplyType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VoteKickReplyMessage_VoteKickReplyType_IsValid(value)) {
            set_votekickreplytype(static_cast< ::VoteKickReplyMessage_VoteKickReplyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoteKickReplyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoteKickReplyMessage)
  return false;
#undef DO_
}

void VoteKickReplyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoteKickReplyMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }

  // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
  if (has_votekickreplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->votekickreplytype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:VoteKickReplyMessage)
}

int VoteKickReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VoteKickReplyMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_petitionid()) {
    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());
  }

  if (has_votekickreplytype()) {
    // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->votekickreplytype());
  }

  return total_size;
}
int VoteKickReplyMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:VoteKickReplyMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());

    // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->votekickreplytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteKickReplyMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VoteKickReplyMessage*>(&from));
}

void VoteKickReplyMessage::MergeFrom(const VoteKickReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VoteKickReplyMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_petitionid()) {
      set_petitionid(from.petitionid());
    }
    if (from.has_votekickreplytype()) {
      set_votekickreplytype(from.votekickreplytype());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void VoteKickReplyMessage::CopyFrom(const VoteKickReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoteKickReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteKickReplyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VoteKickReplyMessage::Swap(VoteKickReplyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteKickReplyMessage::InternalSwap(VoteKickReplyMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(petitionid_, other->petitionid_);
  std::swap(votekickreplytype_, other->votekickreplytype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VoteKickReplyMessage::GetTypeName() const {
  return "VoteKickReplyMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoteKickReplyMessage

// required uint32 gameId = 1;
bool VoteKickReplyMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoteKickReplyMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void VoteKickReplyMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoteKickReplyMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 VoteKickReplyMessage::gameid() const {
  // @@protoc_insertion_point(field_get:VoteKickReplyMessage.gameId)
  return gameid_;
}
 void VoteKickReplyMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:VoteKickReplyMessage.gameId)
}

// required uint32 petitionId = 2;
bool VoteKickReplyMessage::has_petitionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoteKickReplyMessage::set_has_petitionid() {
  _has_bits_[0] |= 0x00000002u;
}
void VoteKickReplyMessage::clear_has_petitionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoteKickReplyMessage::clear_petitionid() {
  petitionid_ = 0u;
  clear_has_petitionid();
}
 ::google::protobuf::uint32 VoteKickReplyMessage::petitionid() const {
  // @@protoc_insertion_point(field_get:VoteKickReplyMessage.petitionId)
  return petitionid_;
}
 void VoteKickReplyMessage::set_petitionid(::google::protobuf::uint32 value) {
  set_has_petitionid();
  petitionid_ = value;
  // @@protoc_insertion_point(field_set:VoteKickReplyMessage.petitionId)
}

// required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
bool VoteKickReplyMessage::has_votekickreplytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoteKickReplyMessage::set_has_votekickreplytype() {
  _has_bits_[0] |= 0x00000004u;
}
void VoteKickReplyMessage::clear_has_votekickreplytype() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoteKickReplyMessage::clear_votekickreplytype() {
  votekickreplytype_ = 0;
  clear_has_votekickreplytype();
}
 ::VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::votekickreplytype() const {
  // @@protoc_insertion_point(field_get:VoteKickReplyMessage.voteKickReplyType)
  return static_cast< ::VoteKickReplyMessage_VoteKickReplyType >(votekickreplytype_);
}
 void VoteKickReplyMessage::set_votekickreplytype(::VoteKickReplyMessage_VoteKickReplyType value) {
  assert(::VoteKickReplyMessage_VoteKickReplyType_IsValid(value));
  set_has_votekickreplytype();
  votekickreplytype_ = value;
  // @@protoc_insertion_point(field_set:VoteKickReplyMessage.voteKickReplyType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForKickPetitionUpdateMessage(
    KickPetitionUpdateMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickPetitionUpdateMessage::kGameIdFieldNumber;
const int KickPetitionUpdateMessage::kPetitionIdFieldNumber;
const int KickPetitionUpdateMessage::kNumVotesAgainstKickingFieldNumber;
const int KickPetitionUpdateMessage::kNumVotesInFavourOfKickingFieldNumber;
const int KickPetitionUpdateMessage::kNumVotesNeededToKickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickPetitionUpdateMessage::KickPetitionUpdateMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KickPetitionUpdateMessage)
}

void KickPetitionUpdateMessage::InitAsDefaultInstance() {
}

KickPetitionUpdateMessage::KickPetitionUpdateMessage(const KickPetitionUpdateMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KickPetitionUpdateMessage)
}

void KickPetitionUpdateMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  petitionid_ = 0u;
  numvotesagainstkicking_ = 0u;
  numvotesinfavourofkicking_ = 0u;
  numvotesneededtokick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickPetitionUpdateMessage::~KickPetitionUpdateMessage() {
  // @@protoc_insertion_point(destructor:KickPetitionUpdateMessage)
  SharedDtor();
}

void KickPetitionUpdateMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KickPetitionUpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KickPetitionUpdateMessage& KickPetitionUpdateMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

KickPetitionUpdateMessage* KickPetitionUpdateMessage::default_instance_ = NULL;

KickPetitionUpdateMessage* KickPetitionUpdateMessage::New(::google::protobuf::Arena* arena) const {
  KickPetitionUpdateMessage* n = new KickPetitionUpdateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KickPetitionUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KickPetitionUpdateMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KickPetitionUpdateMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KickPetitionUpdateMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(gameid_, numvotesneededtokick_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KickPetitionUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForKickPetitionUpdateMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:KickPetitionUpdateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_petitionId;
        break;
      }

      // required uint32 petitionId = 2;
      case 2: {
        if (tag == 16) {
         parse_petitionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
          set_has_petitionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_numVotesAgainstKicking;
        break;
      }

      // required uint32 numVotesAgainstKicking = 3;
      case 3: {
        if (tag == 24) {
         parse_numVotesAgainstKicking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesagainstkicking_)));
          set_has_numvotesagainstkicking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_numVotesInFavourOfKicking;
        break;
      }

      // required uint32 numVotesInFavourOfKicking = 4;
      case 4: {
        if (tag == 32) {
         parse_numVotesInFavourOfKicking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesinfavourofkicking_)));
          set_has_numvotesinfavourofkicking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_numVotesNeededToKick;
        break;
      }

      // required uint32 numVotesNeededToKick = 5;
      case 5: {
        if (tag == 40) {
         parse_numVotesNeededToKick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesneededtokick_)));
          set_has_numvotesneededtokick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KickPetitionUpdateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KickPetitionUpdateMessage)
  return false;
#undef DO_
}

void KickPetitionUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KickPetitionUpdateMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }

  // required uint32 numVotesAgainstKicking = 3;
  if (has_numvotesagainstkicking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->numvotesagainstkicking(), output);
  }

  // required uint32 numVotesInFavourOfKicking = 4;
  if (has_numvotesinfavourofkicking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numvotesinfavourofkicking(), output);
  }

  // required uint32 numVotesNeededToKick = 5;
  if (has_numvotesneededtokick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->numvotesneededtokick(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:KickPetitionUpdateMessage)
}

int KickPetitionUpdateMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KickPetitionUpdateMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_petitionid()) {
    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());
  }

  if (has_numvotesagainstkicking()) {
    // required uint32 numVotesAgainstKicking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesagainstkicking());
  }

  if (has_numvotesinfavourofkicking()) {
    // required uint32 numVotesInFavourOfKicking = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesinfavourofkicking());
  }

  if (has_numvotesneededtokick()) {
    // required uint32 numVotesNeededToKick = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesneededtokick());
  }

  return total_size;
}
int KickPetitionUpdateMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KickPetitionUpdateMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());

    // required uint32 numVotesAgainstKicking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesagainstkicking());

    // required uint32 numVotesInFavourOfKicking = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesinfavourofkicking());

    // required uint32 numVotesNeededToKick = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesneededtokick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickPetitionUpdateMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KickPetitionUpdateMessage*>(&from));
}

void KickPetitionUpdateMessage::MergeFrom(const KickPetitionUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KickPetitionUpdateMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_petitionid()) {
      set_petitionid(from.petitionid());
    }
    if (from.has_numvotesagainstkicking()) {
      set_numvotesagainstkicking(from.numvotesagainstkicking());
    }
    if (from.has_numvotesinfavourofkicking()) {
      set_numvotesinfavourofkicking(from.numvotesinfavourofkicking());
    }
    if (from.has_numvotesneededtokick()) {
      set_numvotesneededtokick(from.numvotesneededtokick());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void KickPetitionUpdateMessage::CopyFrom(const KickPetitionUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickPetitionUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPetitionUpdateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void KickPetitionUpdateMessage::Swap(KickPetitionUpdateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickPetitionUpdateMessage::InternalSwap(KickPetitionUpdateMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(petitionid_, other->petitionid_);
  std::swap(numvotesagainstkicking_, other->numvotesagainstkicking_);
  std::swap(numvotesinfavourofkicking_, other->numvotesinfavourofkicking_);
  std::swap(numvotesneededtokick_, other->numvotesneededtokick_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string KickPetitionUpdateMessage::GetTypeName() const {
  return "KickPetitionUpdateMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KickPetitionUpdateMessage

// required uint32 gameId = 1;
bool KickPetitionUpdateMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KickPetitionUpdateMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void KickPetitionUpdateMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void KickPetitionUpdateMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 KickPetitionUpdateMessage::gameid() const {
  // @@protoc_insertion_point(field_get:KickPetitionUpdateMessage.gameId)
  return gameid_;
}
 void KickPetitionUpdateMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:KickPetitionUpdateMessage.gameId)
}

// required uint32 petitionId = 2;
bool KickPetitionUpdateMessage::has_petitionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KickPetitionUpdateMessage::set_has_petitionid() {
  _has_bits_[0] |= 0x00000002u;
}
void KickPetitionUpdateMessage::clear_has_petitionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void KickPetitionUpdateMessage::clear_petitionid() {
  petitionid_ = 0u;
  clear_has_petitionid();
}
 ::google::protobuf::uint32 KickPetitionUpdateMessage::petitionid() const {
  // @@protoc_insertion_point(field_get:KickPetitionUpdateMessage.petitionId)
  return petitionid_;
}
 void KickPetitionUpdateMessage::set_petitionid(::google::protobuf::uint32 value) {
  set_has_petitionid();
  petitionid_ = value;
  // @@protoc_insertion_point(field_set:KickPetitionUpdateMessage.petitionId)
}

// required uint32 numVotesAgainstKicking = 3;
bool KickPetitionUpdateMessage::has_numvotesagainstkicking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KickPetitionUpdateMessage::set_has_numvotesagainstkicking() {
  _has_bits_[0] |= 0x00000004u;
}
void KickPetitionUpdateMessage::clear_has_numvotesagainstkicking() {
  _has_bits_[0] &= ~0x00000004u;
}
void KickPetitionUpdateMessage::clear_numvotesagainstkicking() {
  numvotesagainstkicking_ = 0u;
  clear_has_numvotesagainstkicking();
}
 ::google::protobuf::uint32 KickPetitionUpdateMessage::numvotesagainstkicking() const {
  // @@protoc_insertion_point(field_get:KickPetitionUpdateMessage.numVotesAgainstKicking)
  return numvotesagainstkicking_;
}
 void KickPetitionUpdateMessage::set_numvotesagainstkicking(::google::protobuf::uint32 value) {
  set_has_numvotesagainstkicking();
  numvotesagainstkicking_ = value;
  // @@protoc_insertion_point(field_set:KickPetitionUpdateMessage.numVotesAgainstKicking)
}

// required uint32 numVotesInFavourOfKicking = 4;
bool KickPetitionUpdateMessage::has_numvotesinfavourofkicking() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KickPetitionUpdateMessage::set_has_numvotesinfavourofkicking() {
  _has_bits_[0] |= 0x00000008u;
}
void KickPetitionUpdateMessage::clear_has_numvotesinfavourofkicking() {
  _has_bits_[0] &= ~0x00000008u;
}
void KickPetitionUpdateMessage::clear_numvotesinfavourofkicking() {
  numvotesinfavourofkicking_ = 0u;
  clear_has_numvotesinfavourofkicking();
}
 ::google::protobuf::uint32 KickPetitionUpdateMessage::numvotesinfavourofkicking() const {
  // @@protoc_insertion_point(field_get:KickPetitionUpdateMessage.numVotesInFavourOfKicking)
  return numvotesinfavourofkicking_;
}
 void KickPetitionUpdateMessage::set_numvotesinfavourofkicking(::google::protobuf::uint32 value) {
  set_has_numvotesinfavourofkicking();
  numvotesinfavourofkicking_ = value;
  // @@protoc_insertion_point(field_set:KickPetitionUpdateMessage.numVotesInFavourOfKicking)
}

// required uint32 numVotesNeededToKick = 5;
bool KickPetitionUpdateMessage::has_numvotesneededtokick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KickPetitionUpdateMessage::set_has_numvotesneededtokick() {
  _has_bits_[0] |= 0x00000010u;
}
void KickPetitionUpdateMessage::clear_has_numvotesneededtokick() {
  _has_bits_[0] &= ~0x00000010u;
}
void KickPetitionUpdateMessage::clear_numvotesneededtokick() {
  numvotesneededtokick_ = 0u;
  clear_has_numvotesneededtokick();
}
 ::google::protobuf::uint32 KickPetitionUpdateMessage::numvotesneededtokick() const {
  // @@protoc_insertion_point(field_get:KickPetitionUpdateMessage.numVotesNeededToKick)
  return numvotesneededtokick_;
}
 void KickPetitionUpdateMessage::set_numvotesneededtokick(::google::protobuf::uint32 value) {
  set_has_numvotesneededtokick();
  numvotesneededtokick_ = value;
  // @@protoc_insertion_point(field_set:KickPetitionUpdateMessage.numVotesNeededToKick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForEndKickPetitionMessage(
    EndKickPetitionMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool EndKickPetitionMessage_PetitionEndReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndEnoughVotes;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndTooFewPlayers;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndPlayerLeft;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndTimeout;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::PetitionEndReason_MIN;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::PetitionEndReason_MAX;
const int EndKickPetitionMessage::PetitionEndReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndKickPetitionMessage::kGameIdFieldNumber;
const int EndKickPetitionMessage::kPetitionIdFieldNumber;
const int EndKickPetitionMessage::kNumVotesAgainstKickingFieldNumber;
const int EndKickPetitionMessage::kNumVotesInFavourOfKickingFieldNumber;
const int EndKickPetitionMessage::kResultPlayerKickedFieldNumber;
const int EndKickPetitionMessage::kPetitionEndReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndKickPetitionMessage::EndKickPetitionMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndKickPetitionMessage)
}

void EndKickPetitionMessage::InitAsDefaultInstance() {
}

EndKickPetitionMessage::EndKickPetitionMessage(const EndKickPetitionMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EndKickPetitionMessage)
}

void EndKickPetitionMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  petitionid_ = 0u;
  numvotesagainstkicking_ = 0u;
  numvotesinfavourofkicking_ = 0u;
  resultplayerkicked_ = 0u;
  petitionendreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndKickPetitionMessage::~EndKickPetitionMessage() {
  // @@protoc_insertion_point(destructor:EndKickPetitionMessage)
  SharedDtor();
}

void EndKickPetitionMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EndKickPetitionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EndKickPetitionMessage& EndKickPetitionMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

EndKickPetitionMessage* EndKickPetitionMessage::default_instance_ = NULL;

EndKickPetitionMessage* EndKickPetitionMessage::New(::google::protobuf::Arena* arena) const {
  EndKickPetitionMessage* n = new EndKickPetitionMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndKickPetitionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndKickPetitionMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EndKickPetitionMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EndKickPetitionMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(gameid_, petitionendreason_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EndKickPetitionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForEndKickPetitionMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:EndKickPetitionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_petitionId;
        break;
      }

      // required uint32 petitionId = 2;
      case 2: {
        if (tag == 16) {
         parse_petitionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
          set_has_petitionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_numVotesAgainstKicking;
        break;
      }

      // required uint32 numVotesAgainstKicking = 3;
      case 3: {
        if (tag == 24) {
         parse_numVotesAgainstKicking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesagainstkicking_)));
          set_has_numvotesagainstkicking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_numVotesInFavourOfKicking;
        break;
      }

      // required uint32 numVotesInFavourOfKicking = 4;
      case 4: {
        if (tag == 32) {
         parse_numVotesInFavourOfKicking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesinfavourofkicking_)));
          set_has_numvotesinfavourofkicking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_resultPlayerKicked;
        break;
      }

      // required uint32 resultPlayerKicked = 5;
      case 5: {
        if (tag == 40) {
         parse_resultPlayerKicked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultplayerkicked_)));
          set_has_resultplayerkicked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_petitionEndReason;
        break;
      }

      // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
      case 6: {
        if (tag == 48) {
         parse_petitionEndReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EndKickPetitionMessage_PetitionEndReason_IsValid(value)) {
            set_petitionendreason(static_cast< ::EndKickPetitionMessage_PetitionEndReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EndKickPetitionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EndKickPetitionMessage)
  return false;
#undef DO_
}

void EndKickPetitionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EndKickPetitionMessage)
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }

  // required uint32 numVotesAgainstKicking = 3;
  if (has_numvotesagainstkicking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->numvotesagainstkicking(), output);
  }

  // required uint32 numVotesInFavourOfKicking = 4;
  if (has_numvotesinfavourofkicking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numvotesinfavourofkicking(), output);
  }

  // required uint32 resultPlayerKicked = 5;
  if (has_resultplayerkicked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resultplayerkicked(), output);
  }

  // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
  if (has_petitionendreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->petitionendreason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:EndKickPetitionMessage)
}

int EndKickPetitionMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EndKickPetitionMessage)
  int total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_petitionid()) {
    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());
  }

  if (has_numvotesagainstkicking()) {
    // required uint32 numVotesAgainstKicking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesagainstkicking());
  }

  if (has_numvotesinfavourofkicking()) {
    // required uint32 numVotesInFavourOfKicking = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesinfavourofkicking());
  }

  if (has_resultplayerkicked()) {
    // required uint32 resultPlayerKicked = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultplayerkicked());
  }

  if (has_petitionendreason()) {
    // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->petitionendreason());
  }

  return total_size;
}
int EndKickPetitionMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EndKickPetitionMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());

    // required uint32 numVotesAgainstKicking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesagainstkicking());

    // required uint32 numVotesInFavourOfKicking = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesinfavourofkicking());

    // required uint32 resultPlayerKicked = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultplayerkicked());

    // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->petitionendreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndKickPetitionMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndKickPetitionMessage*>(&from));
}

void EndKickPetitionMessage::MergeFrom(const EndKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndKickPetitionMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_petitionid()) {
      set_petitionid(from.petitionid());
    }
    if (from.has_numvotesagainstkicking()) {
      set_numvotesagainstkicking(from.numvotesagainstkicking());
    }
    if (from.has_numvotesinfavourofkicking()) {
      set_numvotesinfavourofkicking(from.numvotesinfavourofkicking());
    }
    if (from.has_resultplayerkicked()) {
      set_resultplayerkicked(from.resultplayerkicked());
    }
    if (from.has_petitionendreason()) {
      set_petitionendreason(from.petitionendreason());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void EndKickPetitionMessage::CopyFrom(const EndKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndKickPetitionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndKickPetitionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void EndKickPetitionMessage::Swap(EndKickPetitionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndKickPetitionMessage::InternalSwap(EndKickPetitionMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(petitionid_, other->petitionid_);
  std::swap(numvotesagainstkicking_, other->numvotesagainstkicking_);
  std::swap(numvotesinfavourofkicking_, other->numvotesinfavourofkicking_);
  std::swap(resultplayerkicked_, other->resultplayerkicked_);
  std::swap(petitionendreason_, other->petitionendreason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EndKickPetitionMessage::GetTypeName() const {
  return "EndKickPetitionMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndKickPetitionMessage

// required uint32 gameId = 1;
bool EndKickPetitionMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EndKickPetitionMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void EndKickPetitionMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void EndKickPetitionMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 EndKickPetitionMessage::gameid() const {
  // @@protoc_insertion_point(field_get:EndKickPetitionMessage.gameId)
  return gameid_;
}
 void EndKickPetitionMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:EndKickPetitionMessage.gameId)
}

// required uint32 petitionId = 2;
bool EndKickPetitionMessage::has_petitionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EndKickPetitionMessage::set_has_petitionid() {
  _has_bits_[0] |= 0x00000002u;
}
void EndKickPetitionMessage::clear_has_petitionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void EndKickPetitionMessage::clear_petitionid() {
  petitionid_ = 0u;
  clear_has_petitionid();
}
 ::google::protobuf::uint32 EndKickPetitionMessage::petitionid() const {
  // @@protoc_insertion_point(field_get:EndKickPetitionMessage.petitionId)
  return petitionid_;
}
 void EndKickPetitionMessage::set_petitionid(::google::protobuf::uint32 value) {
  set_has_petitionid();
  petitionid_ = value;
  // @@protoc_insertion_point(field_set:EndKickPetitionMessage.petitionId)
}

// required uint32 numVotesAgainstKicking = 3;
bool EndKickPetitionMessage::has_numvotesagainstkicking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EndKickPetitionMessage::set_has_numvotesagainstkicking() {
  _has_bits_[0] |= 0x00000004u;
}
void EndKickPetitionMessage::clear_has_numvotesagainstkicking() {
  _has_bits_[0] &= ~0x00000004u;
}
void EndKickPetitionMessage::clear_numvotesagainstkicking() {
  numvotesagainstkicking_ = 0u;
  clear_has_numvotesagainstkicking();
}
 ::google::protobuf::uint32 EndKickPetitionMessage::numvotesagainstkicking() const {
  // @@protoc_insertion_point(field_get:EndKickPetitionMessage.numVotesAgainstKicking)
  return numvotesagainstkicking_;
}
 void EndKickPetitionMessage::set_numvotesagainstkicking(::google::protobuf::uint32 value) {
  set_has_numvotesagainstkicking();
  numvotesagainstkicking_ = value;
  // @@protoc_insertion_point(field_set:EndKickPetitionMessage.numVotesAgainstKicking)
}

// required uint32 numVotesInFavourOfKicking = 4;
bool EndKickPetitionMessage::has_numvotesinfavourofkicking() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EndKickPetitionMessage::set_has_numvotesinfavourofkicking() {
  _has_bits_[0] |= 0x00000008u;
}
void EndKickPetitionMessage::clear_has_numvotesinfavourofkicking() {
  _has_bits_[0] &= ~0x00000008u;
}
void EndKickPetitionMessage::clear_numvotesinfavourofkicking() {
  numvotesinfavourofkicking_ = 0u;
  clear_has_numvotesinfavourofkicking();
}
 ::google::protobuf::uint32 EndKickPetitionMessage::numvotesinfavourofkicking() const {
  // @@protoc_insertion_point(field_get:EndKickPetitionMessage.numVotesInFavourOfKicking)
  return numvotesinfavourofkicking_;
}
 void EndKickPetitionMessage::set_numvotesinfavourofkicking(::google::protobuf::uint32 value) {
  set_has_numvotesinfavourofkicking();
  numvotesinfavourofkicking_ = value;
  // @@protoc_insertion_point(field_set:EndKickPetitionMessage.numVotesInFavourOfKicking)
}

// required uint32 resultPlayerKicked = 5;
bool EndKickPetitionMessage::has_resultplayerkicked() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EndKickPetitionMessage::set_has_resultplayerkicked() {
  _has_bits_[0] |= 0x00000010u;
}
void EndKickPetitionMessage::clear_has_resultplayerkicked() {
  _has_bits_[0] &= ~0x00000010u;
}
void EndKickPetitionMessage::clear_resultplayerkicked() {
  resultplayerkicked_ = 0u;
  clear_has_resultplayerkicked();
}
 ::google::protobuf::uint32 EndKickPetitionMessage::resultplayerkicked() const {
  // @@protoc_insertion_point(field_get:EndKickPetitionMessage.resultPlayerKicked)
  return resultplayerkicked_;
}
 void EndKickPetitionMessage::set_resultplayerkicked(::google::protobuf::uint32 value) {
  set_has_resultplayerkicked();
  resultplayerkicked_ = value;
  // @@protoc_insertion_point(field_set:EndKickPetitionMessage.resultPlayerKicked)
}

// required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
bool EndKickPetitionMessage::has_petitionendreason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EndKickPetitionMessage::set_has_petitionendreason() {
  _has_bits_[0] |= 0x00000020u;
}
void EndKickPetitionMessage::clear_has_petitionendreason() {
  _has_bits_[0] &= ~0x00000020u;
}
void EndKickPetitionMessage::clear_petitionendreason() {
  petitionendreason_ = 0;
  clear_has_petitionendreason();
}
 ::EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionendreason() const {
  // @@protoc_insertion_point(field_get:EndKickPetitionMessage.petitionEndReason)
  return static_cast< ::EndKickPetitionMessage_PetitionEndReason >(petitionendreason_);
}
 void EndKickPetitionMessage::set_petitionendreason(::EndKickPetitionMessage_PetitionEndReason value) {
  assert(::EndKickPetitionMessage_PetitionEndReason_IsValid(value));
  set_has_petitionendreason();
  petitionendreason_ = value;
  // @@protoc_insertion_point(field_set:EndKickPetitionMessage.petitionEndReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStatisticsMessage(
    StatisticsMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForStatisticsMessage_StatisticsData(
    StatisticsMessage_StatisticsData* ptr) {
  return ptr->mutable_unknown_fields();
}

bool StatisticsMessage_StatisticsData_StatisticsType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::statNumberOfPlayers;
const StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::StatisticsType_MIN;
const StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::StatisticsType_MAX;
const int StatisticsMessage_StatisticsData::StatisticsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticsMessage_StatisticsData::kStatisticsTypeFieldNumber;
const int StatisticsMessage_StatisticsData::kStatisticsValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticsMessage_StatisticsData::StatisticsMessage_StatisticsData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StatisticsMessage.StatisticsData)
}

void StatisticsMessage_StatisticsData::InitAsDefaultInstance() {
}

StatisticsMessage_StatisticsData::StatisticsMessage_StatisticsData(const StatisticsMessage_StatisticsData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StatisticsMessage.StatisticsData)
}

void StatisticsMessage_StatisticsData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statisticstype_ = 1;
  statisticsvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticsMessage_StatisticsData::~StatisticsMessage_StatisticsData() {
  // @@protoc_insertion_point(destructor:StatisticsMessage.StatisticsData)
  SharedDtor();
}

void StatisticsMessage_StatisticsData::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StatisticsMessage_StatisticsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StatisticsMessage_StatisticsData& StatisticsMessage_StatisticsData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

StatisticsMessage_StatisticsData* StatisticsMessage_StatisticsData::default_instance_ = NULL;

StatisticsMessage_StatisticsData* StatisticsMessage_StatisticsData::New(::google::protobuf::Arena* arena) const {
  StatisticsMessage_StatisticsData* n = new StatisticsMessage_StatisticsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatisticsMessage_StatisticsData::Clear() {
// @@protoc_insertion_point(message_clear_start:StatisticsMessage.StatisticsData)
  if (_has_bits_[0 / 32] & 3u) {
    statisticstype_ = 1;
    statisticsvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StatisticsMessage_StatisticsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForStatisticsMessage_StatisticsData, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:StatisticsMessage.StatisticsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StatisticsMessage_StatisticsData_StatisticsType_IsValid(value)) {
            set_statisticstype(static_cast< ::StatisticsMessage_StatisticsData_StatisticsType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_statisticsValue;
        break;
      }

      // required uint32 statisticsValue = 2;
      case 2: {
        if (tag == 16) {
         parse_statisticsValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statisticsvalue_)));
          set_has_statisticsvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StatisticsMessage.StatisticsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StatisticsMessage.StatisticsData)
  return false;
#undef DO_
}

void StatisticsMessage_StatisticsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StatisticsMessage.StatisticsData)
  // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
  if (has_statisticstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->statisticstype(), output);
  }

  // required uint32 statisticsValue = 2;
  if (has_statisticsvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->statisticsvalue(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:StatisticsMessage.StatisticsData)
}

int StatisticsMessage_StatisticsData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StatisticsMessage.StatisticsData)
  int total_size = 0;

  if (has_statisticstype()) {
    // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statisticstype());
  }

  if (has_statisticsvalue()) {
    // required uint32 statisticsValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->statisticsvalue());
  }

  return total_size;
}
int StatisticsMessage_StatisticsData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StatisticsMessage.StatisticsData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statisticstype());

    // required uint32 statisticsValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->statisticsvalue());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticsMessage_StatisticsData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StatisticsMessage_StatisticsData*>(&from));
}

void StatisticsMessage_StatisticsData::MergeFrom(const StatisticsMessage_StatisticsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatisticsMessage.StatisticsData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statisticstype()) {
      set_statisticstype(from.statisticstype());
    }
    if (from.has_statisticsvalue()) {
      set_statisticsvalue(from.statisticsvalue());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StatisticsMessage_StatisticsData::CopyFrom(const StatisticsMessage_StatisticsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatisticsMessage.StatisticsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsMessage_StatisticsData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StatisticsMessage_StatisticsData::Swap(StatisticsMessage_StatisticsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticsMessage_StatisticsData::InternalSwap(StatisticsMessage_StatisticsData* other) {
  std::swap(statisticstype_, other->statisticstype_);
  std::swap(statisticsvalue_, other->statisticsvalue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StatisticsMessage_StatisticsData::GetTypeName() const {
  return "StatisticsMessage.StatisticsData";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticsMessage::kStatisticsDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticsMessage::StatisticsMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StatisticsMessage)
}

void StatisticsMessage::InitAsDefaultInstance() {
}

StatisticsMessage::StatisticsMessage(const StatisticsMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StatisticsMessage)
}

void StatisticsMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticsMessage::~StatisticsMessage() {
  // @@protoc_insertion_point(destructor:StatisticsMessage)
  SharedDtor();
}

void StatisticsMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StatisticsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StatisticsMessage& StatisticsMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

StatisticsMessage* StatisticsMessage::default_instance_ = NULL;

StatisticsMessage* StatisticsMessage::New(::google::protobuf::Arena* arena) const {
  StatisticsMessage* n = new StatisticsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatisticsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StatisticsMessage)
  statisticsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StatisticsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForStatisticsMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:StatisticsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_statisticsData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_statisticsdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_statisticsData;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StatisticsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StatisticsMessage)
  return false;
#undef DO_
}

void StatisticsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StatisticsMessage)
  // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
  for (unsigned int i = 0, n = this->statisticsdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->statisticsdata(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:StatisticsMessage)
}

int StatisticsMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StatisticsMessage)
  int total_size = 0;

  // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
  total_size += 1 * this->statisticsdata_size();
  for (int i = 0; i < this->statisticsdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statisticsdata(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StatisticsMessage*>(&from));
}

void StatisticsMessage::MergeFrom(const StatisticsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatisticsMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  statisticsdata_.MergeFrom(from.statisticsdata_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StatisticsMessage::CopyFrom(const StatisticsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatisticsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->statisticsdata())) return false;
  return true;
}

void StatisticsMessage::Swap(StatisticsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticsMessage::InternalSwap(StatisticsMessage* other) {
  statisticsdata_.UnsafeArenaSwap(&other->statisticsdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StatisticsMessage::GetTypeName() const {
  return "StatisticsMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatisticsMessage_StatisticsData

// required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
bool StatisticsMessage_StatisticsData::has_statisticstype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StatisticsMessage_StatisticsData::set_has_statisticstype() {
  _has_bits_[0] |= 0x00000001u;
}
void StatisticsMessage_StatisticsData::clear_has_statisticstype() {
  _has_bits_[0] &= ~0x00000001u;
}
void StatisticsMessage_StatisticsData::clear_statisticstype() {
  statisticstype_ = 1;
  clear_has_statisticstype();
}
 ::StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::statisticstype() const {
  // @@protoc_insertion_point(field_get:StatisticsMessage.StatisticsData.statisticsType)
  return static_cast< ::StatisticsMessage_StatisticsData_StatisticsType >(statisticstype_);
}
 void StatisticsMessage_StatisticsData::set_statisticstype(::StatisticsMessage_StatisticsData_StatisticsType value) {
  assert(::StatisticsMessage_StatisticsData_StatisticsType_IsValid(value));
  set_has_statisticstype();
  statisticstype_ = value;
  // @@protoc_insertion_point(field_set:StatisticsMessage.StatisticsData.statisticsType)
}

// required uint32 statisticsValue = 2;
bool StatisticsMessage_StatisticsData::has_statisticsvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StatisticsMessage_StatisticsData::set_has_statisticsvalue() {
  _has_bits_[0] |= 0x00000002u;
}
void StatisticsMessage_StatisticsData::clear_has_statisticsvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
void StatisticsMessage_StatisticsData::clear_statisticsvalue() {
  statisticsvalue_ = 0u;
  clear_has_statisticsvalue();
}
 ::google::protobuf::uint32 StatisticsMessage_StatisticsData::statisticsvalue() const {
  // @@protoc_insertion_point(field_get:StatisticsMessage.StatisticsData.statisticsValue)
  return statisticsvalue_;
}
 void StatisticsMessage_StatisticsData::set_statisticsvalue(::google::protobuf::uint32 value) {
  set_has_statisticsvalue();
  statisticsvalue_ = value;
  // @@protoc_insertion_point(field_set:StatisticsMessage.StatisticsData.statisticsValue)
}

// -------------------------------------------------------------------

// StatisticsMessage

// repeated .StatisticsMessage.StatisticsData statisticsData = 1;
int StatisticsMessage::statisticsdata_size() const {
  return statisticsdata_.size();
}
void StatisticsMessage::clear_statisticsdata() {
  statisticsdata_.Clear();
}
const ::StatisticsMessage_StatisticsData& StatisticsMessage::statisticsdata(int index) const {
  // @@protoc_insertion_point(field_get:StatisticsMessage.statisticsData)
  return statisticsdata_.Get(index);
}
::StatisticsMessage_StatisticsData* StatisticsMessage::mutable_statisticsdata(int index) {
  // @@protoc_insertion_point(field_mutable:StatisticsMessage.statisticsData)
  return statisticsdata_.Mutable(index);
}
::StatisticsMessage_StatisticsData* StatisticsMessage::add_statisticsdata() {
  // @@protoc_insertion_point(field_add:StatisticsMessage.statisticsData)
  return statisticsdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::StatisticsMessage_StatisticsData >*
StatisticsMessage::mutable_statisticsdata() {
  // @@protoc_insertion_point(field_mutable_list:StatisticsMessage.statisticsData)
  return &statisticsdata_;
}
const ::google::protobuf::RepeatedPtrField< ::StatisticsMessage_StatisticsData >&
StatisticsMessage::statisticsdata() const {
  // @@protoc_insertion_point(field_list:StatisticsMessage.statisticsData)
  return statisticsdata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForChatRequestMessage(
    ChatRequestMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRequestMessage::kTargetGameIdFieldNumber;
const int ChatRequestMessage::kTargetPlayerIdFieldNumber;
const int ChatRequestMessage::kChatTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRequestMessage::ChatRequestMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatRequestMessage)
}

void ChatRequestMessage::InitAsDefaultInstance() {
}

ChatRequestMessage::ChatRequestMessage(const ChatRequestMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChatRequestMessage)
}

void ChatRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetgameid_ = 0u;
  targetplayerid_ = 0u;
  chattext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRequestMessage::~ChatRequestMessage() {
  // @@protoc_insertion_point(destructor:ChatRequestMessage)
  SharedDtor();
}

void ChatRequestMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chattext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChatRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChatRequestMessage& ChatRequestMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

ChatRequestMessage* ChatRequestMessage::default_instance_ = NULL;

ChatRequestMessage* ChatRequestMessage::New(::google::protobuf::Arena* arena) const {
  ChatRequestMessage* n = new ChatRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRequestMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChatRequestMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChatRequestMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(targetgameid_, targetplayerid_);
    if (has_chattext()) {
      chattext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChatRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForChatRequestMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ChatRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 targetGameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgameid_)));
          set_has_targetgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetPlayerId;
        break;
      }

      // optional uint32 targetPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_targetPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chatText;
        break;
      }

      // required string chatText = 3;
      case 3: {
        if (tag == 26) {
         parse_chatText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatRequestMessage)
  return false;
#undef DO_
}

void ChatRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatRequestMessage)
  // optional uint32 targetGameId = 1;
  if (has_targetgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetgameid(), output);
  }

  // optional uint32 targetPlayerId = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }

  // required string chatText = 3;
  if (has_chattext()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chattext(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ChatRequestMessage)
}

int ChatRequestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRequestMessage)
  int total_size = 0;

  // required string chatText = 3;
  if (has_chattext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chattext());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 targetGameId = 1;
    if (has_targetgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgameid());
    }

    // optional uint32 targetPlayerId = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatRequestMessage*>(&from));
}

void ChatRequestMessage::MergeFrom(const ChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatRequestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetgameid()) {
      set_targetgameid(from.targetgameid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_chattext()) {
      set_has_chattext();
      chattext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chattext_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ChatRequestMessage::CopyFrom(const ChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void ChatRequestMessage::Swap(ChatRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRequestMessage::InternalSwap(ChatRequestMessage* other) {
  std::swap(targetgameid_, other->targetgameid_);
  std::swap(targetplayerid_, other->targetplayerid_);
  chattext_.Swap(&other->chattext_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChatRequestMessage::GetTypeName() const {
  return "ChatRequestMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRequestMessage

// optional uint32 targetGameId = 1;
bool ChatRequestMessage::has_targetgameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRequestMessage::set_has_targetgameid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRequestMessage::clear_has_targetgameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRequestMessage::clear_targetgameid() {
  targetgameid_ = 0u;
  clear_has_targetgameid();
}
 ::google::protobuf::uint32 ChatRequestMessage::targetgameid() const {
  // @@protoc_insertion_point(field_get:ChatRequestMessage.targetGameId)
  return targetgameid_;
}
 void ChatRequestMessage::set_targetgameid(::google::protobuf::uint32 value) {
  set_has_targetgameid();
  targetgameid_ = value;
  // @@protoc_insertion_point(field_set:ChatRequestMessage.targetGameId)
}

// optional uint32 targetPlayerId = 2;
bool ChatRequestMessage::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRequestMessage::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRequestMessage::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRequestMessage::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
 ::google::protobuf::uint32 ChatRequestMessage::targetplayerid() const {
  // @@protoc_insertion_point(field_get:ChatRequestMessage.targetPlayerId)
  return targetplayerid_;
}
 void ChatRequestMessage::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
  // @@protoc_insertion_point(field_set:ChatRequestMessage.targetPlayerId)
}

// required string chatText = 3;
bool ChatRequestMessage::has_chattext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatRequestMessage::set_has_chattext() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatRequestMessage::clear_has_chattext() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatRequestMessage::clear_chattext() {
  chattext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chattext();
}
 const ::std::string& ChatRequestMessage::chattext() const {
  // @@protoc_insertion_point(field_get:ChatRequestMessage.chatText)
  return chattext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatRequestMessage::set_chattext(const ::std::string& value) {
  set_has_chattext();
  chattext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatRequestMessage.chatText)
}
 void ChatRequestMessage::set_chattext(const char* value) {
  set_has_chattext();
  chattext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatRequestMessage.chatText)
}
 void ChatRequestMessage::set_chattext(const char* value, size_t size) {
  set_has_chattext();
  chattext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatRequestMessage.chatText)
}
 ::std::string* ChatRequestMessage::mutable_chattext() {
  set_has_chattext();
  // @@protoc_insertion_point(field_mutable:ChatRequestMessage.chatText)
  return chattext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatRequestMessage::release_chattext() {
  // @@protoc_insertion_point(field_release:ChatRequestMessage.chatText)
  clear_has_chattext();
  return chattext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatRequestMessage::set_allocated_chattext(::std::string* chattext) {
  if (chattext != NULL) {
    set_has_chattext();
  } else {
    clear_has_chattext();
  }
  chattext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chattext);
  // @@protoc_insertion_point(field_set_allocated:ChatRequestMessage.chatText)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForChatMessage(
    ChatMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ChatMessage_ChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatMessage_ChatType ChatMessage::chatTypeLobby;
const ChatMessage_ChatType ChatMessage::chatTypeGame;
const ChatMessage_ChatType ChatMessage::chatTypeBot;
const ChatMessage_ChatType ChatMessage::chatTypeBroadcast;
const ChatMessage_ChatType ChatMessage::chatTypePrivate;
const ChatMessage_ChatType ChatMessage::ChatType_MIN;
const ChatMessage_ChatType ChatMessage::ChatType_MAX;
const int ChatMessage::ChatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessage::kGameIdFieldNumber;
const int ChatMessage::kPlayerIdFieldNumber;
const int ChatMessage::kChatTypeFieldNumber;
const int ChatMessage::kChatTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessage::ChatMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessage)
}

void ChatMessage::InitAsDefaultInstance() {
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChatMessage)
}

void ChatMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  playerid_ = 0u;
  chattype_ = 0;
  chattext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chattext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChatMessage& ChatMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New(::google::protobuf::Arena* arena) const {
  ChatMessage* n = new ChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChatMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChatMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(gameid_, playerid_);
    chattype_ = 0;
    if (has_chattext()) {
      chattext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForChatMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint32 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chatType;
        break;
      }

      // required .ChatMessage.ChatType chatType = 3;
      case 3: {
        if (tag == 24) {
         parse_chatType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatMessage_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::ChatMessage_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chatText;
        break;
      }

      // required string chatText = 4;
      case 4: {
        if (tag == 34) {
         parse_chatText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatMessage)
  // optional uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .ChatMessage.ChatType chatType = 3;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->chattype(), output);
  }

  // required string chatText = 4;
  if (has_chattext()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chattext(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ChatMessage)
}

int ChatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChatMessage)
  int total_size = 0;

  if (has_chattype()) {
    // required .ChatMessage.ChatType chatType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_chattext()) {
    // required string chatText = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chattext());
  }

  return total_size;
}
int ChatMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .ChatMessage.ChatType chatType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string chatText = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chattext());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatMessage*>(&from));
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_chattext()) {
      set_has_chattext();
      chattext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chattext_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(playerid_, other->playerid_);
  std::swap(chattype_, other->chattype_);
  chattext_.Swap(&other->chattext_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChatMessage::GetTypeName() const {
  return "ChatMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatMessage

// optional uint32 gameId = 1;
bool ChatMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatMessage::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatMessage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatMessage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
 ::google::protobuf::uint32 ChatMessage::gameid() const {
  // @@protoc_insertion_point(field_get:ChatMessage.gameId)
  return gameid_;
}
 void ChatMessage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:ChatMessage.gameId)
}

// optional uint32 playerId = 2;
bool ChatMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 ChatMessage::playerid() const {
  // @@protoc_insertion_point(field_get:ChatMessage.playerId)
  return playerid_;
}
 void ChatMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:ChatMessage.playerId)
}

// required .ChatMessage.ChatType chatType = 3;
bool ChatMessage::has_chattype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatMessage::set_has_chattype() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatMessage::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatMessage::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::ChatMessage_ChatType ChatMessage::chattype() const {
  // @@protoc_insertion_point(field_get:ChatMessage.chatType)
  return static_cast< ::ChatMessage_ChatType >(chattype_);
}
 void ChatMessage::set_chattype(::ChatMessage_ChatType value) {
  assert(::ChatMessage_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:ChatMessage.chatType)
}

// required string chatText = 4;
bool ChatMessage::has_chattext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatMessage::set_has_chattext() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatMessage::clear_has_chattext() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatMessage::clear_chattext() {
  chattext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chattext();
}
 const ::std::string& ChatMessage::chattext() const {
  // @@protoc_insertion_point(field_get:ChatMessage.chatText)
  return chattext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_chattext(const ::std::string& value) {
  set_has_chattext();
  chattext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatMessage.chatText)
}
 void ChatMessage::set_chattext(const char* value) {
  set_has_chattext();
  chattext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessage.chatText)
}
 void ChatMessage::set_chattext(const char* value, size_t size) {
  set_has_chattext();
  chattext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessage.chatText)
}
 ::std::string* ChatMessage::mutable_chattext() {
  set_has_chattext();
  // @@protoc_insertion_point(field_mutable:ChatMessage.chatText)
  return chattext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_chattext() {
  // @@protoc_insertion_point(field_release:ChatMessage.chatText)
  clear_has_chattext();
  return chattext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_chattext(::std::string* chattext) {
  if (chattext != NULL) {
    set_has_chattext();
  } else {
    clear_has_chattext();
  }
  chattext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chattext);
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.chatText)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForChatRejectMessage(
    ChatRejectMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRejectMessage::kChatTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRejectMessage::ChatRejectMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatRejectMessage)
}

void ChatRejectMessage::InitAsDefaultInstance() {
}

ChatRejectMessage::ChatRejectMessage(const ChatRejectMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChatRejectMessage)
}

void ChatRejectMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chattext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRejectMessage::~ChatRejectMessage() {
  // @@protoc_insertion_point(destructor:ChatRejectMessage)
  SharedDtor();
}

void ChatRejectMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chattext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChatRejectMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChatRejectMessage& ChatRejectMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

ChatRejectMessage* ChatRejectMessage::default_instance_ = NULL;

ChatRejectMessage* ChatRejectMessage::New(::google::protobuf::Arena* arena) const {
  ChatRejectMessage* n = new ChatRejectMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRejectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRejectMessage)
  if (has_chattext()) {
    chattext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChatRejectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForChatRejectMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ChatRejectMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chatText = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatRejectMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatRejectMessage)
  return false;
#undef DO_
}

void ChatRejectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatRejectMessage)
  // required string chatText = 1;
  if (has_chattext()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chattext(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ChatRejectMessage)
}

int ChatRejectMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRejectMessage)
  int total_size = 0;

  // required string chatText = 1;
  if (has_chattext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chattext());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRejectMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatRejectMessage*>(&from));
}

void ChatRejectMessage::MergeFrom(const ChatRejectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatRejectMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chattext()) {
      set_has_chattext();
      chattext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chattext_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ChatRejectMessage::CopyFrom(const ChatRejectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRejectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRejectMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChatRejectMessage::Swap(ChatRejectMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRejectMessage::InternalSwap(ChatRejectMessage* other) {
  chattext_.Swap(&other->chattext_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChatRejectMessage::GetTypeName() const {
  return "ChatRejectMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRejectMessage

// required string chatText = 1;
bool ChatRejectMessage::has_chattext() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRejectMessage::set_has_chattext() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRejectMessage::clear_has_chattext() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRejectMessage::clear_chattext() {
  chattext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chattext();
}
 const ::std::string& ChatRejectMessage::chattext() const {
  // @@protoc_insertion_point(field_get:ChatRejectMessage.chatText)
  return chattext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatRejectMessage::set_chattext(const ::std::string& value) {
  set_has_chattext();
  chattext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatRejectMessage.chatText)
}
 void ChatRejectMessage::set_chattext(const char* value) {
  set_has_chattext();
  chattext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatRejectMessage.chatText)
}
 void ChatRejectMessage::set_chattext(const char* value, size_t size) {
  set_has_chattext();
  chattext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatRejectMessage.chatText)
}
 ::std::string* ChatRejectMessage::mutable_chattext() {
  set_has_chattext();
  // @@protoc_insertion_point(field_mutable:ChatRejectMessage.chatText)
  return chattext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatRejectMessage::release_chattext() {
  // @@protoc_insertion_point(field_release:ChatRejectMessage.chatText)
  clear_has_chattext();
  return chattext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatRejectMessage::set_allocated_chattext(::std::string* chattext) {
  if (chattext != NULL) {
    set_has_chattext();
  } else {
    clear_has_chattext();
  }
  chattext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chattext);
  // @@protoc_insertion_point(field_set_allocated:ChatRejectMessage.chatText)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDialogMessage(
    DialogMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DialogMessage::kNotificationTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DialogMessage::DialogMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DialogMessage)
}

void DialogMessage::InitAsDefaultInstance() {
}

DialogMessage::DialogMessage(const DialogMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DialogMessage)
}

void DialogMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notificationtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DialogMessage::~DialogMessage() {
  // @@protoc_insertion_point(destructor:DialogMessage)
  SharedDtor();
}

void DialogMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notificationtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DialogMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DialogMessage& DialogMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

DialogMessage* DialogMessage::default_instance_ = NULL;

DialogMessage* DialogMessage::New(::google::protobuf::Arena* arena) const {
  DialogMessage* n = new DialogMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DialogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DialogMessage)
  if (has_notificationtext()) {
    notificationtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DialogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDialogMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:DialogMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string notificationText = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notificationtext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DialogMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DialogMessage)
  return false;
#undef DO_
}

void DialogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DialogMessage)
  // required string notificationText = 1;
  if (has_notificationtext()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->notificationtext(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DialogMessage)
}

int DialogMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DialogMessage)
  int total_size = 0;

  // required string notificationText = 1;
  if (has_notificationtext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->notificationtext());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DialogMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DialogMessage*>(&from));
}

void DialogMessage::MergeFrom(const DialogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DialogMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notificationtext()) {
      set_has_notificationtext();
      notificationtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notificationtext_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DialogMessage::CopyFrom(const DialogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DialogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DialogMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DialogMessage::Swap(DialogMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DialogMessage::InternalSwap(DialogMessage* other) {
  notificationtext_.Swap(&other->notificationtext_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DialogMessage::GetTypeName() const {
  return "DialogMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DialogMessage

// required string notificationText = 1;
bool DialogMessage::has_notificationtext() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DialogMessage::set_has_notificationtext() {
  _has_bits_[0] |= 0x00000001u;
}
void DialogMessage::clear_has_notificationtext() {
  _has_bits_[0] &= ~0x00000001u;
}
void DialogMessage::clear_notificationtext() {
  notificationtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notificationtext();
}
 const ::std::string& DialogMessage::notificationtext() const {
  // @@protoc_insertion_point(field_get:DialogMessage.notificationText)
  return notificationtext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DialogMessage::set_notificationtext(const ::std::string& value) {
  set_has_notificationtext();
  notificationtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DialogMessage.notificationText)
}
 void DialogMessage::set_notificationtext(const char* value) {
  set_has_notificationtext();
  notificationtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DialogMessage.notificationText)
}
 void DialogMessage::set_notificationtext(const char* value, size_t size) {
  set_has_notificationtext();
  notificationtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DialogMessage.notificationText)
}
 ::std::string* DialogMessage::mutable_notificationtext() {
  set_has_notificationtext();
  // @@protoc_insertion_point(field_mutable:DialogMessage.notificationText)
  return notificationtext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DialogMessage::release_notificationtext() {
  // @@protoc_insertion_point(field_release:DialogMessage.notificationText)
  clear_has_notificationtext();
  return notificationtext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DialogMessage::set_allocated_notificationtext(::std::string* notificationtext) {
  if (notificationtext != NULL) {
    set_has_notificationtext();
  } else {
    clear_has_notificationtext();
  }
  notificationtext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notificationtext);
  // @@protoc_insertion_point(field_set_allocated:DialogMessage.notificationText)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForTimeoutWarningMessage(
    TimeoutWarningMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool TimeoutWarningMessage_TimeoutReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutNoDataReceived;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutInactiveGame;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutKickAfterAutofold;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::TimeoutReason_MIN;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::TimeoutReason_MAX;
const int TimeoutWarningMessage::TimeoutReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeoutWarningMessage::kTimeoutReasonFieldNumber;
const int TimeoutWarningMessage::kRemainingSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeoutWarningMessage::TimeoutWarningMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TimeoutWarningMessage)
}

void TimeoutWarningMessage::InitAsDefaultInstance() {
}

TimeoutWarningMessage::TimeoutWarningMessage(const TimeoutWarningMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TimeoutWarningMessage)
}

void TimeoutWarningMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeoutreason_ = 0;
  remainingseconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeoutWarningMessage::~TimeoutWarningMessage() {
  // @@protoc_insertion_point(destructor:TimeoutWarningMessage)
  SharedDtor();
}

void TimeoutWarningMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeoutWarningMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeoutWarningMessage& TimeoutWarningMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

TimeoutWarningMessage* TimeoutWarningMessage::default_instance_ = NULL;

TimeoutWarningMessage* TimeoutWarningMessage::New(::google::protobuf::Arena* arena) const {
  TimeoutWarningMessage* n = new TimeoutWarningMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeoutWarningMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TimeoutWarningMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimeoutWarningMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeoutWarningMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timeoutreason_, remainingseconds_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TimeoutWarningMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForTimeoutWarningMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:TimeoutWarningMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TimeoutWarningMessage_TimeoutReason_IsValid(value)) {
            set_timeoutreason(static_cast< ::TimeoutWarningMessage_TimeoutReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_remainingSeconds;
        break;
      }

      // required uint32 remainingSeconds = 2;
      case 2: {
        if (tag == 16) {
         parse_remainingSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainingseconds_)));
          set_has_remainingseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TimeoutWarningMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TimeoutWarningMessage)
  return false;
#undef DO_
}

void TimeoutWarningMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TimeoutWarningMessage)
  // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
  if (has_timeoutreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->timeoutreason(), output);
  }

  // required uint32 remainingSeconds = 2;
  if (has_remainingseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remainingseconds(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:TimeoutWarningMessage)
}

int TimeoutWarningMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TimeoutWarningMessage)
  int total_size = 0;

  if (has_timeoutreason()) {
    // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeoutreason());
  }

  if (has_remainingseconds()) {
    // required uint32 remainingSeconds = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remainingseconds());
  }

  return total_size;
}
int TimeoutWarningMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TimeoutWarningMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeoutreason());

    // required uint32 remainingSeconds = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remainingseconds());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeoutWarningMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeoutWarningMessage*>(&from));
}

void TimeoutWarningMessage::MergeFrom(const TimeoutWarningMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TimeoutWarningMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeoutreason()) {
      set_timeoutreason(from.timeoutreason());
    }
    if (from.has_remainingseconds()) {
      set_remainingseconds(from.remainingseconds());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void TimeoutWarningMessage::CopyFrom(const TimeoutWarningMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TimeoutWarningMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutWarningMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimeoutWarningMessage::Swap(TimeoutWarningMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeoutWarningMessage::InternalSwap(TimeoutWarningMessage* other) {
  std::swap(timeoutreason_, other->timeoutreason_);
  std::swap(remainingseconds_, other->remainingseconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TimeoutWarningMessage::GetTypeName() const {
  return "TimeoutWarningMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeoutWarningMessage

// required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
bool TimeoutWarningMessage::has_timeoutreason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeoutWarningMessage::set_has_timeoutreason() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeoutWarningMessage::clear_has_timeoutreason() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeoutWarningMessage::clear_timeoutreason() {
  timeoutreason_ = 0;
  clear_has_timeoutreason();
}
 ::TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutreason() const {
  // @@protoc_insertion_point(field_get:TimeoutWarningMessage.timeoutReason)
  return static_cast< ::TimeoutWarningMessage_TimeoutReason >(timeoutreason_);
}
 void TimeoutWarningMessage::set_timeoutreason(::TimeoutWarningMessage_TimeoutReason value) {
  assert(::TimeoutWarningMessage_TimeoutReason_IsValid(value));
  set_has_timeoutreason();
  timeoutreason_ = value;
  // @@protoc_insertion_point(field_set:TimeoutWarningMessage.timeoutReason)
}

// required uint32 remainingSeconds = 2;
bool TimeoutWarningMessage::has_remainingseconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeoutWarningMessage::set_has_remainingseconds() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeoutWarningMessage::clear_has_remainingseconds() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeoutWarningMessage::clear_remainingseconds() {
  remainingseconds_ = 0u;
  clear_has_remainingseconds();
}
 ::google::protobuf::uint32 TimeoutWarningMessage::remainingseconds() const {
  // @@protoc_insertion_point(field_get:TimeoutWarningMessage.remainingSeconds)
  return remainingseconds_;
}
 void TimeoutWarningMessage::set_remainingseconds(::google::protobuf::uint32 value) {
  set_has_remainingseconds();
  remainingseconds_ = value;
  // @@protoc_insertion_point(field_set:TimeoutWarningMessage.remainingSeconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForResetTimeoutMessage(
    ResetTimeoutMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetTimeoutMessage::ResetTimeoutMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResetTimeoutMessage)
}

void ResetTimeoutMessage::InitAsDefaultInstance() {
}

ResetTimeoutMessage::ResetTimeoutMessage(const ResetTimeoutMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ResetTimeoutMessage)
}

void ResetTimeoutMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetTimeoutMessage::~ResetTimeoutMessage() {
  // @@protoc_insertion_point(destructor:ResetTimeoutMessage)
  SharedDtor();
}

void ResetTimeoutMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResetTimeoutMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResetTimeoutMessage& ResetTimeoutMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

ResetTimeoutMessage* ResetTimeoutMessage::default_instance_ = NULL;

ResetTimeoutMessage* ResetTimeoutMessage::New(::google::protobuf::Arena* arena) const {
  ResetTimeoutMessage* n = new ResetTimeoutMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetTimeoutMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ResetTimeoutMessage)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResetTimeoutMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForResetTimeoutMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ResetTimeoutMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:ResetTimeoutMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResetTimeoutMessage)
  return false;
#undef DO_
}

void ResetTimeoutMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResetTimeoutMessage)
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ResetTimeoutMessage)
}

int ResetTimeoutMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ResetTimeoutMessage)
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetTimeoutMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResetTimeoutMessage*>(&from));
}

void ResetTimeoutMessage::MergeFrom(const ResetTimeoutMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResetTimeoutMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ResetTimeoutMessage::CopyFrom(const ResetTimeoutMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResetTimeoutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetTimeoutMessage::IsInitialized() const {

  return true;
}

void ResetTimeoutMessage::Swap(ResetTimeoutMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetTimeoutMessage::InternalSwap(ResetTimeoutMessage* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ResetTimeoutMessage::GetTypeName() const {
  return "ResetTimeoutMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetTimeoutMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForReportAvatarMessage(
    ReportAvatarMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportAvatarMessage::kReportedPlayerIdFieldNumber;
const int ReportAvatarMessage::kReportedAvatarHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportAvatarMessage::ReportAvatarMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReportAvatarMessage)
}

void ReportAvatarMessage::InitAsDefaultInstance() {
}

ReportAvatarMessage::ReportAvatarMessage(const ReportAvatarMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReportAvatarMessage)
}

void ReportAvatarMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reportedplayerid_ = 0u;
  reportedavatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportAvatarMessage::~ReportAvatarMessage() {
  // @@protoc_insertion_point(destructor:ReportAvatarMessage)
  SharedDtor();
}

void ReportAvatarMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reportedavatarhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReportAvatarMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReportAvatarMessage& ReportAvatarMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

ReportAvatarMessage* ReportAvatarMessage::default_instance_ = NULL;

ReportAvatarMessage* ReportAvatarMessage::New(::google::protobuf::Arena* arena) const {
  ReportAvatarMessage* n = new ReportAvatarMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportAvatarMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportAvatarMessage)
  if (_has_bits_[0 / 32] & 3u) {
    reportedplayerid_ = 0u;
    if (has_reportedavatarhash()) {
      reportedavatarhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReportAvatarMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForReportAvatarMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ReportAvatarMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedPlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedplayerid_)));
          set_has_reportedplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reportedAvatarHash;
        break;
      }

      // required bytes reportedAvatarHash = 2;
      case 2: {
        if (tag == 18) {
         parse_reportedAvatarHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reportedavatarhash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReportAvatarMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReportAvatarMessage)
  return false;
#undef DO_
}

void ReportAvatarMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReportAvatarMessage)
  // required uint32 reportedPlayerId = 1;
  if (has_reportedplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedplayerid(), output);
  }

  // required bytes reportedAvatarHash = 2;
  if (has_reportedavatarhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reportedavatarhash(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ReportAvatarMessage)
}

int ReportAvatarMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportAvatarMessage)
  int total_size = 0;

  if (has_reportedplayerid()) {
    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedplayerid());
  }

  if (has_reportedavatarhash()) {
    // required bytes reportedAvatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reportedavatarhash());
  }

  return total_size;
}
int ReportAvatarMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ReportAvatarMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedplayerid());

    // required bytes reportedAvatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reportedavatarhash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportAvatarMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReportAvatarMessage*>(&from));
}

void ReportAvatarMessage::MergeFrom(const ReportAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportAvatarMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportedplayerid()) {
      set_reportedplayerid(from.reportedplayerid());
    }
    if (from.has_reportedavatarhash()) {
      set_has_reportedavatarhash();
      reportedavatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reportedavatarhash_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ReportAvatarMessage::CopyFrom(const ReportAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportAvatarMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvatarMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReportAvatarMessage::Swap(ReportAvatarMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportAvatarMessage::InternalSwap(ReportAvatarMessage* other) {
  std::swap(reportedplayerid_, other->reportedplayerid_);
  reportedavatarhash_.Swap(&other->reportedavatarhash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReportAvatarMessage::GetTypeName() const {
  return "ReportAvatarMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportAvatarMessage

// required uint32 reportedPlayerId = 1;
bool ReportAvatarMessage::has_reportedplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReportAvatarMessage::set_has_reportedplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReportAvatarMessage::clear_has_reportedplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReportAvatarMessage::clear_reportedplayerid() {
  reportedplayerid_ = 0u;
  clear_has_reportedplayerid();
}
 ::google::protobuf::uint32 ReportAvatarMessage::reportedplayerid() const {
  // @@protoc_insertion_point(field_get:ReportAvatarMessage.reportedPlayerId)
  return reportedplayerid_;
}
 void ReportAvatarMessage::set_reportedplayerid(::google::protobuf::uint32 value) {
  set_has_reportedplayerid();
  reportedplayerid_ = value;
  // @@protoc_insertion_point(field_set:ReportAvatarMessage.reportedPlayerId)
}

// required bytes reportedAvatarHash = 2;
bool ReportAvatarMessage::has_reportedavatarhash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReportAvatarMessage::set_has_reportedavatarhash() {
  _has_bits_[0] |= 0x00000002u;
}
void ReportAvatarMessage::clear_has_reportedavatarhash() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReportAvatarMessage::clear_reportedavatarhash() {
  reportedavatarhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reportedavatarhash();
}
 const ::std::string& ReportAvatarMessage::reportedavatarhash() const {
  // @@protoc_insertion_point(field_get:ReportAvatarMessage.reportedAvatarHash)
  return reportedavatarhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportAvatarMessage::set_reportedavatarhash(const ::std::string& value) {
  set_has_reportedavatarhash();
  reportedavatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReportAvatarMessage.reportedAvatarHash)
}
 void ReportAvatarMessage::set_reportedavatarhash(const char* value) {
  set_has_reportedavatarhash();
  reportedavatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReportAvatarMessage.reportedAvatarHash)
}
 void ReportAvatarMessage::set_reportedavatarhash(const void* value, size_t size) {
  set_has_reportedavatarhash();
  reportedavatarhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReportAvatarMessage.reportedAvatarHash)
}
 ::std::string* ReportAvatarMessage::mutable_reportedavatarhash() {
  set_has_reportedavatarhash();
  // @@protoc_insertion_point(field_mutable:ReportAvatarMessage.reportedAvatarHash)
  return reportedavatarhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReportAvatarMessage::release_reportedavatarhash() {
  // @@protoc_insertion_point(field_release:ReportAvatarMessage.reportedAvatarHash)
  clear_has_reportedavatarhash();
  return reportedavatarhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportAvatarMessage::set_allocated_reportedavatarhash(::std::string* reportedavatarhash) {
  if (reportedavatarhash != NULL) {
    set_has_reportedavatarhash();
  } else {
    clear_has_reportedavatarhash();
  }
  reportedavatarhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reportedavatarhash);
  // @@protoc_insertion_point(field_set_allocated:ReportAvatarMessage.reportedAvatarHash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForReportAvatarAckMessage(
    ReportAvatarAckMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ReportAvatarAckMessage_ReportAvatarResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportAccepted;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportDuplicate;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportInvalid;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::ReportAvatarResult_MIN;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::ReportAvatarResult_MAX;
const int ReportAvatarAckMessage::ReportAvatarResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportAvatarAckMessage::kReportedPlayerIdFieldNumber;
const int ReportAvatarAckMessage::kReportAvatarResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportAvatarAckMessage::ReportAvatarAckMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReportAvatarAckMessage)
}

void ReportAvatarAckMessage::InitAsDefaultInstance() {
}

ReportAvatarAckMessage::ReportAvatarAckMessage(const ReportAvatarAckMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReportAvatarAckMessage)
}

void ReportAvatarAckMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reportedplayerid_ = 0u;
  reportavatarresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportAvatarAckMessage::~ReportAvatarAckMessage() {
  // @@protoc_insertion_point(destructor:ReportAvatarAckMessage)
  SharedDtor();
}

void ReportAvatarAckMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReportAvatarAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReportAvatarAckMessage& ReportAvatarAckMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

ReportAvatarAckMessage* ReportAvatarAckMessage::default_instance_ = NULL;

ReportAvatarAckMessage* ReportAvatarAckMessage::New(::google::protobuf::Arena* arena) const {
  ReportAvatarAckMessage* n = new ReportAvatarAckMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportAvatarAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportAvatarAckMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReportAvatarAckMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReportAvatarAckMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(reportedplayerid_, reportavatarresult_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReportAvatarAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForReportAvatarAckMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ReportAvatarAckMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedPlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedplayerid_)));
          set_has_reportedplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reportAvatarResult;
        break;
      }

      // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
      case 2: {
        if (tag == 16) {
         parse_reportAvatarResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReportAvatarAckMessage_ReportAvatarResult_IsValid(value)) {
            set_reportavatarresult(static_cast< ::ReportAvatarAckMessage_ReportAvatarResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReportAvatarAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReportAvatarAckMessage)
  return false;
#undef DO_
}

void ReportAvatarAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReportAvatarAckMessage)
  // required uint32 reportedPlayerId = 1;
  if (has_reportedplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedplayerid(), output);
  }

  // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
  if (has_reportavatarresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reportavatarresult(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ReportAvatarAckMessage)
}

int ReportAvatarAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportAvatarAckMessage)
  int total_size = 0;

  if (has_reportedplayerid()) {
    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedplayerid());
  }

  if (has_reportavatarresult()) {
    // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reportavatarresult());
  }

  return total_size;
}
int ReportAvatarAckMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ReportAvatarAckMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedplayerid());

    // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reportavatarresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportAvatarAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReportAvatarAckMessage*>(&from));
}

void ReportAvatarAckMessage::MergeFrom(const ReportAvatarAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportAvatarAckMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportedplayerid()) {
      set_reportedplayerid(from.reportedplayerid());
    }
    if (from.has_reportavatarresult()) {
      set_reportavatarresult(from.reportavatarresult());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ReportAvatarAckMessage::CopyFrom(const ReportAvatarAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportAvatarAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvatarAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReportAvatarAckMessage::Swap(ReportAvatarAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportAvatarAckMessage::InternalSwap(ReportAvatarAckMessage* other) {
  std::swap(reportedplayerid_, other->reportedplayerid_);
  std::swap(reportavatarresult_, other->reportavatarresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReportAvatarAckMessage::GetTypeName() const {
  return "ReportAvatarAckMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportAvatarAckMessage

// required uint32 reportedPlayerId = 1;
bool ReportAvatarAckMessage::has_reportedplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReportAvatarAckMessage::set_has_reportedplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReportAvatarAckMessage::clear_has_reportedplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReportAvatarAckMessage::clear_reportedplayerid() {
  reportedplayerid_ = 0u;
  clear_has_reportedplayerid();
}
 ::google::protobuf::uint32 ReportAvatarAckMessage::reportedplayerid() const {
  // @@protoc_insertion_point(field_get:ReportAvatarAckMessage.reportedPlayerId)
  return reportedplayerid_;
}
 void ReportAvatarAckMessage::set_reportedplayerid(::google::protobuf::uint32 value) {
  set_has_reportedplayerid();
  reportedplayerid_ = value;
  // @@protoc_insertion_point(field_set:ReportAvatarAckMessage.reportedPlayerId)
}

// required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
bool ReportAvatarAckMessage::has_reportavatarresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReportAvatarAckMessage::set_has_reportavatarresult() {
  _has_bits_[0] |= 0x00000002u;
}
void ReportAvatarAckMessage::clear_has_reportavatarresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReportAvatarAckMessage::clear_reportavatarresult() {
  reportavatarresult_ = 0;
  clear_has_reportavatarresult();
}
 ::ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::reportavatarresult() const {
  // @@protoc_insertion_point(field_get:ReportAvatarAckMessage.reportAvatarResult)
  return static_cast< ::ReportAvatarAckMessage_ReportAvatarResult >(reportavatarresult_);
}
 void ReportAvatarAckMessage::set_reportavatarresult(::ReportAvatarAckMessage_ReportAvatarResult value) {
  assert(::ReportAvatarAckMessage_ReportAvatarResult_IsValid(value));
  set_has_reportavatarresult();
  reportavatarresult_ = value;
  // @@protoc_insertion_point(field_set:ReportAvatarAckMessage.reportAvatarResult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForReportGameMessage(
    ReportGameMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportGameMessage::kReportedGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportGameMessage::ReportGameMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReportGameMessage)
}

void ReportGameMessage::InitAsDefaultInstance() {
}

ReportGameMessage::ReportGameMessage(const ReportGameMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReportGameMessage)
}

void ReportGameMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reportedgameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportGameMessage::~ReportGameMessage() {
  // @@protoc_insertion_point(destructor:ReportGameMessage)
  SharedDtor();
}

void ReportGameMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReportGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReportGameMessage& ReportGameMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

ReportGameMessage* ReportGameMessage::default_instance_ = NULL;

ReportGameMessage* ReportGameMessage::New(::google::protobuf::Arena* arena) const {
  ReportGameMessage* n = new ReportGameMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportGameMessage)
  reportedgameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReportGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForReportGameMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ReportGameMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedGameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedgameid_)));
          set_has_reportedgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReportGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReportGameMessage)
  return false;
#undef DO_
}

void ReportGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReportGameMessage)
  // required uint32 reportedGameId = 1;
  if (has_reportedgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedgameid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ReportGameMessage)
}

int ReportGameMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ReportGameMessage)
  int total_size = 0;

  // required uint32 reportedGameId = 1;
  if (has_reportedgameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedgameid());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReportGameMessage*>(&from));
}

void ReportGameMessage::MergeFrom(const ReportGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportGameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportedgameid()) {
      set_reportedgameid(from.reportedgameid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ReportGameMessage::CopyFrom(const ReportGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportGameMessage::Swap(ReportGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportGameMessage::InternalSwap(ReportGameMessage* other) {
  std::swap(reportedgameid_, other->reportedgameid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReportGameMessage::GetTypeName() const {
  return "ReportGameMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportGameMessage

// required uint32 reportedGameId = 1;
bool ReportGameMessage::has_reportedgameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReportGameMessage::set_has_reportedgameid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReportGameMessage::clear_has_reportedgameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReportGameMessage::clear_reportedgameid() {
  reportedgameid_ = 0u;
  clear_has_reportedgameid();
}
 ::google::protobuf::uint32 ReportGameMessage::reportedgameid() const {
  // @@protoc_insertion_point(field_get:ReportGameMessage.reportedGameId)
  return reportedgameid_;
}
 void ReportGameMessage::set_reportedgameid(::google::protobuf::uint32 value) {
  set_has_reportedgameid();
  reportedgameid_ = value;
  // @@protoc_insertion_point(field_set:ReportGameMessage.reportedGameId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForReportGameAckMessage(
    ReportGameAckMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ReportGameAckMessage_ReportGameResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportAccepted;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportDuplicate;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportInvalid;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::ReportGameResult_MIN;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::ReportGameResult_MAX;
const int ReportGameAckMessage::ReportGameResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportGameAckMessage::kReportedGameIdFieldNumber;
const int ReportGameAckMessage::kReportGameResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportGameAckMessage::ReportGameAckMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReportGameAckMessage)
}

void ReportGameAckMessage::InitAsDefaultInstance() {
}

ReportGameAckMessage::ReportGameAckMessage(const ReportGameAckMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReportGameAckMessage)
}

void ReportGameAckMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reportedgameid_ = 0u;
  reportgameresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportGameAckMessage::~ReportGameAckMessage() {
  // @@protoc_insertion_point(destructor:ReportGameAckMessage)
  SharedDtor();
}

void ReportGameAckMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReportGameAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReportGameAckMessage& ReportGameAckMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

ReportGameAckMessage* ReportGameAckMessage::default_instance_ = NULL;

ReportGameAckMessage* ReportGameAckMessage::New(::google::protobuf::Arena* arena) const {
  ReportGameAckMessage* n = new ReportGameAckMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportGameAckMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReportGameAckMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReportGameAckMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(reportedgameid_, reportgameresult_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReportGameAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForReportGameAckMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ReportGameAckMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedGameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedgameid_)));
          set_has_reportedgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reportGameResult;
        break;
      }

      // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
      case 2: {
        if (tag == 16) {
         parse_reportGameResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReportGameAckMessage_ReportGameResult_IsValid(value)) {
            set_reportgameresult(static_cast< ::ReportGameAckMessage_ReportGameResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReportGameAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReportGameAckMessage)
  return false;
#undef DO_
}

void ReportGameAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReportGameAckMessage)
  // required uint32 reportedGameId = 1;
  if (has_reportedgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedgameid(), output);
  }

  // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
  if (has_reportgameresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reportgameresult(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ReportGameAckMessage)
}

int ReportGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportGameAckMessage)
  int total_size = 0;

  if (has_reportedgameid()) {
    // required uint32 reportedGameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedgameid());
  }

  if (has_reportgameresult()) {
    // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reportgameresult());
  }

  return total_size;
}
int ReportGameAckMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ReportGameAckMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 reportedGameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedgameid());

    // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reportgameresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportGameAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReportGameAckMessage*>(&from));
}

void ReportGameAckMessage::MergeFrom(const ReportGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportGameAckMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportedgameid()) {
      set_reportedgameid(from.reportedgameid());
    }
    if (from.has_reportgameresult()) {
      set_reportgameresult(from.reportgameresult());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ReportGameAckMessage::CopyFrom(const ReportGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGameAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReportGameAckMessage::Swap(ReportGameAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportGameAckMessage::InternalSwap(ReportGameAckMessage* other) {
  std::swap(reportedgameid_, other->reportedgameid_);
  std::swap(reportgameresult_, other->reportgameresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReportGameAckMessage::GetTypeName() const {
  return "ReportGameAckMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportGameAckMessage

// required uint32 reportedGameId = 1;
bool ReportGameAckMessage::has_reportedgameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReportGameAckMessage::set_has_reportedgameid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReportGameAckMessage::clear_has_reportedgameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReportGameAckMessage::clear_reportedgameid() {
  reportedgameid_ = 0u;
  clear_has_reportedgameid();
}
 ::google::protobuf::uint32 ReportGameAckMessage::reportedgameid() const {
  // @@protoc_insertion_point(field_get:ReportGameAckMessage.reportedGameId)
  return reportedgameid_;
}
 void ReportGameAckMessage::set_reportedgameid(::google::protobuf::uint32 value) {
  set_has_reportedgameid();
  reportedgameid_ = value;
  // @@protoc_insertion_point(field_set:ReportGameAckMessage.reportedGameId)
}

// required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
bool ReportGameAckMessage::has_reportgameresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReportGameAckMessage::set_has_reportgameresult() {
  _has_bits_[0] |= 0x00000002u;
}
void ReportGameAckMessage::clear_has_reportgameresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReportGameAckMessage::clear_reportgameresult() {
  reportgameresult_ = 0;
  clear_has_reportgameresult();
}
 ::ReportGameAckMessage_ReportGameResult ReportGameAckMessage::reportgameresult() const {
  // @@protoc_insertion_point(field_get:ReportGameAckMessage.reportGameResult)
  return static_cast< ::ReportGameAckMessage_ReportGameResult >(reportgameresult_);
}
 void ReportGameAckMessage::set_reportgameresult(::ReportGameAckMessage_ReportGameResult value) {
  assert(::ReportGameAckMessage_ReportGameResult_IsValid(value));
  set_has_reportgameresult();
  reportgameresult_ = value;
  // @@protoc_insertion_point(field_set:ReportGameAckMessage.reportGameResult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForErrorMessage(
    ErrorMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool ErrorMessage_ErrorReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ErrorMessage_ErrorReason ErrorMessage::reserved;
const ErrorMessage_ErrorReason ErrorMessage::initVersionNotSupported;
const ErrorMessage_ErrorReason ErrorMessage::initServerFull;
const ErrorMessage_ErrorReason ErrorMessage::initAuthFailure;
const ErrorMessage_ErrorReason ErrorMessage::initPlayerNameInUse;
const ErrorMessage_ErrorReason ErrorMessage::initInvalidPlayerName;
const ErrorMessage_ErrorReason ErrorMessage::initServerMaintenance;
const ErrorMessage_ErrorReason ErrorMessage::initBlocked;
const ErrorMessage_ErrorReason ErrorMessage::avatarTooLarge;
const ErrorMessage_ErrorReason ErrorMessage::invalidPacket;
const ErrorMessage_ErrorReason ErrorMessage::invalidState;
const ErrorMessage_ErrorReason ErrorMessage::kickedFromServer;
const ErrorMessage_ErrorReason ErrorMessage::bannedFromServer;
const ErrorMessage_ErrorReason ErrorMessage::blockedByServer;
const ErrorMessage_ErrorReason ErrorMessage::sessionTimeout;
const ErrorMessage_ErrorReason ErrorMessage::ErrorReason_MIN;
const ErrorMessage_ErrorReason ErrorMessage::ErrorReason_MAX;
const int ErrorMessage::ErrorReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorMessage::kErrorReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorMessage::ErrorMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ErrorMessage)
}

void ErrorMessage::InitAsDefaultInstance() {
}

ErrorMessage::ErrorMessage(const ErrorMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ErrorMessage)
}

void ErrorMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorMessage::~ErrorMessage() {
  // @@protoc_insertion_point(destructor:ErrorMessage)
  SharedDtor();
}

void ErrorMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ErrorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ErrorMessage& ErrorMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

ErrorMessage* ErrorMessage::default_instance_ = NULL;

ErrorMessage* ErrorMessage::New(::google::protobuf::Arena* arena) const {
  ErrorMessage* n = new ErrorMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ErrorMessage)
  errorreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ErrorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForErrorMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ErrorMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ErrorMessage.ErrorReason errorReason = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ErrorMessage_ErrorReason_IsValid(value)) {
            set_errorreason(static_cast< ::ErrorMessage_ErrorReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ErrorMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ErrorMessage)
  return false;
#undef DO_
}

void ErrorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ErrorMessage)
  // required .ErrorMessage.ErrorReason errorReason = 1;
  if (has_errorreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorreason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ErrorMessage)
}

int ErrorMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ErrorMessage)
  int total_size = 0;

  // required .ErrorMessage.ErrorReason errorReason = 1;
  if (has_errorreason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorreason());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ErrorMessage*>(&from));
}

void ErrorMessage::MergeFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ErrorMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorreason()) {
      set_errorreason(from.errorreason());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ErrorMessage::CopyFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ErrorMessage::Swap(ErrorMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorMessage::InternalSwap(ErrorMessage* other) {
  std::swap(errorreason_, other->errorreason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ErrorMessage::GetTypeName() const {
  return "ErrorMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorMessage

// required .ErrorMessage.ErrorReason errorReason = 1;
bool ErrorMessage::has_errorreason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ErrorMessage::set_has_errorreason() {
  _has_bits_[0] |= 0x00000001u;
}
void ErrorMessage::clear_has_errorreason() {
  _has_bits_[0] &= ~0x00000001u;
}
void ErrorMessage::clear_errorreason() {
  errorreason_ = 0;
  clear_has_errorreason();
}
 ::ErrorMessage_ErrorReason ErrorMessage::errorreason() const {
  // @@protoc_insertion_point(field_get:ErrorMessage.errorReason)
  return static_cast< ::ErrorMessage_ErrorReason >(errorreason_);
}
 void ErrorMessage::set_errorreason(::ErrorMessage_ErrorReason value) {
  assert(::ErrorMessage_ErrorReason_IsValid(value));
  set_has_errorreason();
  errorreason_ = value;
  // @@protoc_insertion_point(field_set:ErrorMessage.errorReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAdminRemoveGameMessage(
    AdminRemoveGameMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRemoveGameMessage::kRemoveGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRemoveGameMessage::AdminRemoveGameMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdminRemoveGameMessage)
}

void AdminRemoveGameMessage::InitAsDefaultInstance() {
}

AdminRemoveGameMessage::AdminRemoveGameMessage(const AdminRemoveGameMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AdminRemoveGameMessage)
}

void AdminRemoveGameMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  removegameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminRemoveGameMessage::~AdminRemoveGameMessage() {
  // @@protoc_insertion_point(destructor:AdminRemoveGameMessage)
  SharedDtor();
}

void AdminRemoveGameMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AdminRemoveGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdminRemoveGameMessage& AdminRemoveGameMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AdminRemoveGameMessage* AdminRemoveGameMessage::default_instance_ = NULL;

AdminRemoveGameMessage* AdminRemoveGameMessage::New(::google::protobuf::Arena* arena) const {
  AdminRemoveGameMessage* n = new AdminRemoveGameMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminRemoveGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminRemoveGameMessage)
  removegameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AdminRemoveGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAdminRemoveGameMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AdminRemoveGameMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 removeGameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &removegameid_)));
          set_has_removegameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdminRemoveGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdminRemoveGameMessage)
  return false;
#undef DO_
}

void AdminRemoveGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdminRemoveGameMessage)
  // required uint32 removeGameId = 1;
  if (has_removegameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->removegameid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AdminRemoveGameMessage)
}

int AdminRemoveGameMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AdminRemoveGameMessage)
  int total_size = 0;

  // required uint32 removeGameId = 1;
  if (has_removegameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->removegameid());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminRemoveGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminRemoveGameMessage*>(&from));
}

void AdminRemoveGameMessage::MergeFrom(const AdminRemoveGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminRemoveGameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_removegameid()) {
      set_removegameid(from.removegameid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AdminRemoveGameMessage::CopyFrom(const AdminRemoveGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminRemoveGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRemoveGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdminRemoveGameMessage::Swap(AdminRemoveGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRemoveGameMessage::InternalSwap(AdminRemoveGameMessage* other) {
  std::swap(removegameid_, other->removegameid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AdminRemoveGameMessage::GetTypeName() const {
  return "AdminRemoveGameMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminRemoveGameMessage

// required uint32 removeGameId = 1;
bool AdminRemoveGameMessage::has_removegameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdminRemoveGameMessage::set_has_removegameid() {
  _has_bits_[0] |= 0x00000001u;
}
void AdminRemoveGameMessage::clear_has_removegameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdminRemoveGameMessage::clear_removegameid() {
  removegameid_ = 0u;
  clear_has_removegameid();
}
 ::google::protobuf::uint32 AdminRemoveGameMessage::removegameid() const {
  // @@protoc_insertion_point(field_get:AdminRemoveGameMessage.removeGameId)
  return removegameid_;
}
 void AdminRemoveGameMessage::set_removegameid(::google::protobuf::uint32 value) {
  set_has_removegameid();
  removegameid_ = value;
  // @@protoc_insertion_point(field_set:AdminRemoveGameMessage.removeGameId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAdminRemoveGameAckMessage(
    AdminRemoveGameAckMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool AdminRemoveGameAckMessage_AdminRemoveGameResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::gameRemoveAccepted;
const AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::gameRemoveInvalid;
const AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::AdminRemoveGameResult_MIN;
const AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::AdminRemoveGameResult_MAX;
const int AdminRemoveGameAckMessage::AdminRemoveGameResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRemoveGameAckMessage::kRemoveGameIdFieldNumber;
const int AdminRemoveGameAckMessage::kRemoveGameResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRemoveGameAckMessage::AdminRemoveGameAckMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdminRemoveGameAckMessage)
}

void AdminRemoveGameAckMessage::InitAsDefaultInstance() {
}

AdminRemoveGameAckMessage::AdminRemoveGameAckMessage(const AdminRemoveGameAckMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AdminRemoveGameAckMessage)
}

void AdminRemoveGameAckMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  removegameid_ = 0u;
  removegameresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminRemoveGameAckMessage::~AdminRemoveGameAckMessage() {
  // @@protoc_insertion_point(destructor:AdminRemoveGameAckMessage)
  SharedDtor();
}

void AdminRemoveGameAckMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AdminRemoveGameAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdminRemoveGameAckMessage& AdminRemoveGameAckMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AdminRemoveGameAckMessage* AdminRemoveGameAckMessage::default_instance_ = NULL;

AdminRemoveGameAckMessage* AdminRemoveGameAckMessage::New(::google::protobuf::Arena* arena) const {
  AdminRemoveGameAckMessage* n = new AdminRemoveGameAckMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminRemoveGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminRemoveGameAckMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdminRemoveGameAckMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdminRemoveGameAckMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(removegameid_, removegameresult_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AdminRemoveGameAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAdminRemoveGameAckMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AdminRemoveGameAckMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 removeGameId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &removegameid_)));
          set_has_removegameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_removeGameResult;
        break;
      }

      // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
      case 2: {
        if (tag == 16) {
         parse_removeGameResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdminRemoveGameAckMessage_AdminRemoveGameResult_IsValid(value)) {
            set_removegameresult(static_cast< ::AdminRemoveGameAckMessage_AdminRemoveGameResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdminRemoveGameAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdminRemoveGameAckMessage)
  return false;
#undef DO_
}

void AdminRemoveGameAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdminRemoveGameAckMessage)
  // required uint32 removeGameId = 1;
  if (has_removegameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->removegameid(), output);
  }

  // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
  if (has_removegameresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->removegameresult(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AdminRemoveGameAckMessage)
}

int AdminRemoveGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AdminRemoveGameAckMessage)
  int total_size = 0;

  if (has_removegameid()) {
    // required uint32 removeGameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->removegameid());
  }

  if (has_removegameresult()) {
    // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->removegameresult());
  }

  return total_size;
}
int AdminRemoveGameAckMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AdminRemoveGameAckMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 removeGameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->removegameid());

    // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->removegameresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminRemoveGameAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminRemoveGameAckMessage*>(&from));
}

void AdminRemoveGameAckMessage::MergeFrom(const AdminRemoveGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminRemoveGameAckMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_removegameid()) {
      set_removegameid(from.removegameid());
    }
    if (from.has_removegameresult()) {
      set_removegameresult(from.removegameresult());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AdminRemoveGameAckMessage::CopyFrom(const AdminRemoveGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminRemoveGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRemoveGameAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AdminRemoveGameAckMessage::Swap(AdminRemoveGameAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRemoveGameAckMessage::InternalSwap(AdminRemoveGameAckMessage* other) {
  std::swap(removegameid_, other->removegameid_);
  std::swap(removegameresult_, other->removegameresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AdminRemoveGameAckMessage::GetTypeName() const {
  return "AdminRemoveGameAckMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminRemoveGameAckMessage

// required uint32 removeGameId = 1;
bool AdminRemoveGameAckMessage::has_removegameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdminRemoveGameAckMessage::set_has_removegameid() {
  _has_bits_[0] |= 0x00000001u;
}
void AdminRemoveGameAckMessage::clear_has_removegameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdminRemoveGameAckMessage::clear_removegameid() {
  removegameid_ = 0u;
  clear_has_removegameid();
}
 ::google::protobuf::uint32 AdminRemoveGameAckMessage::removegameid() const {
  // @@protoc_insertion_point(field_get:AdminRemoveGameAckMessage.removeGameId)
  return removegameid_;
}
 void AdminRemoveGameAckMessage::set_removegameid(::google::protobuf::uint32 value) {
  set_has_removegameid();
  removegameid_ = value;
  // @@protoc_insertion_point(field_set:AdminRemoveGameAckMessage.removeGameId)
}

// required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
bool AdminRemoveGameAckMessage::has_removegameresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdminRemoveGameAckMessage::set_has_removegameresult() {
  _has_bits_[0] |= 0x00000002u;
}
void AdminRemoveGameAckMessage::clear_has_removegameresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdminRemoveGameAckMessage::clear_removegameresult() {
  removegameresult_ = 0;
  clear_has_removegameresult();
}
 ::AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::removegameresult() const {
  // @@protoc_insertion_point(field_get:AdminRemoveGameAckMessage.removeGameResult)
  return static_cast< ::AdminRemoveGameAckMessage_AdminRemoveGameResult >(removegameresult_);
}
 void AdminRemoveGameAckMessage::set_removegameresult(::AdminRemoveGameAckMessage_AdminRemoveGameResult value) {
  assert(::AdminRemoveGameAckMessage_AdminRemoveGameResult_IsValid(value));
  set_has_removegameresult();
  removegameresult_ = value;
  // @@protoc_insertion_point(field_set:AdminRemoveGameAckMessage.removeGameResult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAdminBanPlayerMessage(
    AdminBanPlayerMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminBanPlayerMessage::kBanPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminBanPlayerMessage::AdminBanPlayerMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdminBanPlayerMessage)
}

void AdminBanPlayerMessage::InitAsDefaultInstance() {
}

AdminBanPlayerMessage::AdminBanPlayerMessage(const AdminBanPlayerMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AdminBanPlayerMessage)
}

void AdminBanPlayerMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  banplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminBanPlayerMessage::~AdminBanPlayerMessage() {
  // @@protoc_insertion_point(destructor:AdminBanPlayerMessage)
  SharedDtor();
}

void AdminBanPlayerMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AdminBanPlayerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdminBanPlayerMessage& AdminBanPlayerMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AdminBanPlayerMessage* AdminBanPlayerMessage::default_instance_ = NULL;

AdminBanPlayerMessage* AdminBanPlayerMessage::New(::google::protobuf::Arena* arena) const {
  AdminBanPlayerMessage* n = new AdminBanPlayerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminBanPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminBanPlayerMessage)
  banplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AdminBanPlayerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAdminBanPlayerMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AdminBanPlayerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 banPlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banplayerid_)));
          set_has_banplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdminBanPlayerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdminBanPlayerMessage)
  return false;
#undef DO_
}

void AdminBanPlayerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdminBanPlayerMessage)
  // required uint32 banPlayerId = 1;
  if (has_banplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banplayerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AdminBanPlayerMessage)
}

int AdminBanPlayerMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AdminBanPlayerMessage)
  int total_size = 0;

  // required uint32 banPlayerId = 1;
  if (has_banplayerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banplayerid());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminBanPlayerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminBanPlayerMessage*>(&from));
}

void AdminBanPlayerMessage::MergeFrom(const AdminBanPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminBanPlayerMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banplayerid()) {
      set_banplayerid(from.banplayerid());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AdminBanPlayerMessage::CopyFrom(const AdminBanPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminBanPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminBanPlayerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdminBanPlayerMessage::Swap(AdminBanPlayerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminBanPlayerMessage::InternalSwap(AdminBanPlayerMessage* other) {
  std::swap(banplayerid_, other->banplayerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AdminBanPlayerMessage::GetTypeName() const {
  return "AdminBanPlayerMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminBanPlayerMessage

// required uint32 banPlayerId = 1;
bool AdminBanPlayerMessage::has_banplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdminBanPlayerMessage::set_has_banplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
void AdminBanPlayerMessage::clear_has_banplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdminBanPlayerMessage::clear_banplayerid() {
  banplayerid_ = 0u;
  clear_has_banplayerid();
}
 ::google::protobuf::uint32 AdminBanPlayerMessage::banplayerid() const {
  // @@protoc_insertion_point(field_get:AdminBanPlayerMessage.banPlayerId)
  return banplayerid_;
}
 void AdminBanPlayerMessage::set_banplayerid(::google::protobuf::uint32 value) {
  set_has_banplayerid();
  banplayerid_ = value;
  // @@protoc_insertion_point(field_set:AdminBanPlayerMessage.banPlayerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAdminBanPlayerAckMessage(
    AdminBanPlayerAckMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool AdminBanPlayerAckMessage_AdminBanPlayerResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerAccepted;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerPending;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerNoDB;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerDBError;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerInvalid;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::AdminBanPlayerResult_MIN;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::AdminBanPlayerResult_MAX;
const int AdminBanPlayerAckMessage::AdminBanPlayerResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminBanPlayerAckMessage::kBanPlayerIdFieldNumber;
const int AdminBanPlayerAckMessage::kBanPlayerResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminBanPlayerAckMessage::AdminBanPlayerAckMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdminBanPlayerAckMessage)
}

void AdminBanPlayerAckMessage::InitAsDefaultInstance() {
}

AdminBanPlayerAckMessage::AdminBanPlayerAckMessage(const AdminBanPlayerAckMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AdminBanPlayerAckMessage)
}

void AdminBanPlayerAckMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  banplayerid_ = 0u;
  banplayerresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminBanPlayerAckMessage::~AdminBanPlayerAckMessage() {
  // @@protoc_insertion_point(destructor:AdminBanPlayerAckMessage)
  SharedDtor();
}

void AdminBanPlayerAckMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AdminBanPlayerAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdminBanPlayerAckMessage& AdminBanPlayerAckMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

AdminBanPlayerAckMessage* AdminBanPlayerAckMessage::default_instance_ = NULL;

AdminBanPlayerAckMessage* AdminBanPlayerAckMessage::New(::google::protobuf::Arena* arena) const {
  AdminBanPlayerAckMessage* n = new AdminBanPlayerAckMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminBanPlayerAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminBanPlayerAckMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdminBanPlayerAckMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdminBanPlayerAckMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(banplayerid_, banplayerresult_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AdminBanPlayerAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAdminBanPlayerAckMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AdminBanPlayerAckMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 banPlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banplayerid_)));
          set_has_banplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_banPlayerResult;
        break;
      }

      // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
      case 2: {
        if (tag == 16) {
         parse_banPlayerResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdminBanPlayerAckMessage_AdminBanPlayerResult_IsValid(value)) {
            set_banplayerresult(static_cast< ::AdminBanPlayerAckMessage_AdminBanPlayerResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdminBanPlayerAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdminBanPlayerAckMessage)
  return false;
#undef DO_
}

void AdminBanPlayerAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdminBanPlayerAckMessage)
  // required uint32 banPlayerId = 1;
  if (has_banplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banplayerid(), output);
  }

  // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
  if (has_banplayerresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->banplayerresult(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AdminBanPlayerAckMessage)
}

int AdminBanPlayerAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AdminBanPlayerAckMessage)
  int total_size = 0;

  if (has_banplayerid()) {
    // required uint32 banPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banplayerid());
  }

  if (has_banplayerresult()) {
    // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->banplayerresult());
  }

  return total_size;
}
int AdminBanPlayerAckMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AdminBanPlayerAckMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 banPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banplayerid());

    // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->banplayerresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminBanPlayerAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminBanPlayerAckMessage*>(&from));
}

void AdminBanPlayerAckMessage::MergeFrom(const AdminBanPlayerAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminBanPlayerAckMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banplayerid()) {
      set_banplayerid(from.banplayerid());
    }
    if (from.has_banplayerresult()) {
      set_banplayerresult(from.banplayerresult());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AdminBanPlayerAckMessage::CopyFrom(const AdminBanPlayerAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminBanPlayerAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminBanPlayerAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AdminBanPlayerAckMessage::Swap(AdminBanPlayerAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminBanPlayerAckMessage::InternalSwap(AdminBanPlayerAckMessage* other) {
  std::swap(banplayerid_, other->banplayerid_);
  std::swap(banplayerresult_, other->banplayerresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AdminBanPlayerAckMessage::GetTypeName() const {
  return "AdminBanPlayerAckMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminBanPlayerAckMessage

// required uint32 banPlayerId = 1;
bool AdminBanPlayerAckMessage::has_banplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdminBanPlayerAckMessage::set_has_banplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
void AdminBanPlayerAckMessage::clear_has_banplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdminBanPlayerAckMessage::clear_banplayerid() {
  banplayerid_ = 0u;
  clear_has_banplayerid();
}
 ::google::protobuf::uint32 AdminBanPlayerAckMessage::banplayerid() const {
  // @@protoc_insertion_point(field_get:AdminBanPlayerAckMessage.banPlayerId)
  return banplayerid_;
}
 void AdminBanPlayerAckMessage::set_banplayerid(::google::protobuf::uint32 value) {
  set_has_banplayerid();
  banplayerid_ = value;
  // @@protoc_insertion_point(field_set:AdminBanPlayerAckMessage.banPlayerId)
}

// required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
bool AdminBanPlayerAckMessage::has_banplayerresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdminBanPlayerAckMessage::set_has_banplayerresult() {
  _has_bits_[0] |= 0x00000002u;
}
void AdminBanPlayerAckMessage::clear_has_banplayerresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdminBanPlayerAckMessage::clear_banplayerresult() {
  banplayerresult_ = 0;
  clear_has_banplayerresult();
}
 ::AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banplayerresult() const {
  // @@protoc_insertion_point(field_get:AdminBanPlayerAckMessage.banPlayerResult)
  return static_cast< ::AdminBanPlayerAckMessage_AdminBanPlayerResult >(banplayerresult_);
}
 void AdminBanPlayerAckMessage::set_banplayerresult(::AdminBanPlayerAckMessage_AdminBanPlayerResult value) {
  assert(::AdminBanPlayerAckMessage_AdminBanPlayerResult_IsValid(value));
  set_has_banplayerresult();
  banplayerresult_ = value;
  // @@protoc_insertion_point(field_set:AdminBanPlayerAckMessage.banPlayerResult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPokerTHMessage(
    PokerTHMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

bool PokerTHMessage_PokerTHMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AnnounceMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InitMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AuthServerChallengeMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AuthClientResponseMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AuthServerVerificationMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InitAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarHeaderMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarDataMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarEndMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_UnknownAvatarMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerListMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListNewMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListUpdateMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListPlayerJoinedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListPlayerLeftMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListAdminChangedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerInfoRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerInfoReplyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_SubscriptionRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinExistingGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinNewGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RejoinExistingGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinGameAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinGameFailedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GamePlayerJoinedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GamePlayerLeftMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameAdminChangedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RemovedFromGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_KickPlayerRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_LeaveGameRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InvitePlayerToGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InviteNotifyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RejectGameInvitationMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RejectInvNotifyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StartEventMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StartEventAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameStartInitialMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameStartRejoinMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_HandStartMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayersTurnMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_MyActionRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_YourActionRejectedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayersActionDoneMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DealFlopCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DealTurnCardMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DealRiverCardMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AllInShowCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndOfHandShowCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndOfHandHideCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ShowMyCardsRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AfterHandShowCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndOfGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerIdChangedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AskKickPlayerMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AskKickDeniedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StartKickPetitionMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_VoteKickRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_VoteKickReplyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_KickPetitionUpdateMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndKickPetitionMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StatisticsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ChatRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ChatMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ChatRejectMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DialogMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_TimeoutWarningMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ResetTimeoutMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportAvatarMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportAvatarAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportGameAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ErrorMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AdminRemoveGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AdminRemoveGameAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AdminBanPlayerMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AdminBanPlayerAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListSpectatorJoinedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListSpectatorLeftMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameSpectatorJoinedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameSpectatorLeftMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::PokerTHMessageType_MIN;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::PokerTHMessageType_MAX;
const int PokerTHMessage::PokerTHMessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PokerTHMessage::kMessageTypeFieldNumber;
const int PokerTHMessage::kAnnounceMessageFieldNumber;
const int PokerTHMessage::kInitMessageFieldNumber;
const int PokerTHMessage::kAuthServerChallengeMessageFieldNumber;
const int PokerTHMessage::kAuthClientResponseMessageFieldNumber;
const int PokerTHMessage::kAuthServerVerificationMessageFieldNumber;
const int PokerTHMessage::kInitAckMessageFieldNumber;
const int PokerTHMessage::kAvatarRequestMessageFieldNumber;
const int PokerTHMessage::kAvatarHeaderMessageFieldNumber;
const int PokerTHMessage::kAvatarDataMessageFieldNumber;
const int PokerTHMessage::kAvatarEndMessageFieldNumber;
const int PokerTHMessage::kUnknownAvatarMessageFieldNumber;
const int PokerTHMessage::kPlayerListMessageFieldNumber;
const int PokerTHMessage::kGameListNewMessageFieldNumber;
const int PokerTHMessage::kGameListUpdateMessageFieldNumber;
const int PokerTHMessage::kGameListPlayerJoinedMessageFieldNumber;
const int PokerTHMessage::kGameListPlayerLeftMessageFieldNumber;
const int PokerTHMessage::kGameListAdminChangedMessageFieldNumber;
const int PokerTHMessage::kPlayerInfoRequestMessageFieldNumber;
const int PokerTHMessage::kPlayerInfoReplyMessageFieldNumber;
const int PokerTHMessage::kSubscriptionRequestMessageFieldNumber;
const int PokerTHMessage::kJoinExistingGameMessageFieldNumber;
const int PokerTHMessage::kJoinNewGameMessageFieldNumber;
const int PokerTHMessage::kRejoinExistingGameMessageFieldNumber;
const int PokerTHMessage::kJoinGameAckMessageFieldNumber;
const int PokerTHMessage::kJoinGameFailedMessageFieldNumber;
const int PokerTHMessage::kGamePlayerJoinedMessageFieldNumber;
const int PokerTHMessage::kGamePlayerLeftMessageFieldNumber;
const int PokerTHMessage::kGameAdminChangedMessageFieldNumber;
const int PokerTHMessage::kRemovedFromGameMessageFieldNumber;
const int PokerTHMessage::kKickPlayerRequestMessageFieldNumber;
const int PokerTHMessage::kLeaveGameRequestMessageFieldNumber;
const int PokerTHMessage::kInvitePlayerToGameMessageFieldNumber;
const int PokerTHMessage::kInviteNotifyMessageFieldNumber;
const int PokerTHMessage::kRejectGameInvitationMessageFieldNumber;
const int PokerTHMessage::kRejectInvNotifyMessageFieldNumber;
const int PokerTHMessage::kStartEventMessageFieldNumber;
const int PokerTHMessage::kStartEventAckMessageFieldNumber;
const int PokerTHMessage::kGameStartInitialMessageFieldNumber;
const int PokerTHMessage::kGameStartRejoinMessageFieldNumber;
const int PokerTHMessage::kHandStartMessageFieldNumber;
const int PokerTHMessage::kPlayersTurnMessageFieldNumber;
const int PokerTHMessage::kMyActionRequestMessageFieldNumber;
const int PokerTHMessage::kYourActionRejectedMessageFieldNumber;
const int PokerTHMessage::kPlayersActionDoneMessageFieldNumber;
const int PokerTHMessage::kDealFlopCardsMessageFieldNumber;
const int PokerTHMessage::kDealTurnCardMessageFieldNumber;
const int PokerTHMessage::kDealRiverCardMessageFieldNumber;
const int PokerTHMessage::kAllInShowCardsMessageFieldNumber;
const int PokerTHMessage::kEndOfHandShowCardsMessageFieldNumber;
const int PokerTHMessage::kEndOfHandHideCardsMessageFieldNumber;
const int PokerTHMessage::kShowMyCardsRequestMessageFieldNumber;
const int PokerTHMessage::kAfterHandShowCardsMessageFieldNumber;
const int PokerTHMessage::kEndOfGameMessageFieldNumber;
const int PokerTHMessage::kPlayerIdChangedMessageFieldNumber;
const int PokerTHMessage::kAskKickPlayerMessageFieldNumber;
const int PokerTHMessage::kAskKickDeniedMessageFieldNumber;
const int PokerTHMessage::kStartKickPetitionMessageFieldNumber;
const int PokerTHMessage::kVoteKickRequestMessageFieldNumber;
const int PokerTHMessage::kVoteKickReplyMessageFieldNumber;
const int PokerTHMessage::kKickPetitionUpdateMessageFieldNumber;
const int PokerTHMessage::kEndKickPetitionMessageFieldNumber;
const int PokerTHMessage::kStatisticsMessageFieldNumber;
const int PokerTHMessage::kChatRequestMessageFieldNumber;
const int PokerTHMessage::kChatMessageFieldNumber;
const int PokerTHMessage::kChatRejectMessageFieldNumber;
const int PokerTHMessage::kDialogMessageFieldNumber;
const int PokerTHMessage::kTimeoutWarningMessageFieldNumber;
const int PokerTHMessage::kResetTimeoutMessageFieldNumber;
const int PokerTHMessage::kReportAvatarMessageFieldNumber;
const int PokerTHMessage::kReportAvatarAckMessageFieldNumber;
const int PokerTHMessage::kReportGameMessageFieldNumber;
const int PokerTHMessage::kReportGameAckMessageFieldNumber;
const int PokerTHMessage::kErrorMessageFieldNumber;
const int PokerTHMessage::kAdminRemoveGameMessageFieldNumber;
const int PokerTHMessage::kAdminRemoveGameAckMessageFieldNumber;
const int PokerTHMessage::kAdminBanPlayerMessageFieldNumber;
const int PokerTHMessage::kAdminBanPlayerAckMessageFieldNumber;
const int PokerTHMessage::kGameListSpectatorJoinedMessageFieldNumber;
const int PokerTHMessage::kGameListSpectatorLeftMessageFieldNumber;
const int PokerTHMessage::kGameSpectatorJoinedMessageFieldNumber;
const int PokerTHMessage::kGameSpectatorLeftMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PokerTHMessage::PokerTHMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PokerTHMessage)
}

void PokerTHMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  announcemessage_ = const_cast< ::AnnounceMessage*>(
      ::AnnounceMessage::internal_default_instance());
#else
  announcemessage_ = const_cast< ::AnnounceMessage*>(&::AnnounceMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  initmessage_ = const_cast< ::InitMessage*>(
      ::InitMessage::internal_default_instance());
#else
  initmessage_ = const_cast< ::InitMessage*>(&::InitMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  authserverchallengemessage_ = const_cast< ::AuthServerChallengeMessage*>(
      ::AuthServerChallengeMessage::internal_default_instance());
#else
  authserverchallengemessage_ = const_cast< ::AuthServerChallengeMessage*>(&::AuthServerChallengeMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  authclientresponsemessage_ = const_cast< ::AuthClientResponseMessage*>(
      ::AuthClientResponseMessage::internal_default_instance());
#else
  authclientresponsemessage_ = const_cast< ::AuthClientResponseMessage*>(&::AuthClientResponseMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  authserververificationmessage_ = const_cast< ::AuthServerVerificationMessage*>(
      ::AuthServerVerificationMessage::internal_default_instance());
#else
  authserververificationmessage_ = const_cast< ::AuthServerVerificationMessage*>(&::AuthServerVerificationMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  initackmessage_ = const_cast< ::InitAckMessage*>(
      ::InitAckMessage::internal_default_instance());
#else
  initackmessage_ = const_cast< ::InitAckMessage*>(&::InitAckMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  avatarrequestmessage_ = const_cast< ::AvatarRequestMessage*>(
      ::AvatarRequestMessage::internal_default_instance());
#else
  avatarrequestmessage_ = const_cast< ::AvatarRequestMessage*>(&::AvatarRequestMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  avatarheadermessage_ = const_cast< ::AvatarHeaderMessage*>(
      ::AvatarHeaderMessage::internal_default_instance());
#else
  avatarheadermessage_ = const_cast< ::AvatarHeaderMessage*>(&::AvatarHeaderMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  avatardatamessage_ = const_cast< ::AvatarDataMessage*>(
      ::AvatarDataMessage::internal_default_instance());
#else
  avatardatamessage_ = const_cast< ::AvatarDataMessage*>(&::AvatarDataMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  avatarendmessage_ = const_cast< ::AvatarEndMessage*>(
      ::AvatarEndMessage::internal_default_instance());
#else
  avatarendmessage_ = const_cast< ::AvatarEndMessage*>(&::AvatarEndMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  unknownavatarmessage_ = const_cast< ::UnknownAvatarMessage*>(
      ::UnknownAvatarMessage::internal_default_instance());
#else
  unknownavatarmessage_ = const_cast< ::UnknownAvatarMessage*>(&::UnknownAvatarMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerlistmessage_ = const_cast< ::PlayerListMessage*>(
      ::PlayerListMessage::internal_default_instance());
#else
  playerlistmessage_ = const_cast< ::PlayerListMessage*>(&::PlayerListMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamelistnewmessage_ = const_cast< ::GameListNewMessage*>(
      ::GameListNewMessage::internal_default_instance());
#else
  gamelistnewmessage_ = const_cast< ::GameListNewMessage*>(&::GameListNewMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamelistupdatemessage_ = const_cast< ::GameListUpdateMessage*>(
      ::GameListUpdateMessage::internal_default_instance());
#else
  gamelistupdatemessage_ = const_cast< ::GameListUpdateMessage*>(&::GameListUpdateMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamelistplayerjoinedmessage_ = const_cast< ::GameListPlayerJoinedMessage*>(
      ::GameListPlayerJoinedMessage::internal_default_instance());
#else
  gamelistplayerjoinedmessage_ = const_cast< ::GameListPlayerJoinedMessage*>(&::GameListPlayerJoinedMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamelistplayerleftmessage_ = const_cast< ::GameListPlayerLeftMessage*>(
      ::GameListPlayerLeftMessage::internal_default_instance());
#else
  gamelistplayerleftmessage_ = const_cast< ::GameListPlayerLeftMessage*>(&::GameListPlayerLeftMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamelistadminchangedmessage_ = const_cast< ::GameListAdminChangedMessage*>(
      ::GameListAdminChangedMessage::internal_default_instance());
#else
  gamelistadminchangedmessage_ = const_cast< ::GameListAdminChangedMessage*>(&::GameListAdminChangedMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinforequestmessage_ = const_cast< ::PlayerInfoRequestMessage*>(
      ::PlayerInfoRequestMessage::internal_default_instance());
#else
  playerinforequestmessage_ = const_cast< ::PlayerInfoRequestMessage*>(&::PlayerInfoRequestMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinforeplymessage_ = const_cast< ::PlayerInfoReplyMessage*>(
      ::PlayerInfoReplyMessage::internal_default_instance());
#else
  playerinforeplymessage_ = const_cast< ::PlayerInfoReplyMessage*>(&::PlayerInfoReplyMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  subscriptionrequestmessage_ = const_cast< ::SubscriptionRequestMessage*>(
      ::SubscriptionRequestMessage::internal_default_instance());
#else
  subscriptionrequestmessage_ = const_cast< ::SubscriptionRequestMessage*>(&::SubscriptionRequestMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  joinexistinggamemessage_ = const_cast< ::JoinExistingGameMessage*>(
      ::JoinExistingGameMessage::internal_default_instance());
#else
  joinexistinggamemessage_ = const_cast< ::JoinExistingGameMessage*>(&::JoinExistingGameMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  joinnewgamemessage_ = const_cast< ::JoinNewGameMessage*>(
      ::JoinNewGameMessage::internal_default_instance());
#else
  joinnewgamemessage_ = const_cast< ::JoinNewGameMessage*>(&::JoinNewGameMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rejoinexistinggamemessage_ = const_cast< ::RejoinExistingGameMessage*>(
      ::RejoinExistingGameMessage::internal_default_instance());
#else
  rejoinexistinggamemessage_ = const_cast< ::RejoinExistingGameMessage*>(&::RejoinExistingGameMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  joingameackmessage_ = const_cast< ::JoinGameAckMessage*>(
      ::JoinGameAckMessage::internal_default_instance());
#else
  joingameackmessage_ = const_cast< ::JoinGameAckMessage*>(&::JoinGameAckMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  joingamefailedmessage_ = const_cast< ::JoinGameFailedMessage*>(
      ::JoinGameFailedMessage::internal_default_instance());
#else
  joingamefailedmessage_ = const_cast< ::JoinGameFailedMessage*>(&::JoinGameFailedMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gameplayerjoinedmessage_ = const_cast< ::GamePlayerJoinedMessage*>(
      ::GamePlayerJoinedMessage::internal_default_instance());
#else
  gameplayerjoinedmessage_ = const_cast< ::GamePlayerJoinedMessage*>(&::GamePlayerJoinedMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gameplayerleftmessage_ = const_cast< ::GamePlayerLeftMessage*>(
      ::GamePlayerLeftMessage::internal_default_instance());
#else
  gameplayerleftmessage_ = const_cast< ::GamePlayerLeftMessage*>(&::GamePlayerLeftMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gameadminchangedmessage_ = const_cast< ::GameAdminChangedMessage*>(
      ::GameAdminChangedMessage::internal_default_instance());
#else
  gameadminchangedmessage_ = const_cast< ::GameAdminChangedMessage*>(&::GameAdminChangedMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  removedfromgamemessage_ = const_cast< ::RemovedFromGameMessage*>(
      ::RemovedFromGameMessage::internal_default_instance());
#else
  removedfromgamemessage_ = const_cast< ::RemovedFromGameMessage*>(&::RemovedFromGameMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  kickplayerrequestmessage_ = const_cast< ::KickPlayerRequestMessage*>(
      ::KickPlayerRequestMessage::internal_default_instance());
#else
  kickplayerrequestmessage_ = const_cast< ::KickPlayerRequestMessage*>(&::KickPlayerRequestMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  leavegamerequestmessage_ = const_cast< ::LeaveGameRequestMessage*>(
      ::LeaveGameRequestMessage::internal_default_instance());
#else
  leavegamerequestmessage_ = const_cast< ::LeaveGameRequestMessage*>(&::LeaveGameRequestMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  inviteplayertogamemessage_ = const_cast< ::InvitePlayerToGameMessage*>(
      ::InvitePlayerToGameMessage::internal_default_instance());
#else
  inviteplayertogamemessage_ = const_cast< ::InvitePlayerToGameMessage*>(&::InvitePlayerToGameMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  invitenotifymessage_ = const_cast< ::InviteNotifyMessage*>(
      ::InviteNotifyMessage::internal_default_instance());
#else
  invitenotifymessage_ = const_cast< ::InviteNotifyMessage*>(&::InviteNotifyMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rejectgameinvitationmessage_ = const_cast< ::RejectGameInvitationMessage*>(
      ::RejectGameInvitationMessage::internal_default_instance());
#else
  rejectgameinvitationmessage_ = const_cast< ::RejectGameInvitationMessage*>(&::RejectGameInvitationMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rejectinvnotifymessage_ = const_cast< ::RejectInvNotifyMessage*>(
      ::RejectInvNotifyMessage::internal_default_instance());
#else
  rejectinvnotifymessage_ = const_cast< ::RejectInvNotifyMessage*>(&::RejectInvNotifyMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  starteventmessage_ = const_cast< ::StartEventMessage*>(
      ::StartEventMessage::internal_default_instance());
#else
  starteventmessage_ = const_cast< ::StartEventMessage*>(&::StartEventMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  starteventackmessage_ = const_cast< ::StartEventAckMessage*>(
      ::StartEventAckMessage::internal_default_instance());
#else
  starteventackmessage_ = const_cast< ::StartEventAckMessage*>(&::StartEventAckMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamestartinitialmessage_ = const_cast< ::GameStartInitialMessage*>(
      ::GameStartInitialMessage::internal_default_instance());
#else
  gamestartinitialmessage_ = const_cast< ::GameStartInitialMessage*>(&::GameStartInitialMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamestartrejoinmessage_ = const_cast< ::GameStartRejoinMessage*>(
      ::GameStartRejoinMessage::internal_default_instance());
#else
  gamestartrejoinmessage_ = const_cast< ::GameStartRejoinMessage*>(&::GameStartRejoinMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  handstartmessage_ = const_cast< ::HandStartMessage*>(
      ::HandStartMessage::internal_default_instance());
#else
  handstartmessage_ = const_cast< ::HandStartMessage*>(&::HandStartMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playersturnmessage_ = const_cast< ::PlayersTurnMessage*>(
      ::PlayersTurnMessage::internal_default_instance());
#else
  playersturnmessage_ = const_cast< ::PlayersTurnMessage*>(&::PlayersTurnMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  myactionrequestmessage_ = const_cast< ::MyActionRequestMessage*>(
      ::MyActionRequestMessage::internal_default_instance());
#else
  myactionrequestmessage_ = const_cast< ::MyActionRequestMessage*>(&::MyActionRequestMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  youractionrejectedmessage_ = const_cast< ::YourActionRejectedMessage*>(
      ::YourActionRejectedMessage::internal_default_instance());
#else
  youractionrejectedmessage_ = const_cast< ::YourActionRejectedMessage*>(&::YourActionRejectedMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playersactiondonemessage_ = const_cast< ::PlayersActionDoneMessage*>(
      ::PlayersActionDoneMessage::internal_default_instance());
#else
  playersactiondonemessage_ = const_cast< ::PlayersActionDoneMessage*>(&::PlayersActionDoneMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dealflopcardsmessage_ = const_cast< ::DealFlopCardsMessage*>(
      ::DealFlopCardsMessage::internal_default_instance());
#else
  dealflopcardsmessage_ = const_cast< ::DealFlopCardsMessage*>(&::DealFlopCardsMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dealturncardmessage_ = const_cast< ::DealTurnCardMessage*>(
      ::DealTurnCardMessage::internal_default_instance());
#else
  dealturncardmessage_ = const_cast< ::DealTurnCardMessage*>(&::DealTurnCardMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dealrivercardmessage_ = const_cast< ::DealRiverCardMessage*>(
      ::DealRiverCardMessage::internal_default_instance());
#else
  dealrivercardmessage_ = const_cast< ::DealRiverCardMessage*>(&::DealRiverCardMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  allinshowcardsmessage_ = const_cast< ::AllInShowCardsMessage*>(
      ::AllInShowCardsMessage::internal_default_instance());
#else
  allinshowcardsmessage_ = const_cast< ::AllInShowCardsMessage*>(&::AllInShowCardsMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  endofhandshowcardsmessage_ = const_cast< ::EndOfHandShowCardsMessage*>(
      ::EndOfHandShowCardsMessage::internal_default_instance());
#else
  endofhandshowcardsmessage_ = const_cast< ::EndOfHandShowCardsMessage*>(&::EndOfHandShowCardsMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  endofhandhidecardsmessage_ = const_cast< ::EndOfHandHideCardsMessage*>(
      ::EndOfHandHideCardsMessage::internal_default_instance());
#else
  endofhandhidecardsmessage_ = const_cast< ::EndOfHandHideCardsMessage*>(&::EndOfHandHideCardsMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  showmycardsrequestmessage_ = const_cast< ::ShowMyCardsRequestMessage*>(
      ::ShowMyCardsRequestMessage::internal_default_instance());
#else
  showmycardsrequestmessage_ = const_cast< ::ShowMyCardsRequestMessage*>(&::ShowMyCardsRequestMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  afterhandshowcardsmessage_ = const_cast< ::AfterHandShowCardsMessage*>(
      ::AfterHandShowCardsMessage::internal_default_instance());
#else
  afterhandshowcardsmessage_ = const_cast< ::AfterHandShowCardsMessage*>(&::AfterHandShowCardsMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  endofgamemessage_ = const_cast< ::EndOfGameMessage*>(
      ::EndOfGameMessage::internal_default_instance());
#else
  endofgamemessage_ = const_cast< ::EndOfGameMessage*>(&::EndOfGameMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playeridchangedmessage_ = const_cast< ::PlayerIdChangedMessage*>(
      ::PlayerIdChangedMessage::internal_default_instance());
#else
  playeridchangedmessage_ = const_cast< ::PlayerIdChangedMessage*>(&::PlayerIdChangedMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  askkickplayermessage_ = const_cast< ::AskKickPlayerMessage*>(
      ::AskKickPlayerMessage::internal_default_instance());
#else
  askkickplayermessage_ = const_cast< ::AskKickPlayerMessage*>(&::AskKickPlayerMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  askkickdeniedmessage_ = const_cast< ::AskKickDeniedMessage*>(
      ::AskKickDeniedMessage::internal_default_instance());
#else
  askkickdeniedmessage_ = const_cast< ::AskKickDeniedMessage*>(&::AskKickDeniedMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  startkickpetitionmessage_ = const_cast< ::StartKickPetitionMessage*>(
      ::StartKickPetitionMessage::internal_default_instance());
#else
  startkickpetitionmessage_ = const_cast< ::StartKickPetitionMessage*>(&::StartKickPetitionMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  votekickrequestmessage_ = const_cast< ::VoteKickRequestMessage*>(
      ::VoteKickRequestMessage::internal_default_instance());
#else
  votekickrequestmessage_ = const_cast< ::VoteKickRequestMessage*>(&::VoteKickRequestMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  votekickreplymessage_ = const_cast< ::VoteKickReplyMessage*>(
      ::VoteKickReplyMessage::internal_default_instance());
#else
  votekickreplymessage_ = const_cast< ::VoteKickReplyMessage*>(&::VoteKickReplyMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  kickpetitionupdatemessage_ = const_cast< ::KickPetitionUpdateMessage*>(
      ::KickPetitionUpdateMessage::internal_default_instance());
#else
  kickpetitionupdatemessage_ = const_cast< ::KickPetitionUpdateMessage*>(&::KickPetitionUpdateMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  endkickpetitionmessage_ = const_cast< ::EndKickPetitionMessage*>(
      ::EndKickPetitionMessage::internal_default_instance());
#else
  endkickpetitionmessage_ = const_cast< ::EndKickPetitionMessage*>(&::EndKickPetitionMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  statisticsmessage_ = const_cast< ::StatisticsMessage*>(
      ::StatisticsMessage::internal_default_instance());
#else
  statisticsmessage_ = const_cast< ::StatisticsMessage*>(&::StatisticsMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chatrequestmessage_ = const_cast< ::ChatRequestMessage*>(
      ::ChatRequestMessage::internal_default_instance());
#else
  chatrequestmessage_ = const_cast< ::ChatRequestMessage*>(&::ChatRequestMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chatmessage_ = const_cast< ::ChatMessage*>(
      ::ChatMessage::internal_default_instance());
#else
  chatmessage_ = const_cast< ::ChatMessage*>(&::ChatMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chatrejectmessage_ = const_cast< ::ChatRejectMessage*>(
      ::ChatRejectMessage::internal_default_instance());
#else
  chatrejectmessage_ = const_cast< ::ChatRejectMessage*>(&::ChatRejectMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dialogmessage_ = const_cast< ::DialogMessage*>(
      ::DialogMessage::internal_default_instance());
#else
  dialogmessage_ = const_cast< ::DialogMessage*>(&::DialogMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  timeoutwarningmessage_ = const_cast< ::TimeoutWarningMessage*>(
      ::TimeoutWarningMessage::internal_default_instance());
#else
  timeoutwarningmessage_ = const_cast< ::TimeoutWarningMessage*>(&::TimeoutWarningMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  resettimeoutmessage_ = const_cast< ::ResetTimeoutMessage*>(
      ::ResetTimeoutMessage::internal_default_instance());
#else
  resettimeoutmessage_ = const_cast< ::ResetTimeoutMessage*>(&::ResetTimeoutMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reportavatarmessage_ = const_cast< ::ReportAvatarMessage*>(
      ::ReportAvatarMessage::internal_default_instance());
#else
  reportavatarmessage_ = const_cast< ::ReportAvatarMessage*>(&::ReportAvatarMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reportavatarackmessage_ = const_cast< ::ReportAvatarAckMessage*>(
      ::ReportAvatarAckMessage::internal_default_instance());
#else
  reportavatarackmessage_ = const_cast< ::ReportAvatarAckMessage*>(&::ReportAvatarAckMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reportgamemessage_ = const_cast< ::ReportGameMessage*>(
      ::ReportGameMessage::internal_default_instance());
#else
  reportgamemessage_ = const_cast< ::ReportGameMessage*>(&::ReportGameMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reportgameackmessage_ = const_cast< ::ReportGameAckMessage*>(
      ::ReportGameAckMessage::internal_default_instance());
#else
  reportgameackmessage_ = const_cast< ::ReportGameAckMessage*>(&::ReportGameAckMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  errormessage_ = const_cast< ::ErrorMessage*>(
      ::ErrorMessage::internal_default_instance());
#else
  errormessage_ = const_cast< ::ErrorMessage*>(&::ErrorMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  adminremovegamemessage_ = const_cast< ::AdminRemoveGameMessage*>(
      ::AdminRemoveGameMessage::internal_default_instance());
#else
  adminremovegamemessage_ = const_cast< ::AdminRemoveGameMessage*>(&::AdminRemoveGameMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  adminremovegameackmessage_ = const_cast< ::AdminRemoveGameAckMessage*>(
      ::AdminRemoveGameAckMessage::internal_default_instance());
#else
  adminremovegameackmessage_ = const_cast< ::AdminRemoveGameAckMessage*>(&::AdminRemoveGameAckMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  adminbanplayermessage_ = const_cast< ::AdminBanPlayerMessage*>(
      ::AdminBanPlayerMessage::internal_default_instance());
#else
  adminbanplayermessage_ = const_cast< ::AdminBanPlayerMessage*>(&::AdminBanPlayerMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  adminbanplayerackmessage_ = const_cast< ::AdminBanPlayerAckMessage*>(
      ::AdminBanPlayerAckMessage::internal_default_instance());
#else
  adminbanplayerackmessage_ = const_cast< ::AdminBanPlayerAckMessage*>(&::AdminBanPlayerAckMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamelistspectatorjoinedmessage_ = const_cast< ::GameListSpectatorJoinedMessage*>(
      ::GameListSpectatorJoinedMessage::internal_default_instance());
#else
  gamelistspectatorjoinedmessage_ = const_cast< ::GameListSpectatorJoinedMessage*>(&::GameListSpectatorJoinedMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamelistspectatorleftmessage_ = const_cast< ::GameListSpectatorLeftMessage*>(
      ::GameListSpectatorLeftMessage::internal_default_instance());
#else
  gamelistspectatorleftmessage_ = const_cast< ::GameListSpectatorLeftMessage*>(&::GameListSpectatorLeftMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamespectatorjoinedmessage_ = const_cast< ::GameSpectatorJoinedMessage*>(
      ::GameSpectatorJoinedMessage::internal_default_instance());
#else
  gamespectatorjoinedmessage_ = const_cast< ::GameSpectatorJoinedMessage*>(&::GameSpectatorJoinedMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gamespectatorleftmessage_ = const_cast< ::GameSpectatorLeftMessage*>(
      ::GameSpectatorLeftMessage::internal_default_instance());
#else
  gamespectatorleftmessage_ = const_cast< ::GameSpectatorLeftMessage*>(&::GameSpectatorLeftMessage::default_instance());
#endif
}

PokerTHMessage::PokerTHMessage(const PokerTHMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PokerTHMessage)
}

void PokerTHMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_ = 1;
  announcemessage_ = NULL;
  initmessage_ = NULL;
  authserverchallengemessage_ = NULL;
  authclientresponsemessage_ = NULL;
  authserververificationmessage_ = NULL;
  initackmessage_ = NULL;
  avatarrequestmessage_ = NULL;
  avatarheadermessage_ = NULL;
  avatardatamessage_ = NULL;
  avatarendmessage_ = NULL;
  unknownavatarmessage_ = NULL;
  playerlistmessage_ = NULL;
  gamelistnewmessage_ = NULL;
  gamelistupdatemessage_ = NULL;
  gamelistplayerjoinedmessage_ = NULL;
  gamelistplayerleftmessage_ = NULL;
  gamelistadminchangedmessage_ = NULL;
  playerinforequestmessage_ = NULL;
  playerinforeplymessage_ = NULL;
  subscriptionrequestmessage_ = NULL;
  joinexistinggamemessage_ = NULL;
  joinnewgamemessage_ = NULL;
  rejoinexistinggamemessage_ = NULL;
  joingameackmessage_ = NULL;
  joingamefailedmessage_ = NULL;
  gameplayerjoinedmessage_ = NULL;
  gameplayerleftmessage_ = NULL;
  gameadminchangedmessage_ = NULL;
  removedfromgamemessage_ = NULL;
  kickplayerrequestmessage_ = NULL;
  leavegamerequestmessage_ = NULL;
  inviteplayertogamemessage_ = NULL;
  invitenotifymessage_ = NULL;
  rejectgameinvitationmessage_ = NULL;
  rejectinvnotifymessage_ = NULL;
  starteventmessage_ = NULL;
  starteventackmessage_ = NULL;
  gamestartinitialmessage_ = NULL;
  gamestartrejoinmessage_ = NULL;
  handstartmessage_ = NULL;
  playersturnmessage_ = NULL;
  myactionrequestmessage_ = NULL;
  youractionrejectedmessage_ = NULL;
  playersactiondonemessage_ = NULL;
  dealflopcardsmessage_ = NULL;
  dealturncardmessage_ = NULL;
  dealrivercardmessage_ = NULL;
  allinshowcardsmessage_ = NULL;
  endofhandshowcardsmessage_ = NULL;
  endofhandhidecardsmessage_ = NULL;
  showmycardsrequestmessage_ = NULL;
  afterhandshowcardsmessage_ = NULL;
  endofgamemessage_ = NULL;
  playeridchangedmessage_ = NULL;
  askkickplayermessage_ = NULL;
  askkickdeniedmessage_ = NULL;
  startkickpetitionmessage_ = NULL;
  votekickrequestmessage_ = NULL;
  votekickreplymessage_ = NULL;
  kickpetitionupdatemessage_ = NULL;
  endkickpetitionmessage_ = NULL;
  statisticsmessage_ = NULL;
  chatrequestmessage_ = NULL;
  chatmessage_ = NULL;
  chatrejectmessage_ = NULL;
  dialogmessage_ = NULL;
  timeoutwarningmessage_ = NULL;
  resettimeoutmessage_ = NULL;
  reportavatarmessage_ = NULL;
  reportavatarackmessage_ = NULL;
  reportgamemessage_ = NULL;
  reportgameackmessage_ = NULL;
  errormessage_ = NULL;
  adminremovegamemessage_ = NULL;
  adminremovegameackmessage_ = NULL;
  adminbanplayermessage_ = NULL;
  adminbanplayerackmessage_ = NULL;
  gamelistspectatorjoinedmessage_ = NULL;
  gamelistspectatorleftmessage_ = NULL;
  gamespectatorjoinedmessage_ = NULL;
  gamespectatorleftmessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerTHMessage::~PokerTHMessage() {
  // @@protoc_insertion_point(destructor:PokerTHMessage)
  SharedDtor();
}

void PokerTHMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete announcemessage_;
    delete initmessage_;
    delete authserverchallengemessage_;
    delete authclientresponsemessage_;
    delete authserververificationmessage_;
    delete initackmessage_;
    delete avatarrequestmessage_;
    delete avatarheadermessage_;
    delete avatardatamessage_;
    delete avatarendmessage_;
    delete unknownavatarmessage_;
    delete playerlistmessage_;
    delete gamelistnewmessage_;
    delete gamelistupdatemessage_;
    delete gamelistplayerjoinedmessage_;
    delete gamelistplayerleftmessage_;
    delete gamelistadminchangedmessage_;
    delete playerinforequestmessage_;
    delete playerinforeplymessage_;
    delete subscriptionrequestmessage_;
    delete joinexistinggamemessage_;
    delete joinnewgamemessage_;
    delete rejoinexistinggamemessage_;
    delete joingameackmessage_;
    delete joingamefailedmessage_;
    delete gameplayerjoinedmessage_;
    delete gameplayerleftmessage_;
    delete gameadminchangedmessage_;
    delete removedfromgamemessage_;
    delete kickplayerrequestmessage_;
    delete leavegamerequestmessage_;
    delete inviteplayertogamemessage_;
    delete invitenotifymessage_;
    delete rejectgameinvitationmessage_;
    delete rejectinvnotifymessage_;
    delete starteventmessage_;
    delete starteventackmessage_;
    delete gamestartinitialmessage_;
    delete gamestartrejoinmessage_;
    delete handstartmessage_;
    delete playersturnmessage_;
    delete myactionrequestmessage_;
    delete youractionrejectedmessage_;
    delete playersactiondonemessage_;
    delete dealflopcardsmessage_;
    delete dealturncardmessage_;
    delete dealrivercardmessage_;
    delete allinshowcardsmessage_;
    delete endofhandshowcardsmessage_;
    delete endofhandhidecardsmessage_;
    delete showmycardsrequestmessage_;
    delete afterhandshowcardsmessage_;
    delete endofgamemessage_;
    delete playeridchangedmessage_;
    delete askkickplayermessage_;
    delete askkickdeniedmessage_;
    delete startkickpetitionmessage_;
    delete votekickrequestmessage_;
    delete votekickreplymessage_;
    delete kickpetitionupdatemessage_;
    delete endkickpetitionmessage_;
    delete statisticsmessage_;
    delete chatrequestmessage_;
    delete chatmessage_;
    delete chatrejectmessage_;
    delete dialogmessage_;
    delete timeoutwarningmessage_;
    delete resettimeoutmessage_;
    delete reportavatarmessage_;
    delete reportavatarackmessage_;
    delete reportgamemessage_;
    delete reportgameackmessage_;
    delete errormessage_;
    delete adminremovegamemessage_;
    delete adminremovegameackmessage_;
    delete adminbanplayermessage_;
    delete adminbanplayerackmessage_;
    delete gamelistspectatorjoinedmessage_;
    delete gamelistspectatorleftmessage_;
    delete gamespectatorjoinedmessage_;
    delete gamespectatorleftmessage_;
  }
}

void PokerTHMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PokerTHMessage& PokerTHMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pokerth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();
#endif
  return *default_instance_;
}

PokerTHMessage* PokerTHMessage::default_instance_ = NULL;

PokerTHMessage* PokerTHMessage::New(::google::protobuf::Arena* arena) const {
  PokerTHMessage* n = new PokerTHMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PokerTHMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PokerTHMessage)
  if (_has_bits_[0 / 32] & 255u) {
    messagetype_ = 1;
    if (has_announcemessage()) {
      if (announcemessage_ != NULL) announcemessage_->::AnnounceMessage::Clear();
    }
    if (has_initmessage()) {
      if (initmessage_ != NULL) initmessage_->::InitMessage::Clear();
    }
    if (has_authserverchallengemessage()) {
      if (authserverchallengemessage_ != NULL) authserverchallengemessage_->::AuthServerChallengeMessage::Clear();
    }
    if (has_authclientresponsemessage()) {
      if (authclientresponsemessage_ != NULL) authclientresponsemessage_->::AuthClientResponseMessage::Clear();
    }
    if (has_authserververificationmessage()) {
      if (authserververificationmessage_ != NULL) authserververificationmessage_->::AuthServerVerificationMessage::Clear();
    }
    if (has_initackmessage()) {
      if (initackmessage_ != NULL) initackmessage_->::InitAckMessage::Clear();
    }
    if (has_avatarrequestmessage()) {
      if (avatarrequestmessage_ != NULL) avatarrequestmessage_->::AvatarRequestMessage::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_avatarheadermessage()) {
      if (avatarheadermessage_ != NULL) avatarheadermessage_->::AvatarHeaderMessage::Clear();
    }
    if (has_avatardatamessage()) {
      if (avatardatamessage_ != NULL) avatardatamessage_->::AvatarDataMessage::Clear();
    }
    if (has_avatarendmessage()) {
      if (avatarendmessage_ != NULL) avatarendmessage_->::AvatarEndMessage::Clear();
    }
    if (has_unknownavatarmessage()) {
      if (unknownavatarmessage_ != NULL) unknownavatarmessage_->::UnknownAvatarMessage::Clear();
    }
    if (has_playerlistmessage()) {
      if (playerlistmessage_ != NULL) playerlistmessage_->::PlayerListMessage::Clear();
    }
    if (has_gamelistnewmessage()) {
      if (gamelistnewmessage_ != NULL) gamelistnewmessage_->::GameListNewMessage::Clear();
    }
    if (has_gamelistupdatemessage()) {
      if (gamelistupdatemessage_ != NULL) gamelistupdatemessage_->::GameListUpdateMessage::Clear();
    }
    if (has_gamelistplayerjoinedmessage()) {
      if (gamelistplayerjoinedmessage_ != NULL) gamelistplayerjoinedmessage_->::GameListPlayerJoinedMessage::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_gamelistplayerleftmessage()) {
      if (gamelistplayerleftmessage_ != NULL) gamelistplayerleftmessage_->::GameListPlayerLeftMessage::Clear();
    }
    if (has_gamelistadminchangedmessage()) {
      if (gamelistadminchangedmessage_ != NULL) gamelistadminchangedmessage_->::GameListAdminChangedMessage::Clear();
    }
    if (has_playerinforequestmessage()) {
      if (playerinforequestmessage_ != NULL) playerinforequestmessage_->::PlayerInfoRequestMessage::Clear();
    }
    if (has_playerinforeplymessage()) {
      if (playerinforeplymessage_ != NULL) playerinforeplymessage_->::PlayerInfoReplyMessage::Clear();
    }
    if (has_subscriptionrequestmessage()) {
      if (subscriptionrequestmessage_ != NULL) subscriptionrequestmessage_->::SubscriptionRequestMessage::Clear();
    }
    if (has_joinexistinggamemessage()) {
      if (joinexistinggamemessage_ != NULL) joinexistinggamemessage_->::JoinExistingGameMessage::Clear();
    }
    if (has_joinnewgamemessage()) {
      if (joinnewgamemessage_ != NULL) joinnewgamemessage_->::JoinNewGameMessage::Clear();
    }
    if (has_rejoinexistinggamemessage()) {
      if (rejoinexistinggamemessage_ != NULL) rejoinexistinggamemessage_->::RejoinExistingGameMessage::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_joingameackmessage()) {
      if (joingameackmessage_ != NULL) joingameackmessage_->::JoinGameAckMessage::Clear();
    }
    if (has_joingamefailedmessage()) {
      if (joingamefailedmessage_ != NULL) joingamefailedmessage_->::JoinGameFailedMessage::Clear();
    }
    if (has_gameplayerjoinedmessage()) {
      if (gameplayerjoinedmessage_ != NULL) gameplayerjoinedmessage_->::GamePlayerJoinedMessage::Clear();
    }
    if (has_gameplayerleftmessage()) {
      if (gameplayerleftmessage_ != NULL) gameplayerleftmessage_->::GamePlayerLeftMessage::Clear();
    }
    if (has_gameadminchangedmessage()) {
      if (gameadminchangedmessage_ != NULL) gameadminchangedmessage_->::GameAdminChangedMessage::Clear();
    }
    if (has_removedfromgamemessage()) {
      if (removedfromgamemessage_ != NULL) removedfromgamemessage_->::RemovedFromGameMessage::Clear();
    }
    if (has_kickplayerrequestmessage()) {
      if (kickplayerrequestmessage_ != NULL) kickplayerrequestmessage_->::KickPlayerRequestMessage::Clear();
    }
    if (has_leavegamerequestmessage()) {
      if (leavegamerequestmessage_ != NULL) leavegamerequestmessage_->::LeaveGameRequestMessage::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255u) {
    if (has_inviteplayertogamemessage()) {
      if (inviteplayertogamemessage_ != NULL) inviteplayertogamemessage_->::InvitePlayerToGameMessage::Clear();
    }
    if (has_invitenotifymessage()) {
      if (invitenotifymessage_ != NULL) invitenotifymessage_->::InviteNotifyMessage::Clear();
    }
    if (has_rejectgameinvitationmessage()) {
      if (rejectgameinvitationmessage_ != NULL) rejectgameinvitationmessage_->::RejectGameInvitationMessage::Clear();
    }
    if (has_rejectinvnotifymessage()) {
      if (rejectinvnotifymessage_ != NULL) rejectinvnotifymessage_->::RejectInvNotifyMessage::Clear();
    }
    if (has_starteventmessage()) {
      if (starteventmessage_ != NULL) starteventmessage_->::StartEventMessage::Clear();
    }
    if (has_starteventackmessage()) {
      if (starteventackmessage_ != NULL) starteventackmessage_->::StartEventAckMessage::Clear();
    }
    if (has_gamestartinitialmessage()) {
      if (gamestartinitialmessage_ != NULL) gamestartinitialmessage_->::GameStartInitialMessage::Clear();
    }
    if (has_gamestartrejoinmessage()) {
      if (gamestartrejoinmessage_ != NULL) gamestartrejoinmessage_->::GameStartRejoinMessage::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280u) {
    if (has_handstartmessage()) {
      if (handstartmessage_ != NULL) handstartmessage_->::HandStartMessage::Clear();
    }
    if (has_playersturnmessage()) {
      if (playersturnmessage_ != NULL) playersturnmessage_->::PlayersTurnMessage::Clear();
    }
    if (has_myactionrequestmessage()) {
      if (myactionrequestmessage_ != NULL) myactionrequestmessage_->::MyActionRequestMessage::Clear();
    }
    if (has_youractionrejectedmessage()) {
      if (youractionrejectedmessage_ != NULL) youractionrejectedmessage_->::YourActionRejectedMessage::Clear();
    }
    if (has_playersactiondonemessage()) {
      if (playersactiondonemessage_ != NULL) playersactiondonemessage_->::PlayersActionDoneMessage::Clear();
    }
    if (has_dealflopcardsmessage()) {
      if (dealflopcardsmessage_ != NULL) dealflopcardsmessage_->::DealFlopCardsMessage::Clear();
    }
    if (has_dealturncardmessage()) {
      if (dealturncardmessage_ != NULL) dealturncardmessage_->::DealTurnCardMessage::Clear();
    }
    if (has_dealrivercardmessage()) {
      if (dealrivercardmessage_ != NULL) dealrivercardmessage_->::DealRiverCardMessage::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    if (has_allinshowcardsmessage()) {
      if (allinshowcardsmessage_ != NULL) allinshowcardsmessage_->::AllInShowCardsMessage::Clear();
    }
    if (has_endofhandshowcardsmessage()) {
      if (endofhandshowcardsmessage_ != NULL) endofhandshowcardsmessage_->::EndOfHandShowCardsMessage::Clear();
    }
    if (has_endofhandhidecardsmessage()) {
      if (endofhandhidecardsmessage_ != NULL) endofhandhidecardsmessage_->::EndOfHandHideCardsMessage::Clear();
    }
    if (has_showmycardsrequestmessage()) {
      if (showmycardsrequestmessage_ != NULL) showmycardsrequestmessage_->::ShowMyCardsRequestMessage::Clear();
    }
    if (has_afterhandshowcardsmessage()) {
      if (afterhandshowcardsmessage_ != NULL) afterhandshowcardsmessage_->::AfterHandShowCardsMessage::Clear();
    }
    if (has_endofgamemessage()) {
      if (endofgamemessage_ != NULL) endofgamemessage_->::EndOfGameMessage::Clear();
    }
    if (has_playeridchangedmessage()) {
      if (playeridchangedmessage_ != NULL) playeridchangedmessage_->::PlayerIdChangedMessage::Clear();
    }
    if (has_askkickplayermessage()) {
      if (askkickplayermessage_ != NULL) askkickplayermessage_->::AskKickPlayerMessage::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    if (has_askkickdeniedmessage()) {
      if (askkickdeniedmessage_ != NULL) askkickdeniedmessage_->::AskKickDeniedMessage::Clear();
    }
    if (has_startkickpetitionmessage()) {
      if (startkickpetitionmessage_ != NULL) startkickpetitionmessage_->::StartKickPetitionMessage::Clear();
    }
    if (has_votekickrequestmessage()) {
      if (votekickrequestmessage_ != NULL) votekickrequestmessage_->::VoteKickRequestMessage::Clear();
    }
    if (has_votekickreplymessage()) {
      if (votekickreplymessage_ != NULL) votekickreplymessage_->::VoteKickReplyMessage::Clear();
    }
    if (has_kickpetitionupdatemessage()) {
      if (kickpetitionupdatemessage_ != NULL) kickpetitionupdatemessage_->::KickPetitionUpdateMessage::Clear();
    }
    if (has_endkickpetitionmessage()) {
      if (endkickpetitionmessage_ != NULL) endkickpetitionmessage_->::EndKickPetitionMessage::Clear();
    }
    if (has_statisticsmessage()) {
      if (statisticsmessage_ != NULL) statisticsmessage_->::StatisticsMessage::Clear();
    }
    if (has_chatrequestmessage()) {
      if (chatrequestmessage_ != NULL) chatrequestmessage_->::ChatRequestMessage::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255u) {
    if (has_chatmessage()) {
      if (chatmessage_ != NULL) chatmessage_->::ChatMessage::Clear();
    }
    if (has_chatrejectmessage()) {
      if (chatrejectmessage_ != NULL) chatrejectmessage_->::ChatRejectMessage::Clear();
    }
    if (has_dialogmessage()) {
      if (dialogmessage_ != NULL) dialogmessage_->::DialogMessage::Clear();
    }
    if (has_timeoutwarningmessage()) {
      if (timeoutwarningmessage_ != NULL) timeoutwarningmessage_->::TimeoutWarningMessage::Clear();
    }
    if (has_resettimeoutmessage()) {
      if (resettimeoutmessage_ != NULL) resettimeoutmessage_->::ResetTimeoutMessage::Clear();
    }
    if (has_reportavatarmessage()) {
      if (reportavatarmessage_ != NULL) reportavatarmessage_->::ReportAvatarMessage::Clear();
    }
    if (has_reportavatarackmessage()) {
      if (reportavatarackmessage_ != NULL) reportavatarackmessage_->::ReportAvatarAckMessage::Clear();
    }
    if (has_reportgamemessage()) {
      if (reportgamemessage_ != NULL) reportgamemessage_->::ReportGameMessage::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280u) {
    if (has_reportgameackmessage()) {
      if (reportgameackmessage_ != NULL) reportgameackmessage_->::ReportGameAckMessage::Clear();
    }
    if (has_errormessage()) {
      if (errormessage_ != NULL) errormessage_->::ErrorMessage::Clear();
    }
    if (has_adminremovegamemessage()) {
      if (adminremovegamemessage_ != NULL) adminremovegamemessage_->::AdminRemoveGameMessage::Clear();
    }
    if (has_adminremovegameackmessage()) {
      if (adminremovegameackmessage_ != NULL) adminremovegameackmessage_->::AdminRemoveGameAckMessage::Clear();
    }
    if (has_adminbanplayermessage()) {
      if (adminbanplayermessage_ != NULL) adminbanplayermessage_->::AdminBanPlayerMessage::Clear();
    }
    if (has_adminbanplayerackmessage()) {
      if (adminbanplayerackmessage_ != NULL) adminbanplayerackmessage_->::AdminBanPlayerAckMessage::Clear();
    }
    if (has_gamelistspectatorjoinedmessage()) {
      if (gamelistspectatorjoinedmessage_ != NULL) gamelistspectatorjoinedmessage_->::GameListSpectatorJoinedMessage::Clear();
    }
    if (has_gamelistspectatorleftmessage()) {
      if (gamelistspectatorleftmessage_ != NULL) gamelistspectatorleftmessage_->::GameListSpectatorLeftMessage::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 196608u) {
    if (has_gamespectatorjoinedmessage()) {
      if (gamespectatorjoinedmessage_ != NULL) gamespectatorjoinedmessage_->::GameSpectatorJoinedMessage::Clear();
    }
    if (has_gamespectatorleftmessage()) {
      if (gamespectatorleftmessage_ != NULL) gamespectatorleftmessage_->::GameSpectatorLeftMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PokerTHMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPokerTHMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PokerTHMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PokerTHMessage.PokerTHMessageType messageType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PokerTHMessage_PokerTHMessageType_IsValid(value)) {
            set_messagetype(static_cast< ::PokerTHMessage_PokerTHMessageType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_announceMessage;
        break;
      }

      // optional .AnnounceMessage announceMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_announceMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_announcemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_initMessage;
        break;
      }

      // optional .InitMessage initMessage = 3;
      case 3: {
        if (tag == 26) {
         parse_initMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_authServerChallengeMessage;
        break;
      }

      // optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
      case 4: {
        if (tag == 34) {
         parse_authServerChallengeMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authserverchallengemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_authClientResponseMessage;
        break;
      }

      // optional .AuthClientResponseMessage authClientResponseMessage = 5;
      case 5: {
        if (tag == 42) {
         parse_authClientResponseMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authclientresponsemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_authServerVerificationMessage;
        break;
      }

      // optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
      case 6: {
        if (tag == 50) {
         parse_authServerVerificationMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authserververificationmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_initAckMessage;
        break;
      }

      // optional .InitAckMessage initAckMessage = 7;
      case 7: {
        if (tag == 58) {
         parse_initAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initackmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avatarRequestMessage;
        break;
      }

      // optional .AvatarRequestMessage avatarRequestMessage = 8;
      case 8: {
        if (tag == 66) {
         parse_avatarRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatarrequestmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_avatarHeaderMessage;
        break;
      }

      // optional .AvatarHeaderMessage avatarHeaderMessage = 9;
      case 9: {
        if (tag == 74) {
         parse_avatarHeaderMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatarheadermessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_avatarDataMessage;
        break;
      }

      // optional .AvatarDataMessage avatarDataMessage = 10;
      case 10: {
        if (tag == 82) {
         parse_avatarDataMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatardatamessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_avatarEndMessage;
        break;
      }

      // optional .AvatarEndMessage avatarEndMessage = 11;
      case 11: {
        if (tag == 90) {
         parse_avatarEndMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatarendmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_unknownAvatarMessage;
        break;
      }

      // optional .UnknownAvatarMessage unknownAvatarMessage = 12;
      case 12: {
        if (tag == 98) {
         parse_unknownAvatarMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unknownavatarmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_playerListMessage;
        break;
      }

      // optional .PlayerListMessage playerListMessage = 13;
      case 13: {
        if (tag == 106) {
         parse_playerListMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerlistmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_gameListNewMessage;
        break;
      }

      // optional .GameListNewMessage gameListNewMessage = 14;
      case 14: {
        if (tag == 114) {
         parse_gameListNewMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistnewmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_gameListUpdateMessage;
        break;
      }

      // optional .GameListUpdateMessage gameListUpdateMessage = 15;
      case 15: {
        if (tag == 122) {
         parse_gameListUpdateMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistupdatemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_gameListPlayerJoinedMessage;
        break;
      }

      // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
      case 16: {
        if (tag == 130) {
         parse_gameListPlayerJoinedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistplayerjoinedmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_gameListPlayerLeftMessage;
        break;
      }

      // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
      case 17: {
        if (tag == 138) {
         parse_gameListPlayerLeftMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistplayerleftmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_gameListAdminChangedMessage;
        break;
      }

      // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
      case 18: {
        if (tag == 146) {
         parse_gameListAdminChangedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistadminchangedmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_playerInfoRequestMessage;
        break;
      }

      // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
      case 19: {
        if (tag == 154) {
         parse_playerInfoRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinforequestmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_playerInfoReplyMessage;
        break;
      }

      // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
      case 20: {
        if (tag == 162) {
         parse_playerInfoReplyMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinforeplymessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_subscriptionRequestMessage;
        break;
      }

      // optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
      case 21: {
        if (tag == 170) {
         parse_subscriptionRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscriptionrequestmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_joinExistingGameMessage;
        break;
      }

      // optional .JoinExistingGameMessage joinExistingGameMessage = 22;
      case 22: {
        if (tag == 178) {
         parse_joinExistingGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joinexistinggamemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_joinNewGameMessage;
        break;
      }

      // optional .JoinNewGameMessage joinNewGameMessage = 23;
      case 23: {
        if (tag == 186) {
         parse_joinNewGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joinnewgamemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_rejoinExistingGameMessage;
        break;
      }

      // optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
      case 24: {
        if (tag == 194) {
         parse_rejoinExistingGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rejoinexistinggamemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_joinGameAckMessage;
        break;
      }

      // optional .JoinGameAckMessage joinGameAckMessage = 25;
      case 25: {
        if (tag == 202) {
         parse_joinGameAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joingameackmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_joinGameFailedMessage;
        break;
      }

      // optional .JoinGameFailedMessage joinGameFailedMessage = 26;
      case 26: {
        if (tag == 210) {
         parse_joinGameFailedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joingamefailedmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_gamePlayerJoinedMessage;
        break;
      }

      // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
      case 27: {
        if (tag == 218) {
         parse_gamePlayerJoinedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameplayerjoinedmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_gamePlayerLeftMessage;
        break;
      }

      // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
      case 28: {
        if (tag == 226) {
         parse_gamePlayerLeftMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameplayerleftmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_gameAdminChangedMessage;
        break;
      }

      // optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
      case 29: {
        if (tag == 234) {
         parse_gameAdminChangedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameadminchangedmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_removedFromGameMessage;
        break;
      }

      // optional .RemovedFromGameMessage removedFromGameMessage = 30;
      case 30: {
        if (tag == 242) {
         parse_removedFromGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_removedfromgamemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_kickPlayerRequestMessage;
        break;
      }

      // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
      case 31: {
        if (tag == 250) {
         parse_kickPlayerRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickplayerrequestmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_leaveGameRequestMessage;
        break;
      }

      // optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
      case 32: {
        if (tag == 258) {
         parse_leaveGameRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leavegamerequestmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_invitePlayerToGameMessage;
        break;
      }

      // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
      case 33: {
        if (tag == 266) {
         parse_invitePlayerToGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inviteplayertogamemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_inviteNotifyMessage;
        break;
      }

      // optional .InviteNotifyMessage inviteNotifyMessage = 34;
      case 34: {
        if (tag == 274) {
         parse_inviteNotifyMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitenotifymessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_rejectGameInvitationMessage;
        break;
      }

      // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
      case 35: {
        if (tag == 282) {
         parse_rejectGameInvitationMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rejectgameinvitationmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_rejectInvNotifyMessage;
        break;
      }

      // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
      case 36: {
        if (tag == 290) {
         parse_rejectInvNotifyMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rejectinvnotifymessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_startEventMessage;
        break;
      }

      // optional .StartEventMessage startEventMessage = 37;
      case 37: {
        if (tag == 298) {
         parse_startEventMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starteventmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_startEventAckMessage;
        break;
      }

      // optional .StartEventAckMessage startEventAckMessage = 38;
      case 38: {
        if (tag == 306) {
         parse_startEventAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starteventackmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_gameStartInitialMessage;
        break;
      }

      // optional .GameStartInitialMessage gameStartInitialMessage = 39;
      case 39: {
        if (tag == 314) {
         parse_gameStartInitialMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestartinitialmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_gameStartRejoinMessage;
        break;
      }

      // optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
      case 40: {
        if (tag == 322) {
         parse_gameStartRejoinMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestartrejoinmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_handStartMessage;
        break;
      }

      // optional .HandStartMessage handStartMessage = 41;
      case 41: {
        if (tag == 330) {
         parse_handStartMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handstartmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_playersTurnMessage;
        break;
      }

      // optional .PlayersTurnMessage playersTurnMessage = 42;
      case 42: {
        if (tag == 338) {
         parse_playersTurnMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playersturnmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_myActionRequestMessage;
        break;
      }

      // optional .MyActionRequestMessage myActionRequestMessage = 43;
      case 43: {
        if (tag == 346) {
         parse_myActionRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myactionrequestmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_yourActionRejectedMessage;
        break;
      }

      // optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
      case 44: {
        if (tag == 354) {
         parse_yourActionRejectedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youractionrejectedmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_playersActionDoneMessage;
        break;
      }

      // optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
      case 45: {
        if (tag == 362) {
         parse_playersActionDoneMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playersactiondonemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_dealFlopCardsMessage;
        break;
      }

      // optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
      case 46: {
        if (tag == 370) {
         parse_dealFlopCardsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dealflopcardsmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_dealTurnCardMessage;
        break;
      }

      // optional .DealTurnCardMessage dealTurnCardMessage = 47;
      case 47: {
        if (tag == 378) {
         parse_dealTurnCardMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dealturncardmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_dealRiverCardMessage;
        break;
      }

      // optional .DealRiverCardMessage dealRiverCardMessage = 48;
      case 48: {
        if (tag == 386) {
         parse_dealRiverCardMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dealrivercardmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_allInShowCardsMessage;
        break;
      }

      // optional .AllInShowCardsMessage allInShowCardsMessage = 49;
      case 49: {
        if (tag == 394) {
         parse_allInShowCardsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allinshowcardsmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_endOfHandShowCardsMessage;
        break;
      }

      // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
      case 50: {
        if (tag == 402) {
         parse_endOfHandShowCardsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endofhandshowcardsmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_endOfHandHideCardsMessage;
        break;
      }

      // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
      case 51: {
        if (tag == 410) {
         parse_endOfHandHideCardsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endofhandhidecardsmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_showMyCardsRequestMessage;
        break;
      }

      // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
      case 52: {
        if (tag == 418) {
         parse_showMyCardsRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showmycardsrequestmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_afterHandShowCardsMessage;
        break;
      }

      // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
      case 53: {
        if (tag == 426) {
         parse_afterHandShowCardsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afterhandshowcardsmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_endOfGameMessage;
        break;
      }

      // optional .EndOfGameMessage endOfGameMessage = 54;
      case 54: {
        if (tag == 434) {
         parse_endOfGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endofgamemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_playerIdChangedMessage;
        break;
      }

      // optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
      case 55: {
        if (tag == 442) {
         parse_playerIdChangedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playeridchangedmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_askKickPlayerMessage;
        break;
      }

      // optional .AskKickPlayerMessage askKickPlayerMessage = 56;
      case 56: {
        if (tag == 450) {
         parse_askKickPlayerMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_askkickplayermessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_askKickDeniedMessage;
        break;
      }

      // optional .AskKickDeniedMessage askKickDeniedMessage = 57;
      case 57: {
        if (tag == 458) {
         parse_askKickDeniedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_askkickdeniedmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_startKickPetitionMessage;
        break;
      }

      // optional .StartKickPetitionMessage startKickPetitionMessage = 58;
      case 58: {
        if (tag == 466) {
         parse_startKickPetitionMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startkickpetitionmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_voteKickRequestMessage;
        break;
      }

      // optional .VoteKickRequestMessage voteKickRequestMessage = 59;
      case 59: {
        if (tag == 474) {
         parse_voteKickRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_votekickrequestmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_voteKickReplyMessage;
        break;
      }

      // optional .VoteKickReplyMessage voteKickReplyMessage = 60;
      case 60: {
        if (tag == 482) {
         parse_voteKickReplyMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_votekickreplymessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_kickPetitionUpdateMessage;
        break;
      }

      // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
      case 61: {
        if (tag == 490) {
         parse_kickPetitionUpdateMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickpetitionupdatemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_endKickPetitionMessage;
        break;
      }

      // optional .EndKickPetitionMessage endKickPetitionMessage = 62;
      case 62: {
        if (tag == 498) {
         parse_endKickPetitionMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endkickpetitionmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_statisticsMessage;
        break;
      }

      // optional .StatisticsMessage statisticsMessage = 63;
      case 63: {
        if (tag == 506) {
         parse_statisticsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statisticsmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_chatRequestMessage;
        break;
      }

      // optional .ChatRequestMessage chatRequestMessage = 64;
      case 64: {
        if (tag == 514) {
         parse_chatRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatrequestmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse_chatMessage;
        break;
      }

      // optional .ChatMessage chatMessage = 65;
      case 65: {
        if (tag == 522) {
         parse_chatMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_chatRejectMessage;
        break;
      }

      // optional .ChatRejectMessage chatRejectMessage = 66;
      case 66: {
        if (tag == 530) {
         parse_chatRejectMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatrejectmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_dialogMessage;
        break;
      }

      // optional .DialogMessage dialogMessage = 67;
      case 67: {
        if (tag == 538) {
         parse_dialogMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dialogmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_timeoutWarningMessage;
        break;
      }

      // optional .TimeoutWarningMessage timeoutWarningMessage = 68;
      case 68: {
        if (tag == 546) {
         parse_timeoutWarningMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeoutwarningmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(554)) goto parse_resetTimeoutMessage;
        break;
      }

      // optional .ResetTimeoutMessage resetTimeoutMessage = 69;
      case 69: {
        if (tag == 554) {
         parse_resetTimeoutMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resettimeoutmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_reportAvatarMessage;
        break;
      }

      // optional .ReportAvatarMessage reportAvatarMessage = 70;
      case 70: {
        if (tag == 562) {
         parse_reportAvatarMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportavatarmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(570)) goto parse_reportAvatarAckMessage;
        break;
      }

      // optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
      case 71: {
        if (tag == 570) {
         parse_reportAvatarAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportavatarackmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_reportGameMessage;
        break;
      }

      // optional .ReportGameMessage reportGameMessage = 72;
      case 72: {
        if (tag == 578) {
         parse_reportGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportgamemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_reportGameAckMessage;
        break;
      }

      // optional .ReportGameAckMessage reportGameAckMessage = 73;
      case 73: {
        if (tag == 586) {
         parse_reportGameAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportgameackmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(594)) goto parse_errorMessage;
        break;
      }

      // optional .ErrorMessage errorMessage = 74;
      case 74: {
        if (tag == 594) {
         parse_errorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errormessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(602)) goto parse_adminRemoveGameMessage;
        break;
      }

      // optional .AdminRemoveGameMessage adminRemoveGameMessage = 75;
      case 75: {
        if (tag == 602) {
         parse_adminRemoveGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminremovegamemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(610)) goto parse_adminRemoveGameAckMessage;
        break;
      }

      // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 76;
      case 76: {
        if (tag == 610) {
         parse_adminRemoveGameAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminremovegameackmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(618)) goto parse_adminBanPlayerMessage;
        break;
      }

      // optional .AdminBanPlayerMessage adminBanPlayerMessage = 77;
      case 77: {
        if (tag == 618) {
         parse_adminBanPlayerMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminbanplayermessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(626)) goto parse_adminBanPlayerAckMessage;
        break;
      }

      // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 78;
      case 78: {
        if (tag == 626) {
         parse_adminBanPlayerAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminbanplayerackmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(634)) goto parse_gameListSpectatorJoinedMessage;
        break;
      }

      // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 79;
      case 79: {
        if (tag == 634) {
         parse_gameListSpectatorJoinedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistspectatorjoinedmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_gameListSpectatorLeftMessage;
        break;
      }

      // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 80;
      case 80: {
        if (tag == 642) {
         parse_gameListSpectatorLeftMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistspectatorleftmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(650)) goto parse_gameSpectatorJoinedMessage;
        break;
      }

      // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 81;
      case 81: {
        if (tag == 650) {
         parse_gameSpectatorJoinedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamespectatorjoinedmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(658)) goto parse_gameSpectatorLeftMessage;
        break;
      }

      // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 82;
      case 82: {
        if (tag == 658) {
         parse_gameSpectatorLeftMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamespectatorleftmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PokerTHMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PokerTHMessage)
  return false;
#undef DO_
}

void PokerTHMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PokerTHMessage)
  // required .PokerTHMessage.PokerTHMessageType messageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // optional .AnnounceMessage announceMessage = 2;
  if (has_announcemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->announcemessage_, output);
  }

  // optional .InitMessage initMessage = 3;
  if (has_initmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->initmessage_, output);
  }

  // optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
  if (has_authserverchallengemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->authserverchallengemessage_, output);
  }

  // optional .AuthClientResponseMessage authClientResponseMessage = 5;
  if (has_authclientresponsemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->authclientresponsemessage_, output);
  }

  // optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
  if (has_authserververificationmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->authserververificationmessage_, output);
  }

  // optional .InitAckMessage initAckMessage = 7;
  if (has_initackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->initackmessage_, output);
  }

  // optional .AvatarRequestMessage avatarRequestMessage = 8;
  if (has_avatarrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->avatarrequestmessage_, output);
  }

  // optional .AvatarHeaderMessage avatarHeaderMessage = 9;
  if (has_avatarheadermessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->avatarheadermessage_, output);
  }

  // optional .AvatarDataMessage avatarDataMessage = 10;
  if (has_avatardatamessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->avatardatamessage_, output);
  }

  // optional .AvatarEndMessage avatarEndMessage = 11;
  if (has_avatarendmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->avatarendmessage_, output);
  }

  // optional .UnknownAvatarMessage unknownAvatarMessage = 12;
  if (has_unknownavatarmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->unknownavatarmessage_, output);
  }

  // optional .PlayerListMessage playerListMessage = 13;
  if (has_playerlistmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->playerlistmessage_, output);
  }

  // optional .GameListNewMessage gameListNewMessage = 14;
  if (has_gamelistnewmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->gamelistnewmessage_, output);
  }

  // optional .GameListUpdateMessage gameListUpdateMessage = 15;
  if (has_gamelistupdatemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->gamelistupdatemessage_, output);
  }

  // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
  if (has_gamelistplayerjoinedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, *this->gamelistplayerjoinedmessage_, output);
  }

  // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
  if (has_gamelistplayerleftmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, *this->gamelistplayerleftmessage_, output);
  }

  // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
  if (has_gamelistadminchangedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, *this->gamelistadminchangedmessage_, output);
  }

  // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
  if (has_playerinforequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, *this->playerinforequestmessage_, output);
  }

  // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
  if (has_playerinforeplymessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, *this->playerinforeplymessage_, output);
  }

  // optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
  if (has_subscriptionrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, *this->subscriptionrequestmessage_, output);
  }

  // optional .JoinExistingGameMessage joinExistingGameMessage = 22;
  if (has_joinexistinggamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, *this->joinexistinggamemessage_, output);
  }

  // optional .JoinNewGameMessage joinNewGameMessage = 23;
  if (has_joinnewgamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, *this->joinnewgamemessage_, output);
  }

  // optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
  if (has_rejoinexistinggamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, *this->rejoinexistinggamemessage_, output);
  }

  // optional .JoinGameAckMessage joinGameAckMessage = 25;
  if (has_joingameackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, *this->joingameackmessage_, output);
  }

  // optional .JoinGameFailedMessage joinGameFailedMessage = 26;
  if (has_joingamefailedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, *this->joingamefailedmessage_, output);
  }

  // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
  if (has_gameplayerjoinedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, *this->gameplayerjoinedmessage_, output);
  }

  // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
  if (has_gameplayerleftmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, *this->gameplayerleftmessage_, output);
  }

  // optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
  if (has_gameadminchangedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, *this->gameadminchangedmessage_, output);
  }

  // optional .RemovedFromGameMessage removedFromGameMessage = 30;
  if (has_removedfromgamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, *this->removedfromgamemessage_, output);
  }

  // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
  if (has_kickplayerrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, *this->kickplayerrequestmessage_, output);
  }

  // optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
  if (has_leavegamerequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, *this->leavegamerequestmessage_, output);
  }

  // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
  if (has_inviteplayertogamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, *this->inviteplayertogamemessage_, output);
  }

  // optional .InviteNotifyMessage inviteNotifyMessage = 34;
  if (has_invitenotifymessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, *this->invitenotifymessage_, output);
  }

  // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
  if (has_rejectgameinvitationmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, *this->rejectgameinvitationmessage_, output);
  }

  // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
  if (has_rejectinvnotifymessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, *this->rejectinvnotifymessage_, output);
  }

  // optional .StartEventMessage startEventMessage = 37;
  if (has_starteventmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, *this->starteventmessage_, output);
  }

  // optional .StartEventAckMessage startEventAckMessage = 38;
  if (has_starteventackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, *this->starteventackmessage_, output);
  }

  // optional .GameStartInitialMessage gameStartInitialMessage = 39;
  if (has_gamestartinitialmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      39, *this->gamestartinitialmessage_, output);
  }

  // optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
  if (has_gamestartrejoinmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, *this->gamestartrejoinmessage_, output);
  }

  // optional .HandStartMessage handStartMessage = 41;
  if (has_handstartmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, *this->handstartmessage_, output);
  }

  // optional .PlayersTurnMessage playersTurnMessage = 42;
  if (has_playersturnmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      42, *this->playersturnmessage_, output);
  }

  // optional .MyActionRequestMessage myActionRequestMessage = 43;
  if (has_myactionrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      43, *this->myactionrequestmessage_, output);
  }

  // optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
  if (has_youractionrejectedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      44, *this->youractionrejectedmessage_, output);
  }

  // optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
  if (has_playersactiondonemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, *this->playersactiondonemessage_, output);
  }

  // optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
  if (has_dealflopcardsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, *this->dealflopcardsmessage_, output);
  }

  // optional .DealTurnCardMessage dealTurnCardMessage = 47;
  if (has_dealturncardmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, *this->dealturncardmessage_, output);
  }

  // optional .DealRiverCardMessage dealRiverCardMessage = 48;
  if (has_dealrivercardmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48, *this->dealrivercardmessage_, output);
  }

  // optional .AllInShowCardsMessage allInShowCardsMessage = 49;
  if (has_allinshowcardsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, *this->allinshowcardsmessage_, output);
  }

  // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
  if (has_endofhandshowcardsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      50, *this->endofhandshowcardsmessage_, output);
  }

  // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
  if (has_endofhandhidecardsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      51, *this->endofhandhidecardsmessage_, output);
  }

  // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
  if (has_showmycardsrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      52, *this->showmycardsrequestmessage_, output);
  }

  // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
  if (has_afterhandshowcardsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      53, *this->afterhandshowcardsmessage_, output);
  }

  // optional .EndOfGameMessage endOfGameMessage = 54;
  if (has_endofgamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      54, *this->endofgamemessage_, output);
  }

  // optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
  if (has_playeridchangedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      55, *this->playeridchangedmessage_, output);
  }

  // optional .AskKickPlayerMessage askKickPlayerMessage = 56;
  if (has_askkickplayermessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      56, *this->askkickplayermessage_, output);
  }

  // optional .AskKickDeniedMessage askKickDeniedMessage = 57;
  if (has_askkickdeniedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      57, *this->askkickdeniedmessage_, output);
  }

  // optional .StartKickPetitionMessage startKickPetitionMessage = 58;
  if (has_startkickpetitionmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      58, *this->startkickpetitionmessage_, output);
  }

  // optional .VoteKickRequestMessage voteKickRequestMessage = 59;
  if (has_votekickrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      59, *this->votekickrequestmessage_, output);
  }

  // optional .VoteKickReplyMessage voteKickReplyMessage = 60;
  if (has_votekickreplymessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      60, *this->votekickreplymessage_, output);
  }

  // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
  if (has_kickpetitionupdatemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      61, *this->kickpetitionupdatemessage_, output);
  }

  // optional .EndKickPetitionMessage endKickPetitionMessage = 62;
  if (has_endkickpetitionmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      62, *this->endkickpetitionmessage_, output);
  }

  // optional .StatisticsMessage statisticsMessage = 63;
  if (has_statisticsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      63, *this->statisticsmessage_, output);
  }

  // optional .ChatRequestMessage chatRequestMessage = 64;
  if (has_chatrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      64, *this->chatrequestmessage_, output);
  }

  // optional .ChatMessage chatMessage = 65;
  if (has_chatmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      65, *this->chatmessage_, output);
  }

  // optional .ChatRejectMessage chatRejectMessage = 66;
  if (has_chatrejectmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      66, *this->chatrejectmessage_, output);
  }

  // optional .DialogMessage dialogMessage = 67;
  if (has_dialogmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      67, *this->dialogmessage_, output);
  }

  // optional .TimeoutWarningMessage timeoutWarningMessage = 68;
  if (has_timeoutwarningmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      68, *this->timeoutwarningmessage_, output);
  }

  // optional .ResetTimeoutMessage resetTimeoutMessage = 69;
  if (has_resettimeoutmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      69, *this->resettimeoutmessage_, output);
  }

  // optional .ReportAvatarMessage reportAvatarMessage = 70;
  if (has_reportavatarmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      70, *this->reportavatarmessage_, output);
  }

  // optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
  if (has_reportavatarackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      71, *this->reportavatarackmessage_, output);
  }

  // optional .ReportGameMessage reportGameMessage = 72;
  if (has_reportgamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      72, *this->reportgamemessage_, output);
  }

  // optional .ReportGameAckMessage reportGameAckMessage = 73;
  if (has_reportgameackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      73, *this->reportgameackmessage_, output);
  }

  // optional .ErrorMessage errorMessage = 74;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      74, *this->errormessage_, output);
  }

  // optional .AdminRemoveGameMessage adminRemoveGameMessage = 75;
  if (has_adminremovegamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      75, *this->adminremovegamemessage_, output);
  }

  // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 76;
  if (has_adminremovegameackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      76, *this->adminremovegameackmessage_, output);
  }

  // optional .AdminBanPlayerMessage adminBanPlayerMessage = 77;
  if (has_adminbanplayermessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      77, *this->adminbanplayermessage_, output);
  }

  // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 78;
  if (has_adminbanplayerackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      78, *this->adminbanplayerackmessage_, output);
  }

  // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 79;
  if (has_gamelistspectatorjoinedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      79, *this->gamelistspectatorjoinedmessage_, output);
  }

  // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 80;
  if (has_gamelistspectatorleftmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      80, *this->gamelistspectatorleftmessage_, output);
  }

  // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 81;
  if (has_gamespectatorjoinedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      81, *this->gamespectatorjoinedmessage_, output);
  }

  // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 82;
  if (has_gamespectatorleftmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      82, *this->gamespectatorleftmessage_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PokerTHMessage)
}

int PokerTHMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PokerTHMessage)
  int total_size = 0;

  // required .PokerTHMessage.PokerTHMessageType messageType = 1;
  if (has_messagetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional .AnnounceMessage announceMessage = 2;
    if (has_announcemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->announcemessage_);
    }

    // optional .InitMessage initMessage = 3;
    if (has_initmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->initmessage_);
    }

    // optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
    if (has_authserverchallengemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->authserverchallengemessage_);
    }

    // optional .AuthClientResponseMessage authClientResponseMessage = 5;
    if (has_authclientresponsemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->authclientresponsemessage_);
    }

    // optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
    if (has_authserververificationmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->authserververificationmessage_);
    }

    // optional .InitAckMessage initAckMessage = 7;
    if (has_initackmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->initackmessage_);
    }

    // optional .AvatarRequestMessage avatarRequestMessage = 8;
    if (has_avatarrequestmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->avatarrequestmessage_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .AvatarHeaderMessage avatarHeaderMessage = 9;
    if (has_avatarheadermessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->avatarheadermessage_);
    }

    // optional .AvatarDataMessage avatarDataMessage = 10;
    if (has_avatardatamessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->avatardatamessage_);
    }

    // optional .AvatarEndMessage avatarEndMessage = 11;
    if (has_avatarendmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->avatarendmessage_);
    }

    // optional .UnknownAvatarMessage unknownAvatarMessage = 12;
    if (has_unknownavatarmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unknownavatarmessage_);
    }

    // optional .PlayerListMessage playerListMessage = 13;
    if (has_playerlistmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->playerlistmessage_);
    }

    // optional .GameListNewMessage gameListNewMessage = 14;
    if (has_gamelistnewmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gamelistnewmessage_);
    }

    // optional .GameListUpdateMessage gameListUpdateMessage = 15;
    if (has_gamelistupdatemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gamelistupdatemessage_);
    }

    // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
    if (has_gamelistplayerjoinedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gamelistplayerjoinedmessage_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
    if (has_gamelistplayerleftmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gamelistplayerleftmessage_);
    }

    // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
    if (has_gamelistadminchangedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gamelistadminchangedmessage_);
    }

    // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
    if (has_playerinforequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->playerinforequestmessage_);
    }

    // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
    if (has_playerinforeplymessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->playerinforeplymessage_);
    }

    // optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
    if (has_subscriptionrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->subscriptionrequestmessage_);
    }

    // optional .JoinExistingGameMessage joinExistingGameMessage = 22;
    if (has_joinexistinggamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->joinexistinggamemessage_);
    }

    // optional .JoinNewGameMessage joinNewGameMessage = 23;
    if (has_joinnewgamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->joinnewgamemessage_);
    }

    // optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
    if (has_rejoinexistinggamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rejoinexistinggamemessage_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .JoinGameAckMessage joinGameAckMessage = 25;
    if (has_joingameackmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->joingameackmessage_);
    }

    // optional .JoinGameFailedMessage joinGameFailedMessage = 26;
    if (has_joingamefailedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->joingamefailedmessage_);
    }

    // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
    if (has_gameplayerjoinedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gameplayerjoinedmessage_);
    }

    // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
    if (has_gameplayerleftmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gameplayerleftmessage_);
    }

    // optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
    if (has_gameadminchangedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gameadminchangedmessage_);
    }

    // optional .RemovedFromGameMessage removedFromGameMessage = 30;
    if (has_removedfromgamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->removedfromgamemessage_);
    }

    // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
    if (has_kickplayerrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kickplayerrequestmessage_);
    }

    // optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
    if (has_leavegamerequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leavegamerequestmessage_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
    if (has_inviteplayertogamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inviteplayertogamemessage_);
    }

    // optional .InviteNotifyMessage inviteNotifyMessage = 34;
    if (has_invitenotifymessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->invitenotifymessage_);
    }

    // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
    if (has_rejectgameinvitationmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rejectgameinvitationmessage_);
    }

    // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
    if (has_rejectinvnotifymessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rejectinvnotifymessage_);
    }

    // optional .StartEventMessage startEventMessage = 37;
    if (has_starteventmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->starteventmessage_);
    }

    // optional .StartEventAckMessage startEventAckMessage = 38;
    if (has_starteventackmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->starteventackmessage_);
    }

    // optional .GameStartInitialMessage gameStartInitialMessage = 39;
    if (has_gamestartinitialmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gamestartinitialmessage_);
    }

    // optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
    if (has_gamestartrejoinmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gamestartrejoinmessage_);
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional .HandStartMessage handStartMessage = 41;
    if (has_handstartmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->handstartmessage_);
    }

    // optional .PlayersTurnMessage playersTurnMessage = 42;
    if (has_playersturnmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->playersturnmessage_);
    }

    // optional .MyActionRequestMessage myActionRequestMessage = 43;
    if (has_myactionrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->myactionrequestmessage_);
    }

    // optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
    if (has_youractionrejectedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->youractionrejectedmessage_);
    }

    // optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
    if (has_playersactiondonemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->playersactiondonemessage_);
    }

    // optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
    if (has_dealflopcardsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dealflopcardsmessage_);
    }

    // optional .DealTurnCardMessage dealTurnCardMessage = 47;
    if (has_dealturncardmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dealturncardmessage_);
    }

    // optional .DealRiverCardMessage dealRiverCardMessage = 48;
    if (has_dealrivercardmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dealrivercardmessage_);
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional .AllInShowCardsMessage allInShowCardsMessage = 49;
    if (has_allinshowcardsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->allinshowcardsmessage_);
    }

    // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
    if (has_endofhandshowcardsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->endofhandshowcardsmessage_);
    }

    // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
    if (has_endofhandhidecardsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->endofhandhidecardsmessage_);
    }

    // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
    if (has_showmycardsrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->showmycardsrequestmessage_);
    }

    // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
    if (has_afterhandshowcardsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->afterhandshowcardsmessage_);
    }

    // optional .EndOfGameMessage endOfGameMessage = 54;
    if (has_endofgamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->endofgamemessage_);
    }

    // optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
    if (has_playeridchangedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->playeridchangedmessage_);
    }

    // optional .AskKickPlayerMessage askKickPlayerMessage = 56;
    if (has_askkickplayermessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->askkickplayermessage_);
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional .AskKickDeniedMessage askKickDeniedMessage = 57;
    if (has_askkickdeniedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->askkickdeniedmessage_);
    }

    // optional .StartKickPetitionMessage startKickPetitionMessage = 58;
    if (has_startkickpetitionmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->startkickpetitionmessage_);
    }

    // optional .VoteKickRequestMessage voteKickRequestMessage = 59;
    if (has_votekickrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->votekickrequestmessage_);
    }

    // optional .VoteKickReplyMessage voteKickReplyMessage = 60;
    if (has_votekickreplymessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->votekickreplymessage_);
    }

    // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
    if (has_kickpetitionupdatemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kickpetitionupdatemessage_);
    }

    // optional .EndKickPetitionMessage endKickPetitionMessage = 62;
    if (has_endkickpetitionmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->endkickpetitionmessage_);
    }

    // optional .StatisticsMessage statisticsMessage = 63;
    if (has_statisticsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->statisticsmessage_);
    }

    // optional .ChatRequestMessage chatRequestMessage = 64;
    if (has_chatrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chatrequestmessage_);
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional .ChatMessage chatMessage = 65;
    if (has_chatmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chatmessage_);
    }

    // optional .ChatRejectMessage chatRejectMessage = 66;
    if (has_chatrejectmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chatrejectmessage_);
    }

    // optional .DialogMessage dialogMessage = 67;
    if (has_dialogmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dialogmessage_);
    }

    // optional .TimeoutWarningMessage timeoutWarningMessage = 68;
    if (has_timeoutwarningmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timeoutwarningmessage_);
    }

    // optional .ResetTimeoutMessage resetTimeoutMessage = 69;
    if (has_resettimeoutmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resettimeoutmessage_);
    }

    // optional .ReportAvatarMessage reportAvatarMessage = 70;
    if (has_reportavatarmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reportavatarmessage_);
    }

    // optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
    if (has_reportavatarackmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reportavatarackmessage_);
    }

    // optional .ReportGameMessage reportGameMessage = 72;
    if (has_reportgamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reportgamemessage_);
    }

  }
  if (_has_bits_[72 / 32] & 65280u) {
    // optional .ReportGameAckMessage reportGameAckMessage = 73;
    if (has_reportgameackmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reportgameackmessage_);
    }

    // optional .ErrorMessage errorMessage = 74;
    if (has_errormessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->errormessage_);
    }

    // optional .AdminRemoveGameMessage adminRemoveGameMessage = 75;
    if (has_adminremovegamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminremovegamemessage_);
    }

    // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 76;
    if (has_adminremovegameackmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminremovegameackmessage_);
    }

    // optional .AdminBanPlayerMessage adminBanPlayerMessage = 77;
    if (has_adminbanplayermessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminbanplayermessage_);
    }

    // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 78;
    if (has_adminbanplayerackmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adminbanplayerackmessage_);
    }

    // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 79;
    if (has_gamelistspectatorjoinedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gamelistspectatorjoinedmessage_);
    }

    // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 80;
    if (has_gamelistspectatorleftmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gamelistspectatorleftmessage_);
    }

  }
  if (_has_bits_[80 / 32] & 196608u) {
    // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 81;
    if (has_gamespectatorjoinedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gamespectatorjoinedmessage_);
    }

    // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 82;
    if (has_gamespectatorleftmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gamespectatorleftmessage_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerTHMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PokerTHMessage*>(&from));
}

void PokerTHMessage::MergeFrom(const PokerTHMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PokerTHMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_announcemessage()) {
      mutable_announcemessage()->::AnnounceMessage::MergeFrom(from.announcemessage());
    }
    if (from.has_initmessage()) {
      mutable_initmessage()->::InitMessage::MergeFrom(from.initmessage());
    }
    if (from.has_authserverchallengemessage()) {
      mutable_authserverchallengemessage()->::AuthServerChallengeMessage::MergeFrom(from.authserverchallengemessage());
    }
    if (from.has_authclientresponsemessage()) {
      mutable_authclientresponsemessage()->::AuthClientResponseMessage::MergeFrom(from.authclientresponsemessage());
    }
    if (from.has_authserververificationmessage()) {
      mutable_authserververificationmessage()->::AuthServerVerificationMessage::MergeFrom(from.authserververificationmessage());
    }
    if (from.has_initackmessage()) {
      mutable_initackmessage()->::InitAckMessage::MergeFrom(from.initackmessage());
    }
    if (from.has_avatarrequestmessage()) {
      mutable_avatarrequestmessage()->::AvatarRequestMessage::MergeFrom(from.avatarrequestmessage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_avatarheadermessage()) {
      mutable_avatarheadermessage()->::AvatarHeaderMessage::MergeFrom(from.avatarheadermessage());
    }
    if (from.has_avatardatamessage()) {
      mutable_avatardatamessage()->::AvatarDataMessage::MergeFrom(from.avatardatamessage());
    }
    if (from.has_avatarendmessage()) {
      mutable_avatarendmessage()->::AvatarEndMessage::MergeFrom(from.avatarendmessage());
    }
    if (from.has_unknownavatarmessage()) {
      mutable_unknownavatarmessage()->::UnknownAvatarMessage::MergeFrom(from.unknownavatarmessage());
    }
    if (from.has_playerlistmessage()) {
      mutable_playerlistmessage()->::PlayerListMessage::MergeFrom(from.playerlistmessage());
    }
    if (from.has_gamelistnewmessage()) {
      mutable_gamelistnewmessage()->::GameListNewMessage::MergeFrom(from.gamelistnewmessage());
    }
    if (from.has_gamelistupdatemessage()) {
      mutable_gamelistupdatemessage()->::GameListUpdateMessage::MergeFrom(from.gamelistupdatemessage());
    }
    if (from.has_gamelistplayerjoinedmessage()) {
      mutable_gamelistplayerjoinedmessage()->::GameListPlayerJoinedMessage::MergeFrom(from.gamelistplayerjoinedmessage());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_gamelistplayerleftmessage()) {
      mutable_gamelistplayerleftmessage()->::GameListPlayerLeftMessage::MergeFrom(from.gamelistplayerleftmessage());
    }
    if (from.has_gamelistadminchangedmessage()) {
      mutable_gamelistadminchangedmessage()->::GameListAdminChangedMessage::MergeFrom(from.gamelistadminchangedmessage());
    }
    if (from.has_playerinforequestmessage()) {
      mutable_playerinforequestmessage()->::PlayerInfoRequestMessage::MergeFrom(from.playerinforequestmessage());
    }
    if (from.has_playerinforeplymessage()) {
      mutable_playerinforeplymessage()->::PlayerInfoReplyMessage::MergeFrom(from.playerinforeplymessage());
    }
    if (from.has_subscriptionrequestmessage()) {
      mutable_subscriptionrequestmessage()->::SubscriptionRequestMessage::MergeFrom(from.subscriptionrequestmessage());
    }
    if (from.has_joinexistinggamemessage()) {
      mutable_joinexistinggamemessage()->::JoinExistingGameMessage::MergeFrom(from.joinexistinggamemessage());
    }
    if (from.has_joinnewgamemessage()) {
      mutable_joinnewgamemessage()->::JoinNewGameMessage::MergeFrom(from.joinnewgamemessage());
    }
    if (from.has_rejoinexistinggamemessage()) {
      mutable_rejoinexistinggamemessage()->::RejoinExistingGameMessage::MergeFrom(from.rejoinexistinggamemessage());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_joingameackmessage()) {
      mutable_joingameackmessage()->::JoinGameAckMessage::MergeFrom(from.joingameackmessage());
    }
    if (from.has_joingamefailedmessage()) {
      mutable_joingamefailedmessage()->::JoinGameFailedMessage::MergeFrom(from.joingamefailedmessage());
    }
    if (from.has_gameplayerjoinedmessage()) {
      mutable_gameplayerjoinedmessage()->::GamePlayerJoinedMessage::MergeFrom(from.gameplayerjoinedmessage());
    }
    if (from.has_gameplayerleftmessage()) {
      mutable_gameplayerleftmessage()->::GamePlayerLeftMessage::MergeFrom(from.gameplayerleftmessage());
    }
    if (from.has_gameadminchangedmessage()) {
      mutable_gameadminchangedmessage()->::GameAdminChangedMessage::MergeFrom(from.gameadminchangedmessage());
    }
    if (from.has_removedfromgamemessage()) {
      mutable_removedfromgamemessage()->::RemovedFromGameMessage::MergeFrom(from.removedfromgamemessage());
    }
    if (from.has_kickplayerrequestmessage()) {
      mutable_kickplayerrequestmessage()->::KickPlayerRequestMessage::MergeFrom(from.kickplayerrequestmessage());
    }
    if (from.has_leavegamerequestmessage()) {
      mutable_leavegamerequestmessage()->::LeaveGameRequestMessage::MergeFrom(from.leavegamerequestmessage());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_inviteplayertogamemessage()) {
      mutable_inviteplayertogamemessage()->::InvitePlayerToGameMessage::MergeFrom(from.inviteplayertogamemessage());
    }
    if (from.has_invitenotifymessage()) {
      mutable_invitenotifymessage()->::InviteNotifyMessage::MergeFrom(from.invitenotifymessage());
    }
    if (from.has_rejectgameinvitationmessage()) {
      mutable_rejectgameinvitationmessage()->::RejectGameInvitationMessage::MergeFrom(from.rejectgameinvitationmessage());
    }
    if (from.has_rejectinvnotifymessage()) {
      mutable_rejectinvnotifymessage()->::RejectInvNotifyMessage::MergeFrom(from.rejectinvnotifymessage());
    }
    if (from.has_starteventmessage()) {
      mutable_starteventmessage()->::StartEventMessage::MergeFrom(from.starteventmessage());
    }
    if (from.has_starteventackmessage()) {
      mutable_starteventackmessage()->::StartEventAckMessage::MergeFrom(from.starteventackmessage());
    }
    if (from.has_gamestartinitialmessage()) {
      mutable_gamestartinitialmessage()->::GameStartInitialMessage::MergeFrom(from.gamestartinitialmessage());
    }
    if (from.has_gamestartrejoinmessage()) {
      mutable_gamestartrejoinmessage()->::GameStartRejoinMessage::MergeFrom(from.gamestartrejoinmessage());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_handstartmessage()) {
      mutable_handstartmessage()->::HandStartMessage::MergeFrom(from.handstartmessage());
    }
    if (from.has_playersturnmessage()) {
      mutable_playersturnmessage()->::PlayersTurnMessage::MergeFrom(from.playersturnmessage());
    }
    if (from.has_myactionrequestmessage()) {
      mutable_myactionrequestmessage()->::MyActionRequestMessage::MergeFrom(from.myactionrequestmessage());
    }
    if (from.has_youractionrejectedmessage()) {
      mutable_youractionrejectedmessage()->::YourActionRejectedMessage::MergeFrom(from.youractionrejectedmessage());
    }
    if (from.has_playersactiondonemessage()) {
      mutable_playersactiondonemessage()->::PlayersActionDoneMessage::MergeFrom(from.playersactiondonemessage());
    }
    if (from.has_dealflopcardsmessage()) {
      mutable_dealflopcardsmessage()->::DealFlopCardsMessage::MergeFrom(from.dealflopcardsmessage());
    }
    if (from.has_dealturncardmessage()) {
      mutable_dealturncardmessage()->::DealTurnCardMessage::MergeFrom(from.dealturncardmessage());
    }
    if (from.has_dealrivercardmessage()) {
      mutable_dealrivercardmessage()->::DealRiverCardMessage::MergeFrom(from.dealrivercardmessage());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_allinshowcardsmessage()) {
      mutable_allinshowcardsmessage()->::AllInShowCardsMessage::MergeFrom(from.allinshowcardsmessage());
    }
    if (from.has_endofhandshowcardsmessage()) {
      mutable_endofhandshowcardsmessage()->::EndOfHandShowCardsMessage::MergeFrom(from.endofhandshowcardsmessage());
    }
    if (from.has_endofhandhidecardsmessage()) {
      mutable_endofhandhidecardsmessage()->::EndOfHandHideCardsMessage::MergeFrom(from.endofhandhidecardsmessage());
    }
    if (from.has_showmycardsrequestmessage()) {
      mutable_showmycardsrequestmessage()->::ShowMyCardsRequestMessage::MergeFrom(from.showmycardsrequestmessage());
    }
    if (from.has_afterhandshowcardsmessage()) {
      mutable_afterhandshowcardsmessage()->::AfterHandShowCardsMessage::MergeFrom(from.afterhandshowcardsmessage());
    }
    if (from.has_endofgamemessage()) {
      mutable_endofgamemessage()->::EndOfGameMessage::MergeFrom(from.endofgamemessage());
    }
    if (from.has_playeridchangedmessage()) {
      mutable_playeridchangedmessage()->::PlayerIdChangedMessage::MergeFrom(from.playeridchangedmessage());
    }
    if (from.has_askkickplayermessage()) {
      mutable_askkickplayermessage()->::AskKickPlayerMessage::MergeFrom(from.askkickplayermessage());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_askkickdeniedmessage()) {
      mutable_askkickdeniedmessage()->::AskKickDeniedMessage::MergeFrom(from.askkickdeniedmessage());
    }
    if (from.has_startkickpetitionmessage()) {
      mutable_startkickpetitionmessage()->::StartKickPetitionMessage::MergeFrom(from.startkickpetitionmessage());
    }
    if (from.has_votekickrequestmessage()) {
      mutable_votekickrequestmessage()->::VoteKickRequestMessage::MergeFrom(from.votekickrequestmessage());
    }
    if (from.has_votekickreplymessage()) {
      mutable_votekickreplymessage()->::VoteKickReplyMessage::MergeFrom(from.votekickreplymessage());
    }
    if (from.has_kickpetitionupdatemessage()) {
      mutable_kickpetitionupdatemessage()->::KickPetitionUpdateMessage::MergeFrom(from.kickpetitionupdatemessage());
    }
    if (from.has_endkickpetitionmessage()) {
      mutable_endkickpetitionmessage()->::EndKickPetitionMessage::MergeFrom(from.endkickpetitionmessage());
    }
    if (from.has_statisticsmessage()) {
      mutable_statisticsmessage()->::StatisticsMessage::MergeFrom(from.statisticsmessage());
    }
    if (from.has_chatrequestmessage()) {
      mutable_chatrequestmessage()->::ChatRequestMessage::MergeFrom(from.chatrequestmessage());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_chatmessage()) {
      mutable_chatmessage()->::ChatMessage::MergeFrom(from.chatmessage());
    }
    if (from.has_chatrejectmessage()) {
      mutable_chatrejectmessage()->::ChatRejectMessage::MergeFrom(from.chatrejectmessage());
    }
    if (from.has_dialogmessage()) {
      mutable_dialogmessage()->::DialogMessage::MergeFrom(from.dialogmessage());
    }
    if (from.has_timeoutwarningmessage()) {
      mutable_timeoutwarningmessage()->::TimeoutWarningMessage::MergeFrom(from.timeoutwarningmessage());
    }
    if (from.has_resettimeoutmessage()) {
      mutable_resettimeoutmessage()->::ResetTimeoutMessage::MergeFrom(from.resettimeoutmessage());
    }
    if (from.has_reportavatarmessage()) {
      mutable_reportavatarmessage()->::ReportAvatarMessage::MergeFrom(from.reportavatarmessage());
    }
    if (from.has_reportavatarackmessage()) {
      mutable_reportavatarackmessage()->::ReportAvatarAckMessage::MergeFrom(from.reportavatarackmessage());
    }
    if (from.has_reportgamemessage()) {
      mutable_reportgamemessage()->::ReportGameMessage::MergeFrom(from.reportgamemessage());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_reportgameackmessage()) {
      mutable_reportgameackmessage()->::ReportGameAckMessage::MergeFrom(from.reportgameackmessage());
    }
    if (from.has_errormessage()) {
      mutable_errormessage()->::ErrorMessage::MergeFrom(from.errormessage());
    }
    if (from.has_adminremovegamemessage()) {
      mutable_adminremovegamemessage()->::AdminRemoveGameMessage::MergeFrom(from.adminremovegamemessage());
    }
    if (from.has_adminremovegameackmessage()) {
      mutable_adminremovegameackmessage()->::AdminRemoveGameAckMessage::MergeFrom(from.adminremovegameackmessage());
    }
    if (from.has_adminbanplayermessage()) {
      mutable_adminbanplayermessage()->::AdminBanPlayerMessage::MergeFrom(from.adminbanplayermessage());
    }
    if (from.has_adminbanplayerackmessage()) {
      mutable_adminbanplayerackmessage()->::AdminBanPlayerAckMessage::MergeFrom(from.adminbanplayerackmessage());
    }
    if (from.has_gamelistspectatorjoinedmessage()) {
      mutable_gamelistspectatorjoinedmessage()->::GameListSpectatorJoinedMessage::MergeFrom(from.gamelistspectatorjoinedmessage());
    }
    if (from.has_gamelistspectatorleftmessage()) {
      mutable_gamelistspectatorleftmessage()->::GameListSpectatorLeftMessage::MergeFrom(from.gamelistspectatorleftmessage());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_gamespectatorjoinedmessage()) {
      mutable_gamespectatorjoinedmessage()->::GameSpectatorJoinedMessage::MergeFrom(from.gamespectatorjoinedmessage());
    }
    if (from.has_gamespectatorleftmessage()) {
      mutable_gamespectatorleftmessage()->::GameSpectatorLeftMessage::MergeFrom(from.gamespectatorleftmessage());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PokerTHMessage::CopyFrom(const PokerTHMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PokerTHMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerTHMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_announcemessage()) {
    if (!this->announcemessage_->IsInitialized()) return false;
  }
  if (has_initmessage()) {
    if (!this->initmessage_->IsInitialized()) return false;
  }
  if (has_authserverchallengemessage()) {
    if (!this->authserverchallengemessage_->IsInitialized()) return false;
  }
  if (has_authclientresponsemessage()) {
    if (!this->authclientresponsemessage_->IsInitialized()) return false;
  }
  if (has_authserververificationmessage()) {
    if (!this->authserververificationmessage_->IsInitialized()) return false;
  }
  if (has_initackmessage()) {
    if (!this->initackmessage_->IsInitialized()) return false;
  }
  if (has_avatarrequestmessage()) {
    if (!this->avatarrequestmessage_->IsInitialized()) return false;
  }
  if (has_avatarheadermessage()) {
    if (!this->avatarheadermessage_->IsInitialized()) return false;
  }
  if (has_avatardatamessage()) {
    if (!this->avatardatamessage_->IsInitialized()) return false;
  }
  if (has_avatarendmessage()) {
    if (!this->avatarendmessage_->IsInitialized()) return false;
  }
  if (has_unknownavatarmessage()) {
    if (!this->unknownavatarmessage_->IsInitialized()) return false;
  }
  if (has_playerlistmessage()) {
    if (!this->playerlistmessage_->IsInitialized()) return false;
  }
  if (has_gamelistnewmessage()) {
    if (!this->gamelistnewmessage_->IsInitialized()) return false;
  }
  if (has_gamelistupdatemessage()) {
    if (!this->gamelistupdatemessage_->IsInitialized()) return false;
  }
  if (has_gamelistplayerjoinedmessage()) {
    if (!this->gamelistplayerjoinedmessage_->IsInitialized()) return false;
  }
  if (has_gamelistplayerleftmessage()) {
    if (!this->gamelistplayerleftmessage_->IsInitialized()) return false;
  }
  if (has_gamelistadminchangedmessage()) {
    if (!this->gamelistadminchangedmessage_->IsInitialized()) return false;
  }
  if (has_playerinforeplymessage()) {
    if (!this->playerinforeplymessage_->IsInitialized()) return false;
  }
  if (has_subscriptionrequestmessage()) {
    if (!this->subscriptionrequestmessage_->IsInitialized()) return false;
  }
  if (has_joinexistinggamemessage()) {
    if (!this->joinexistinggamemessage_->IsInitialized()) return false;
  }
  if (has_joinnewgamemessage()) {
    if (!this->joinnewgamemessage_->IsInitialized()) return false;
  }
  if (has_rejoinexistinggamemessage()) {
    if (!this->rejoinexistinggamemessage_->IsInitialized()) return false;
  }
  if (has_joingameackmessage()) {
    if (!this->joingameackmessage_->IsInitialized()) return false;
  }
  if (has_joingamefailedmessage()) {
    if (!this->joingamefailedmessage_->IsInitialized()) return false;
  }
  if (has_gameplayerjoinedmessage()) {
    if (!this->gameplayerjoinedmessage_->IsInitialized()) return false;
  }
  if (has_gameplayerleftmessage()) {
    if (!this->gameplayerleftmessage_->IsInitialized()) return false;
  }
  if (has_gameadminchangedmessage()) {
    if (!this->gameadminchangedmessage_->IsInitialized()) return false;
  }
  if (has_removedfromgamemessage()) {
    if (!this->removedfromgamemessage_->IsInitialized()) return false;
  }
  if (has_kickplayerrequestmessage()) {
    if (!this->kickplayerrequestmessage_->IsInitialized()) return false;
  }
  if (has_leavegamerequestmessage()) {
    if (!this->leavegamerequestmessage_->IsInitialized()) return false;
  }
  if (has_inviteplayertogamemessage()) {
    if (!this->inviteplayertogamemessage_->IsInitialized()) return false;
  }
  if (has_invitenotifymessage()) {
    if (!this->invitenotifymessage_->IsInitialized()) return false;
  }
  if (has_rejectgameinvitationmessage()) {
    if (!this->rejectgameinvitationmessage_->IsInitialized()) return false;
  }
  if (has_rejectinvnotifymessage()) {
    if (!this->rejectinvnotifymessage_->IsInitialized()) return false;
  }
  if (has_starteventmessage()) {
    if (!this->starteventmessage_->IsInitialized()) return false;
  }
  if (has_starteventackmessage()) {
    if (!this->starteventackmessage_->IsInitialized()) return false;
  }
  if (has_gamestartinitialmessage()) {
    if (!this->gamestartinitialmessage_->IsInitialized()) return false;
  }
  if (has_gamestartrejoinmessage()) {
    if (!this->gamestartrejoinmessage_->IsInitialized()) return false;
  }
  if (has_handstartmessage()) {
    if (!this->handstartmessage_->IsInitialized()) return false;
  }
  if (has_playersturnmessage()) {
    if (!this->playersturnmessage_->IsInitialized()) return false;
  }
  if (has_myactionrequestmessage()) {
    if (!this->myactionrequestmessage_->IsInitialized()) return false;
  }
  if (has_youractionrejectedmessage()) {
    if (!this->youractionrejectedmessage_->IsInitialized()) return false;
  }
  if (has_playersactiondonemessage()) {
    if (!this->playersactiondonemessage_->IsInitialized()) return false;
  }
  if (has_dealflopcardsmessage()) {
    if (!this->dealflopcardsmessage_->IsInitialized()) return false;
  }
  if (has_dealturncardmessage()) {
    if (!this->dealturncardmessage_->IsInitialized()) return false;
  }
  if (has_dealrivercardmessage()) {
    if (!this->dealrivercardmessage_->IsInitialized()) return false;
  }
  if (has_allinshowcardsmessage()) {
    if (!this->allinshowcardsmessage_->IsInitialized()) return false;
  }
  if (has_endofhandshowcardsmessage()) {
    if (!this->endofhandshowcardsmessage_->IsInitialized()) return false;
  }
  if (has_endofhandhidecardsmessage()) {
    if (!this->endofhandhidecardsmessage_->IsInitialized()) return false;
  }
  if (has_afterhandshowcardsmessage()) {
    if (!this->afterhandshowcardsmessage_->IsInitialized()) return false;
  }
  if (has_endofgamemessage()) {
    if (!this->endofgamemessage_->IsInitialized()) return false;
  }
  if (has_playeridchangedmessage()) {
    if (!this->playeridchangedmessage_->IsInitialized()) return false;
  }
  if (has_askkickplayermessage()) {
    if (!this->askkickplayermessage_->IsInitialized()) return false;
  }
  if (has_askkickdeniedmessage()) {
    if (!this->askkickdeniedmessage_->IsInitialized()) return false;
  }
  if (has_startkickpetitionmessage()) {
    if (!this->startkickpetitionmessage_->IsInitialized()) return false;
  }
  if (has_votekickrequestmessage()) {
    if (!this->votekickrequestmessage_->IsInitialized()) return false;
  }
  if (has_votekickreplymessage()) {
    if (!this->votekickreplymessage_->IsInitialized()) return false;
  }
  if (has_kickpetitionupdatemessage()) {
    if (!this->kickpetitionupdatemessage_->IsInitialized()) return false;
  }
  if (has_endkickpetitionmessage()) {
    if (!this->endkickpetitionmessage_->IsInitialized()) return false;
  }
  if (has_statisticsmessage()) {
    if (!this->statisticsmessage_->IsInitialized()) return false;
  }
  if (has_chatrequestmessage()) {
    if (!this->chatrequestmessage_->IsInitialized()) return false;
  }
  if (has_chatmessage()) {
    if (!this->chatmessage_->IsInitialized()) return false;
  }
  if (has_chatrejectmessage()) {
    if (!this->chatrejectmessage_->IsInitialized()) return false;
  }
  if (has_dialogmessage()) {
    if (!this->dialogmessage_->IsInitialized()) return false;
  }
  if (has_timeoutwarningmessage()) {
    if (!this->timeoutwarningmessage_->IsInitialized()) return false;
  }
  if (has_reportavatarmessage()) {
    if (!this->reportavatarmessage_->IsInitialized()) return false;
  }
  if (has_reportavatarackmessage()) {
    if (!this->reportavatarackmessage_->IsInitialized()) return false;
  }
  if (has_reportgamemessage()) {
    if (!this->reportgamemessage_->IsInitialized()) return false;
  }
  if (has_reportgameackmessage()) {
    if (!this->reportgameackmessage_->IsInitialized()) return false;
  }
  if (has_errormessage()) {
    if (!this->errormessage_->IsInitialized()) return false;
  }
  if (has_adminremovegamemessage()) {
    if (!this->adminremovegamemessage_->IsInitialized()) return false;
  }
  if (has_adminremovegameackmessage()) {
    if (!this->adminremovegameackmessage_->IsInitialized()) return false;
  }
  if (has_adminbanplayermessage()) {
    if (!this->adminbanplayermessage_->IsInitialized()) return false;
  }
  if (has_adminbanplayerackmessage()) {
    if (!this->adminbanplayerackmessage_->IsInitialized()) return false;
  }
  if (has_gamelistspectatorjoinedmessage()) {
    if (!this->gamelistspectatorjoinedmessage_->IsInitialized()) return false;
  }
  if (has_gamelistspectatorleftmessage()) {
    if (!this->gamelistspectatorleftmessage_->IsInitialized()) return false;
  }
  if (has_gamespectatorjoinedmessage()) {
    if (!this->gamespectatorjoinedmessage_->IsInitialized()) return false;
  }
  if (has_gamespectatorleftmessage()) {
    if (!this->gamespectatorleftmessage_->IsInitialized()) return false;
  }
  return true;
}

void PokerTHMessage::Swap(PokerTHMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PokerTHMessage::InternalSwap(PokerTHMessage* other) {
  std::swap(messagetype_, other->messagetype_);
  std::swap(announcemessage_, other->announcemessage_);
  std::swap(initmessage_, other->initmessage_);
  std::swap(authserverchallengemessage_, other->authserverchallengemessage_);
  std::swap(authclientresponsemessage_, other->authclientresponsemessage_);
  std::swap(authserververificationmessage_, other->authserververificationmessage_);
  std::swap(initackmessage_, other->initackmessage_);
  std::swap(avatarrequestmessage_, other->avatarrequestmessage_);
  std::swap(avatarheadermessage_, other->avatarheadermessage_);
  std::swap(avatardatamessage_, other->avatardatamessage_);
  std::swap(avatarendmessage_, other->avatarendmessage_);
  std::swap(unknownavatarmessage_, other->unknownavatarmessage_);
  std::swap(playerlistmessage_, other->playerlistmessage_);
  std::swap(gamelistnewmessage_, other->gamelistnewmessage_);
  std::swap(gamelistupdatemessage_, other->gamelistupdatemessage_);
  std::swap(gamelistplayerjoinedmessage_, other->gamelistplayerjoinedmessage_);
  std::swap(gamelistplayerleftmessage_, other->gamelistplayerleftmessage_);
  std::swap(gamelistadminchangedmessage_, other->gamelistadminchangedmessage_);
  std::swap(playerinforequestmessage_, other->playerinforequestmessage_);
  std::swap(playerinforeplymessage_, other->playerinforeplymessage_);
  std::swap(subscriptionrequestmessage_, other->subscriptionrequestmessage_);
  std::swap(joinexistinggamemessage_, other->joinexistinggamemessage_);
  std::swap(joinnewgamemessage_, other->joinnewgamemessage_);
  std::swap(rejoinexistinggamemessage_, other->rejoinexistinggamemessage_);
  std::swap(joingameackmessage_, other->joingameackmessage_);
  std::swap(joingamefailedmessage_, other->joingamefailedmessage_);
  std::swap(gameplayerjoinedmessage_, other->gameplayerjoinedmessage_);
  std::swap(gameplayerleftmessage_, other->gameplayerleftmessage_);
  std::swap(gameadminchangedmessage_, other->gameadminchangedmessage_);
  std::swap(removedfromgamemessage_, other->removedfromgamemessage_);
  std::swap(kickplayerrequestmessage_, other->kickplayerrequestmessage_);
  std::swap(leavegamerequestmessage_, other->leavegamerequestmessage_);
  std::swap(inviteplayertogamemessage_, other->inviteplayertogamemessage_);
  std::swap(invitenotifymessage_, other->invitenotifymessage_);
  std::swap(rejectgameinvitationmessage_, other->rejectgameinvitationmessage_);
  std::swap(rejectinvnotifymessage_, other->rejectinvnotifymessage_);
  std::swap(starteventmessage_, other->starteventmessage_);
  std::swap(starteventackmessage_, other->starteventackmessage_);
  std::swap(gamestartinitialmessage_, other->gamestartinitialmessage_);
  std::swap(gamestartrejoinmessage_, other->gamestartrejoinmessage_);
  std::swap(handstartmessage_, other->handstartmessage_);
  std::swap(playersturnmessage_, other->playersturnmessage_);
  std::swap(myactionrequestmessage_, other->myactionrequestmessage_);
  std::swap(youractionrejectedmessage_, other->youractionrejectedmessage_);
  std::swap(playersactiondonemessage_, other->playersactiondonemessage_);
  std::swap(dealflopcardsmessage_, other->dealflopcardsmessage_);
  std::swap(dealturncardmessage_, other->dealturncardmessage_);
  std::swap(dealrivercardmessage_, other->dealrivercardmessage_);
  std::swap(allinshowcardsmessage_, other->allinshowcardsmessage_);
  std::swap(endofhandshowcardsmessage_, other->endofhandshowcardsmessage_);
  std::swap(endofhandhidecardsmessage_, other->endofhandhidecardsmessage_);
  std::swap(showmycardsrequestmessage_, other->showmycardsrequestmessage_);
  std::swap(afterhandshowcardsmessage_, other->afterhandshowcardsmessage_);
  std::swap(endofgamemessage_, other->endofgamemessage_);
  std::swap(playeridchangedmessage_, other->playeridchangedmessage_);
  std::swap(askkickplayermessage_, other->askkickplayermessage_);
  std::swap(askkickdeniedmessage_, other->askkickdeniedmessage_);
  std::swap(startkickpetitionmessage_, other->startkickpetitionmessage_);
  std::swap(votekickrequestmessage_, other->votekickrequestmessage_);
  std::swap(votekickreplymessage_, other->votekickreplymessage_);
  std::swap(kickpetitionupdatemessage_, other->kickpetitionupdatemessage_);
  std::swap(endkickpetitionmessage_, other->endkickpetitionmessage_);
  std::swap(statisticsmessage_, other->statisticsmessage_);
  std::swap(chatrequestmessage_, other->chatrequestmessage_);
  std::swap(chatmessage_, other->chatmessage_);
  std::swap(chatrejectmessage_, other->chatrejectmessage_);
  std::swap(dialogmessage_, other->dialogmessage_);
  std::swap(timeoutwarningmessage_, other->timeoutwarningmessage_);
  std::swap(resettimeoutmessage_, other->resettimeoutmessage_);
  std::swap(reportavatarmessage_, other->reportavatarmessage_);
  std::swap(reportavatarackmessage_, other->reportavatarackmessage_);
  std::swap(reportgamemessage_, other->reportgamemessage_);
  std::swap(reportgameackmessage_, other->reportgameackmessage_);
  std::swap(errormessage_, other->errormessage_);
  std::swap(adminremovegamemessage_, other->adminremovegamemessage_);
  std::swap(adminremovegameackmessage_, other->adminremovegameackmessage_);
  std::swap(adminbanplayermessage_, other->adminbanplayermessage_);
  std::swap(adminbanplayerackmessage_, other->adminbanplayerackmessage_);
  std::swap(gamelistspectatorjoinedmessage_, other->gamelistspectatorjoinedmessage_);
  std::swap(gamelistspectatorleftmessage_, other->gamelistspectatorleftmessage_);
  std::swap(gamespectatorjoinedmessage_, other->gamespectatorjoinedmessage_);
  std::swap(gamespectatorleftmessage_, other->gamespectatorleftmessage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PokerTHMessage::GetTypeName() const {
  return "PokerTHMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PokerTHMessage

// required .PokerTHMessage.PokerTHMessageType messageType = 1;
bool PokerTHMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PokerTHMessage::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
void PokerTHMessage::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void PokerTHMessage::clear_messagetype() {
  messagetype_ = 1;
  clear_has_messagetype();
}
 ::PokerTHMessage_PokerTHMessageType PokerTHMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.messageType)
  return static_cast< ::PokerTHMessage_PokerTHMessageType >(messagetype_);
}
 void PokerTHMessage::set_messagetype(::PokerTHMessage_PokerTHMessageType value) {
  assert(::PokerTHMessage_PokerTHMessageType_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:PokerTHMessage.messageType)
}

// optional .AnnounceMessage announceMessage = 2;
bool PokerTHMessage::has_announcemessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PokerTHMessage::set_has_announcemessage() {
  _has_bits_[0] |= 0x00000002u;
}
void PokerTHMessage::clear_has_announcemessage() {
  _has_bits_[0] &= ~0x00000002u;
}
void PokerTHMessage::clear_announcemessage() {
  if (announcemessage_ != NULL) announcemessage_->::AnnounceMessage::Clear();
  clear_has_announcemessage();
}
const ::AnnounceMessage& PokerTHMessage::announcemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.announceMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return announcemessage_ != NULL ? *announcemessage_ : *default_instance().announcemessage_;
#else
  return announcemessage_ != NULL ? *announcemessage_ : *default_instance_->announcemessage_;
#endif
}
::AnnounceMessage* PokerTHMessage::mutable_announcemessage() {
  set_has_announcemessage();
  if (announcemessage_ == NULL) {
    announcemessage_ = new ::AnnounceMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.announceMessage)
  return announcemessage_;
}
::AnnounceMessage* PokerTHMessage::release_announcemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.announceMessage)
  clear_has_announcemessage();
  ::AnnounceMessage* temp = announcemessage_;
  announcemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_announcemessage(::AnnounceMessage* announcemessage) {
  delete announcemessage_;
  announcemessage_ = announcemessage;
  if (announcemessage) {
    set_has_announcemessage();
  } else {
    clear_has_announcemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.announceMessage)
}

// optional .InitMessage initMessage = 3;
bool PokerTHMessage::has_initmessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PokerTHMessage::set_has_initmessage() {
  _has_bits_[0] |= 0x00000004u;
}
void PokerTHMessage::clear_has_initmessage() {
  _has_bits_[0] &= ~0x00000004u;
}
void PokerTHMessage::clear_initmessage() {
  if (initmessage_ != NULL) initmessage_->::InitMessage::Clear();
  clear_has_initmessage();
}
const ::InitMessage& PokerTHMessage::initmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.initMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return initmessage_ != NULL ? *initmessage_ : *default_instance().initmessage_;
#else
  return initmessage_ != NULL ? *initmessage_ : *default_instance_->initmessage_;
#endif
}
::InitMessage* PokerTHMessage::mutable_initmessage() {
  set_has_initmessage();
  if (initmessage_ == NULL) {
    initmessage_ = new ::InitMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.initMessage)
  return initmessage_;
}
::InitMessage* PokerTHMessage::release_initmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.initMessage)
  clear_has_initmessage();
  ::InitMessage* temp = initmessage_;
  initmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_initmessage(::InitMessage* initmessage) {
  delete initmessage_;
  initmessage_ = initmessage;
  if (initmessage) {
    set_has_initmessage();
  } else {
    clear_has_initmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.initMessage)
}

// optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
bool PokerTHMessage::has_authserverchallengemessage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PokerTHMessage::set_has_authserverchallengemessage() {
  _has_bits_[0] |= 0x00000008u;
}
void PokerTHMessage::clear_has_authserverchallengemessage() {
  _has_bits_[0] &= ~0x00000008u;
}
void PokerTHMessage::clear_authserverchallengemessage() {
  if (authserverchallengemessage_ != NULL) authserverchallengemessage_->::AuthServerChallengeMessage::Clear();
  clear_has_authserverchallengemessage();
}
const ::AuthServerChallengeMessage& PokerTHMessage::authserverchallengemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.authServerChallengeMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return authserverchallengemessage_ != NULL ? *authserverchallengemessage_ : *default_instance().authserverchallengemessage_;
#else
  return authserverchallengemessage_ != NULL ? *authserverchallengemessage_ : *default_instance_->authserverchallengemessage_;
#endif
}
::AuthServerChallengeMessage* PokerTHMessage::mutable_authserverchallengemessage() {
  set_has_authserverchallengemessage();
  if (authserverchallengemessage_ == NULL) {
    authserverchallengemessage_ = new ::AuthServerChallengeMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.authServerChallengeMessage)
  return authserverchallengemessage_;
}
::AuthServerChallengeMessage* PokerTHMessage::release_authserverchallengemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.authServerChallengeMessage)
  clear_has_authserverchallengemessage();
  ::AuthServerChallengeMessage* temp = authserverchallengemessage_;
  authserverchallengemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_authserverchallengemessage(::AuthServerChallengeMessage* authserverchallengemessage) {
  delete authserverchallengemessage_;
  authserverchallengemessage_ = authserverchallengemessage;
  if (authserverchallengemessage) {
    set_has_authserverchallengemessage();
  } else {
    clear_has_authserverchallengemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.authServerChallengeMessage)
}

// optional .AuthClientResponseMessage authClientResponseMessage = 5;
bool PokerTHMessage::has_authclientresponsemessage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PokerTHMessage::set_has_authclientresponsemessage() {
  _has_bits_[0] |= 0x00000010u;
}
void PokerTHMessage::clear_has_authclientresponsemessage() {
  _has_bits_[0] &= ~0x00000010u;
}
void PokerTHMessage::clear_authclientresponsemessage() {
  if (authclientresponsemessage_ != NULL) authclientresponsemessage_->::AuthClientResponseMessage::Clear();
  clear_has_authclientresponsemessage();
}
const ::AuthClientResponseMessage& PokerTHMessage::authclientresponsemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.authClientResponseMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return authclientresponsemessage_ != NULL ? *authclientresponsemessage_ : *default_instance().authclientresponsemessage_;
#else
  return authclientresponsemessage_ != NULL ? *authclientresponsemessage_ : *default_instance_->authclientresponsemessage_;
#endif
}
::AuthClientResponseMessage* PokerTHMessage::mutable_authclientresponsemessage() {
  set_has_authclientresponsemessage();
  if (authclientresponsemessage_ == NULL) {
    authclientresponsemessage_ = new ::AuthClientResponseMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.authClientResponseMessage)
  return authclientresponsemessage_;
}
::AuthClientResponseMessage* PokerTHMessage::release_authclientresponsemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.authClientResponseMessage)
  clear_has_authclientresponsemessage();
  ::AuthClientResponseMessage* temp = authclientresponsemessage_;
  authclientresponsemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_authclientresponsemessage(::AuthClientResponseMessage* authclientresponsemessage) {
  delete authclientresponsemessage_;
  authclientresponsemessage_ = authclientresponsemessage;
  if (authclientresponsemessage) {
    set_has_authclientresponsemessage();
  } else {
    clear_has_authclientresponsemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.authClientResponseMessage)
}

// optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
bool PokerTHMessage::has_authserververificationmessage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PokerTHMessage::set_has_authserververificationmessage() {
  _has_bits_[0] |= 0x00000020u;
}
void PokerTHMessage::clear_has_authserververificationmessage() {
  _has_bits_[0] &= ~0x00000020u;
}
void PokerTHMessage::clear_authserververificationmessage() {
  if (authserververificationmessage_ != NULL) authserververificationmessage_->::AuthServerVerificationMessage::Clear();
  clear_has_authserververificationmessage();
}
const ::AuthServerVerificationMessage& PokerTHMessage::authserververificationmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.authServerVerificationMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return authserververificationmessage_ != NULL ? *authserververificationmessage_ : *default_instance().authserververificationmessage_;
#else
  return authserververificationmessage_ != NULL ? *authserververificationmessage_ : *default_instance_->authserververificationmessage_;
#endif
}
::AuthServerVerificationMessage* PokerTHMessage::mutable_authserververificationmessage() {
  set_has_authserververificationmessage();
  if (authserververificationmessage_ == NULL) {
    authserververificationmessage_ = new ::AuthServerVerificationMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.authServerVerificationMessage)
  return authserververificationmessage_;
}
::AuthServerVerificationMessage* PokerTHMessage::release_authserververificationmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.authServerVerificationMessage)
  clear_has_authserververificationmessage();
  ::AuthServerVerificationMessage* temp = authserververificationmessage_;
  authserververificationmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_authserververificationmessage(::AuthServerVerificationMessage* authserververificationmessage) {
  delete authserververificationmessage_;
  authserververificationmessage_ = authserververificationmessage;
  if (authserververificationmessage) {
    set_has_authserververificationmessage();
  } else {
    clear_has_authserververificationmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.authServerVerificationMessage)
}

// optional .InitAckMessage initAckMessage = 7;
bool PokerTHMessage::has_initackmessage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PokerTHMessage::set_has_initackmessage() {
  _has_bits_[0] |= 0x00000040u;
}
void PokerTHMessage::clear_has_initackmessage() {
  _has_bits_[0] &= ~0x00000040u;
}
void PokerTHMessage::clear_initackmessage() {
  if (initackmessage_ != NULL) initackmessage_->::InitAckMessage::Clear();
  clear_has_initackmessage();
}
const ::InitAckMessage& PokerTHMessage::initackmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.initAckMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return initackmessage_ != NULL ? *initackmessage_ : *default_instance().initackmessage_;
#else
  return initackmessage_ != NULL ? *initackmessage_ : *default_instance_->initackmessage_;
#endif
}
::InitAckMessage* PokerTHMessage::mutable_initackmessage() {
  set_has_initackmessage();
  if (initackmessage_ == NULL) {
    initackmessage_ = new ::InitAckMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.initAckMessage)
  return initackmessage_;
}
::InitAckMessage* PokerTHMessage::release_initackmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.initAckMessage)
  clear_has_initackmessage();
  ::InitAckMessage* temp = initackmessage_;
  initackmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_initackmessage(::InitAckMessage* initackmessage) {
  delete initackmessage_;
  initackmessage_ = initackmessage;
  if (initackmessage) {
    set_has_initackmessage();
  } else {
    clear_has_initackmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.initAckMessage)
}

// optional .AvatarRequestMessage avatarRequestMessage = 8;
bool PokerTHMessage::has_avatarrequestmessage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PokerTHMessage::set_has_avatarrequestmessage() {
  _has_bits_[0] |= 0x00000080u;
}
void PokerTHMessage::clear_has_avatarrequestmessage() {
  _has_bits_[0] &= ~0x00000080u;
}
void PokerTHMessage::clear_avatarrequestmessage() {
  if (avatarrequestmessage_ != NULL) avatarrequestmessage_->::AvatarRequestMessage::Clear();
  clear_has_avatarrequestmessage();
}
const ::AvatarRequestMessage& PokerTHMessage::avatarrequestmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.avatarRequestMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return avatarrequestmessage_ != NULL ? *avatarrequestmessage_ : *default_instance().avatarrequestmessage_;
#else
  return avatarrequestmessage_ != NULL ? *avatarrequestmessage_ : *default_instance_->avatarrequestmessage_;
#endif
}
::AvatarRequestMessage* PokerTHMessage::mutable_avatarrequestmessage() {
  set_has_avatarrequestmessage();
  if (avatarrequestmessage_ == NULL) {
    avatarrequestmessage_ = new ::AvatarRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.avatarRequestMessage)
  return avatarrequestmessage_;
}
::AvatarRequestMessage* PokerTHMessage::release_avatarrequestmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.avatarRequestMessage)
  clear_has_avatarrequestmessage();
  ::AvatarRequestMessage* temp = avatarrequestmessage_;
  avatarrequestmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_avatarrequestmessage(::AvatarRequestMessage* avatarrequestmessage) {
  delete avatarrequestmessage_;
  avatarrequestmessage_ = avatarrequestmessage;
  if (avatarrequestmessage) {
    set_has_avatarrequestmessage();
  } else {
    clear_has_avatarrequestmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.avatarRequestMessage)
}

// optional .AvatarHeaderMessage avatarHeaderMessage = 9;
bool PokerTHMessage::has_avatarheadermessage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PokerTHMessage::set_has_avatarheadermessage() {
  _has_bits_[0] |= 0x00000100u;
}
void PokerTHMessage::clear_has_avatarheadermessage() {
  _has_bits_[0] &= ~0x00000100u;
}
void PokerTHMessage::clear_avatarheadermessage() {
  if (avatarheadermessage_ != NULL) avatarheadermessage_->::AvatarHeaderMessage::Clear();
  clear_has_avatarheadermessage();
}
const ::AvatarHeaderMessage& PokerTHMessage::avatarheadermessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.avatarHeaderMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return avatarheadermessage_ != NULL ? *avatarheadermessage_ : *default_instance().avatarheadermessage_;
#else
  return avatarheadermessage_ != NULL ? *avatarheadermessage_ : *default_instance_->avatarheadermessage_;
#endif
}
::AvatarHeaderMessage* PokerTHMessage::mutable_avatarheadermessage() {
  set_has_avatarheadermessage();
  if (avatarheadermessage_ == NULL) {
    avatarheadermessage_ = new ::AvatarHeaderMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.avatarHeaderMessage)
  return avatarheadermessage_;
}
::AvatarHeaderMessage* PokerTHMessage::release_avatarheadermessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.avatarHeaderMessage)
  clear_has_avatarheadermessage();
  ::AvatarHeaderMessage* temp = avatarheadermessage_;
  avatarheadermessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_avatarheadermessage(::AvatarHeaderMessage* avatarheadermessage) {
  delete avatarheadermessage_;
  avatarheadermessage_ = avatarheadermessage;
  if (avatarheadermessage) {
    set_has_avatarheadermessage();
  } else {
    clear_has_avatarheadermessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.avatarHeaderMessage)
}

// optional .AvatarDataMessage avatarDataMessage = 10;
bool PokerTHMessage::has_avatardatamessage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PokerTHMessage::set_has_avatardatamessage() {
  _has_bits_[0] |= 0x00000200u;
}
void PokerTHMessage::clear_has_avatardatamessage() {
  _has_bits_[0] &= ~0x00000200u;
}
void PokerTHMessage::clear_avatardatamessage() {
  if (avatardatamessage_ != NULL) avatardatamessage_->::AvatarDataMessage::Clear();
  clear_has_avatardatamessage();
}
const ::AvatarDataMessage& PokerTHMessage::avatardatamessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.avatarDataMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return avatardatamessage_ != NULL ? *avatardatamessage_ : *default_instance().avatardatamessage_;
#else
  return avatardatamessage_ != NULL ? *avatardatamessage_ : *default_instance_->avatardatamessage_;
#endif
}
::AvatarDataMessage* PokerTHMessage::mutable_avatardatamessage() {
  set_has_avatardatamessage();
  if (avatardatamessage_ == NULL) {
    avatardatamessage_ = new ::AvatarDataMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.avatarDataMessage)
  return avatardatamessage_;
}
::AvatarDataMessage* PokerTHMessage::release_avatardatamessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.avatarDataMessage)
  clear_has_avatardatamessage();
  ::AvatarDataMessage* temp = avatardatamessage_;
  avatardatamessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_avatardatamessage(::AvatarDataMessage* avatardatamessage) {
  delete avatardatamessage_;
  avatardatamessage_ = avatardatamessage;
  if (avatardatamessage) {
    set_has_avatardatamessage();
  } else {
    clear_has_avatardatamessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.avatarDataMessage)
}

// optional .AvatarEndMessage avatarEndMessage = 11;
bool PokerTHMessage::has_avatarendmessage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PokerTHMessage::set_has_avatarendmessage() {
  _has_bits_[0] |= 0x00000400u;
}
void PokerTHMessage::clear_has_avatarendmessage() {
  _has_bits_[0] &= ~0x00000400u;
}
void PokerTHMessage::clear_avatarendmessage() {
  if (avatarendmessage_ != NULL) avatarendmessage_->::AvatarEndMessage::Clear();
  clear_has_avatarendmessage();
}
const ::AvatarEndMessage& PokerTHMessage::avatarendmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.avatarEndMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return avatarendmessage_ != NULL ? *avatarendmessage_ : *default_instance().avatarendmessage_;
#else
  return avatarendmessage_ != NULL ? *avatarendmessage_ : *default_instance_->avatarendmessage_;
#endif
}
::AvatarEndMessage* PokerTHMessage::mutable_avatarendmessage() {
  set_has_avatarendmessage();
  if (avatarendmessage_ == NULL) {
    avatarendmessage_ = new ::AvatarEndMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.avatarEndMessage)
  return avatarendmessage_;
}
::AvatarEndMessage* PokerTHMessage::release_avatarendmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.avatarEndMessage)
  clear_has_avatarendmessage();
  ::AvatarEndMessage* temp = avatarendmessage_;
  avatarendmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_avatarendmessage(::AvatarEndMessage* avatarendmessage) {
  delete avatarendmessage_;
  avatarendmessage_ = avatarendmessage;
  if (avatarendmessage) {
    set_has_avatarendmessage();
  } else {
    clear_has_avatarendmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.avatarEndMessage)
}

// optional .UnknownAvatarMessage unknownAvatarMessage = 12;
bool PokerTHMessage::has_unknownavatarmessage() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PokerTHMessage::set_has_unknownavatarmessage() {
  _has_bits_[0] |= 0x00000800u;
}
void PokerTHMessage::clear_has_unknownavatarmessage() {
  _has_bits_[0] &= ~0x00000800u;
}
void PokerTHMessage::clear_unknownavatarmessage() {
  if (unknownavatarmessage_ != NULL) unknownavatarmessage_->::UnknownAvatarMessage::Clear();
  clear_has_unknownavatarmessage();
}
const ::UnknownAvatarMessage& PokerTHMessage::unknownavatarmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.unknownAvatarMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return unknownavatarmessage_ != NULL ? *unknownavatarmessage_ : *default_instance().unknownavatarmessage_;
#else
  return unknownavatarmessage_ != NULL ? *unknownavatarmessage_ : *default_instance_->unknownavatarmessage_;
#endif
}
::UnknownAvatarMessage* PokerTHMessage::mutable_unknownavatarmessage() {
  set_has_unknownavatarmessage();
  if (unknownavatarmessage_ == NULL) {
    unknownavatarmessage_ = new ::UnknownAvatarMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.unknownAvatarMessage)
  return unknownavatarmessage_;
}
::UnknownAvatarMessage* PokerTHMessage::release_unknownavatarmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.unknownAvatarMessage)
  clear_has_unknownavatarmessage();
  ::UnknownAvatarMessage* temp = unknownavatarmessage_;
  unknownavatarmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_unknownavatarmessage(::UnknownAvatarMessage* unknownavatarmessage) {
  delete unknownavatarmessage_;
  unknownavatarmessage_ = unknownavatarmessage;
  if (unknownavatarmessage) {
    set_has_unknownavatarmessage();
  } else {
    clear_has_unknownavatarmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.unknownAvatarMessage)
}

// optional .PlayerListMessage playerListMessage = 13;
bool PokerTHMessage::has_playerlistmessage() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PokerTHMessage::set_has_playerlistmessage() {
  _has_bits_[0] |= 0x00001000u;
}
void PokerTHMessage::clear_has_playerlistmessage() {
  _has_bits_[0] &= ~0x00001000u;
}
void PokerTHMessage::clear_playerlistmessage() {
  if (playerlistmessage_ != NULL) playerlistmessage_->::PlayerListMessage::Clear();
  clear_has_playerlistmessage();
}
const ::PlayerListMessage& PokerTHMessage::playerlistmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.playerListMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerlistmessage_ != NULL ? *playerlistmessage_ : *default_instance().playerlistmessage_;
#else
  return playerlistmessage_ != NULL ? *playerlistmessage_ : *default_instance_->playerlistmessage_;
#endif
}
::PlayerListMessage* PokerTHMessage::mutable_playerlistmessage() {
  set_has_playerlistmessage();
  if (playerlistmessage_ == NULL) {
    playerlistmessage_ = new ::PlayerListMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.playerListMessage)
  return playerlistmessage_;
}
::PlayerListMessage* PokerTHMessage::release_playerlistmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.playerListMessage)
  clear_has_playerlistmessage();
  ::PlayerListMessage* temp = playerlistmessage_;
  playerlistmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_playerlistmessage(::PlayerListMessage* playerlistmessage) {
  delete playerlistmessage_;
  playerlistmessage_ = playerlistmessage;
  if (playerlistmessage) {
    set_has_playerlistmessage();
  } else {
    clear_has_playerlistmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.playerListMessage)
}

// optional .GameListNewMessage gameListNewMessage = 14;
bool PokerTHMessage::has_gamelistnewmessage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PokerTHMessage::set_has_gamelistnewmessage() {
  _has_bits_[0] |= 0x00002000u;
}
void PokerTHMessage::clear_has_gamelistnewmessage() {
  _has_bits_[0] &= ~0x00002000u;
}
void PokerTHMessage::clear_gamelistnewmessage() {
  if (gamelistnewmessage_ != NULL) gamelistnewmessage_->::GameListNewMessage::Clear();
  clear_has_gamelistnewmessage();
}
const ::GameListNewMessage& PokerTHMessage::gamelistnewmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameListNewMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamelistnewmessage_ != NULL ? *gamelistnewmessage_ : *default_instance().gamelistnewmessage_;
#else
  return gamelistnewmessage_ != NULL ? *gamelistnewmessage_ : *default_instance_->gamelistnewmessage_;
#endif
}
::GameListNewMessage* PokerTHMessage::mutable_gamelistnewmessage() {
  set_has_gamelistnewmessage();
  if (gamelistnewmessage_ == NULL) {
    gamelistnewmessage_ = new ::GameListNewMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameListNewMessage)
  return gamelistnewmessage_;
}
::GameListNewMessage* PokerTHMessage::release_gamelistnewmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameListNewMessage)
  clear_has_gamelistnewmessage();
  ::GameListNewMessage* temp = gamelistnewmessage_;
  gamelistnewmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gamelistnewmessage(::GameListNewMessage* gamelistnewmessage) {
  delete gamelistnewmessage_;
  gamelistnewmessage_ = gamelistnewmessage;
  if (gamelistnewmessage) {
    set_has_gamelistnewmessage();
  } else {
    clear_has_gamelistnewmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameListNewMessage)
}

// optional .GameListUpdateMessage gameListUpdateMessage = 15;
bool PokerTHMessage::has_gamelistupdatemessage() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PokerTHMessage::set_has_gamelistupdatemessage() {
  _has_bits_[0] |= 0x00004000u;
}
void PokerTHMessage::clear_has_gamelistupdatemessage() {
  _has_bits_[0] &= ~0x00004000u;
}
void PokerTHMessage::clear_gamelistupdatemessage() {
  if (gamelistupdatemessage_ != NULL) gamelistupdatemessage_->::GameListUpdateMessage::Clear();
  clear_has_gamelistupdatemessage();
}
const ::GameListUpdateMessage& PokerTHMessage::gamelistupdatemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameListUpdateMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamelistupdatemessage_ != NULL ? *gamelistupdatemessage_ : *default_instance().gamelistupdatemessage_;
#else
  return gamelistupdatemessage_ != NULL ? *gamelistupdatemessage_ : *default_instance_->gamelistupdatemessage_;
#endif
}
::GameListUpdateMessage* PokerTHMessage::mutable_gamelistupdatemessage() {
  set_has_gamelistupdatemessage();
  if (gamelistupdatemessage_ == NULL) {
    gamelistupdatemessage_ = new ::GameListUpdateMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameListUpdateMessage)
  return gamelistupdatemessage_;
}
::GameListUpdateMessage* PokerTHMessage::release_gamelistupdatemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameListUpdateMessage)
  clear_has_gamelistupdatemessage();
  ::GameListUpdateMessage* temp = gamelistupdatemessage_;
  gamelistupdatemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gamelistupdatemessage(::GameListUpdateMessage* gamelistupdatemessage) {
  delete gamelistupdatemessage_;
  gamelistupdatemessage_ = gamelistupdatemessage;
  if (gamelistupdatemessage) {
    set_has_gamelistupdatemessage();
  } else {
    clear_has_gamelistupdatemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameListUpdateMessage)
}

// optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
bool PokerTHMessage::has_gamelistplayerjoinedmessage() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PokerTHMessage::set_has_gamelistplayerjoinedmessage() {
  _has_bits_[0] |= 0x00008000u;
}
void PokerTHMessage::clear_has_gamelistplayerjoinedmessage() {
  _has_bits_[0] &= ~0x00008000u;
}
void PokerTHMessage::clear_gamelistplayerjoinedmessage() {
  if (gamelistplayerjoinedmessage_ != NULL) gamelistplayerjoinedmessage_->::GameListPlayerJoinedMessage::Clear();
  clear_has_gamelistplayerjoinedmessage();
}
const ::GameListPlayerJoinedMessage& PokerTHMessage::gamelistplayerjoinedmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameListPlayerJoinedMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamelistplayerjoinedmessage_ != NULL ? *gamelistplayerjoinedmessage_ : *default_instance().gamelistplayerjoinedmessage_;
#else
  return gamelistplayerjoinedmessage_ != NULL ? *gamelistplayerjoinedmessage_ : *default_instance_->gamelistplayerjoinedmessage_;
#endif
}
::GameListPlayerJoinedMessage* PokerTHMessage::mutable_gamelistplayerjoinedmessage() {
  set_has_gamelistplayerjoinedmessage();
  if (gamelistplayerjoinedmessage_ == NULL) {
    gamelistplayerjoinedmessage_ = new ::GameListPlayerJoinedMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameListPlayerJoinedMessage)
  return gamelistplayerjoinedmessage_;
}
::GameListPlayerJoinedMessage* PokerTHMessage::release_gamelistplayerjoinedmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameListPlayerJoinedMessage)
  clear_has_gamelistplayerjoinedmessage();
  ::GameListPlayerJoinedMessage* temp = gamelistplayerjoinedmessage_;
  gamelistplayerjoinedmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gamelistplayerjoinedmessage(::GameListPlayerJoinedMessage* gamelistplayerjoinedmessage) {
  delete gamelistplayerjoinedmessage_;
  gamelistplayerjoinedmessage_ = gamelistplayerjoinedmessage;
  if (gamelistplayerjoinedmessage) {
    set_has_gamelistplayerjoinedmessage();
  } else {
    clear_has_gamelistplayerjoinedmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameListPlayerJoinedMessage)
}

// optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
bool PokerTHMessage::has_gamelistplayerleftmessage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PokerTHMessage::set_has_gamelistplayerleftmessage() {
  _has_bits_[0] |= 0x00010000u;
}
void PokerTHMessage::clear_has_gamelistplayerleftmessage() {
  _has_bits_[0] &= ~0x00010000u;
}
void PokerTHMessage::clear_gamelistplayerleftmessage() {
  if (gamelistplayerleftmessage_ != NULL) gamelistplayerleftmessage_->::GameListPlayerLeftMessage::Clear();
  clear_has_gamelistplayerleftmessage();
}
const ::GameListPlayerLeftMessage& PokerTHMessage::gamelistplayerleftmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameListPlayerLeftMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamelistplayerleftmessage_ != NULL ? *gamelistplayerleftmessage_ : *default_instance().gamelistplayerleftmessage_;
#else
  return gamelistplayerleftmessage_ != NULL ? *gamelistplayerleftmessage_ : *default_instance_->gamelistplayerleftmessage_;
#endif
}
::GameListPlayerLeftMessage* PokerTHMessage::mutable_gamelistplayerleftmessage() {
  set_has_gamelistplayerleftmessage();
  if (gamelistplayerleftmessage_ == NULL) {
    gamelistplayerleftmessage_ = new ::GameListPlayerLeftMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameListPlayerLeftMessage)
  return gamelistplayerleftmessage_;
}
::GameListPlayerLeftMessage* PokerTHMessage::release_gamelistplayerleftmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameListPlayerLeftMessage)
  clear_has_gamelistplayerleftmessage();
  ::GameListPlayerLeftMessage* temp = gamelistplayerleftmessage_;
  gamelistplayerleftmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gamelistplayerleftmessage(::GameListPlayerLeftMessage* gamelistplayerleftmessage) {
  delete gamelistplayerleftmessage_;
  gamelistplayerleftmessage_ = gamelistplayerleftmessage;
  if (gamelistplayerleftmessage) {
    set_has_gamelistplayerleftmessage();
  } else {
    clear_has_gamelistplayerleftmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameListPlayerLeftMessage)
}

// optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
bool PokerTHMessage::has_gamelistadminchangedmessage() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PokerTHMessage::set_has_gamelistadminchangedmessage() {
  _has_bits_[0] |= 0x00020000u;
}
void PokerTHMessage::clear_has_gamelistadminchangedmessage() {
  _has_bits_[0] &= ~0x00020000u;
}
void PokerTHMessage::clear_gamelistadminchangedmessage() {
  if (gamelistadminchangedmessage_ != NULL) gamelistadminchangedmessage_->::GameListAdminChangedMessage::Clear();
  clear_has_gamelistadminchangedmessage();
}
const ::GameListAdminChangedMessage& PokerTHMessage::gamelistadminchangedmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameListAdminChangedMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamelistadminchangedmessage_ != NULL ? *gamelistadminchangedmessage_ : *default_instance().gamelistadminchangedmessage_;
#else
  return gamelistadminchangedmessage_ != NULL ? *gamelistadminchangedmessage_ : *default_instance_->gamelistadminchangedmessage_;
#endif
}
::GameListAdminChangedMessage* PokerTHMessage::mutable_gamelistadminchangedmessage() {
  set_has_gamelistadminchangedmessage();
  if (gamelistadminchangedmessage_ == NULL) {
    gamelistadminchangedmessage_ = new ::GameListAdminChangedMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameListAdminChangedMessage)
  return gamelistadminchangedmessage_;
}
::GameListAdminChangedMessage* PokerTHMessage::release_gamelistadminchangedmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameListAdminChangedMessage)
  clear_has_gamelistadminchangedmessage();
  ::GameListAdminChangedMessage* temp = gamelistadminchangedmessage_;
  gamelistadminchangedmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gamelistadminchangedmessage(::GameListAdminChangedMessage* gamelistadminchangedmessage) {
  delete gamelistadminchangedmessage_;
  gamelistadminchangedmessage_ = gamelistadminchangedmessage;
  if (gamelistadminchangedmessage) {
    set_has_gamelistadminchangedmessage();
  } else {
    clear_has_gamelistadminchangedmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameListAdminChangedMessage)
}

// optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
bool PokerTHMessage::has_playerinforequestmessage() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PokerTHMessage::set_has_playerinforequestmessage() {
  _has_bits_[0] |= 0x00040000u;
}
void PokerTHMessage::clear_has_playerinforequestmessage() {
  _has_bits_[0] &= ~0x00040000u;
}
void PokerTHMessage::clear_playerinforequestmessage() {
  if (playerinforequestmessage_ != NULL) playerinforequestmessage_->::PlayerInfoRequestMessage::Clear();
  clear_has_playerinforequestmessage();
}
const ::PlayerInfoRequestMessage& PokerTHMessage::playerinforequestmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.playerInfoRequestMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerinforequestmessage_ != NULL ? *playerinforequestmessage_ : *default_instance().playerinforequestmessage_;
#else
  return playerinforequestmessage_ != NULL ? *playerinforequestmessage_ : *default_instance_->playerinforequestmessage_;
#endif
}
::PlayerInfoRequestMessage* PokerTHMessage::mutable_playerinforequestmessage() {
  set_has_playerinforequestmessage();
  if (playerinforequestmessage_ == NULL) {
    playerinforequestmessage_ = new ::PlayerInfoRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.playerInfoRequestMessage)
  return playerinforequestmessage_;
}
::PlayerInfoRequestMessage* PokerTHMessage::release_playerinforequestmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.playerInfoRequestMessage)
  clear_has_playerinforequestmessage();
  ::PlayerInfoRequestMessage* temp = playerinforequestmessage_;
  playerinforequestmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_playerinforequestmessage(::PlayerInfoRequestMessage* playerinforequestmessage) {
  delete playerinforequestmessage_;
  playerinforequestmessage_ = playerinforequestmessage;
  if (playerinforequestmessage) {
    set_has_playerinforequestmessage();
  } else {
    clear_has_playerinforequestmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.playerInfoRequestMessage)
}

// optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
bool PokerTHMessage::has_playerinforeplymessage() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PokerTHMessage::set_has_playerinforeplymessage() {
  _has_bits_[0] |= 0x00080000u;
}
void PokerTHMessage::clear_has_playerinforeplymessage() {
  _has_bits_[0] &= ~0x00080000u;
}
void PokerTHMessage::clear_playerinforeplymessage() {
  if (playerinforeplymessage_ != NULL) playerinforeplymessage_->::PlayerInfoReplyMessage::Clear();
  clear_has_playerinforeplymessage();
}
const ::PlayerInfoReplyMessage& PokerTHMessage::playerinforeplymessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.playerInfoReplyMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerinforeplymessage_ != NULL ? *playerinforeplymessage_ : *default_instance().playerinforeplymessage_;
#else
  return playerinforeplymessage_ != NULL ? *playerinforeplymessage_ : *default_instance_->playerinforeplymessage_;
#endif
}
::PlayerInfoReplyMessage* PokerTHMessage::mutable_playerinforeplymessage() {
  set_has_playerinforeplymessage();
  if (playerinforeplymessage_ == NULL) {
    playerinforeplymessage_ = new ::PlayerInfoReplyMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.playerInfoReplyMessage)
  return playerinforeplymessage_;
}
::PlayerInfoReplyMessage* PokerTHMessage::release_playerinforeplymessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.playerInfoReplyMessage)
  clear_has_playerinforeplymessage();
  ::PlayerInfoReplyMessage* temp = playerinforeplymessage_;
  playerinforeplymessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_playerinforeplymessage(::PlayerInfoReplyMessage* playerinforeplymessage) {
  delete playerinforeplymessage_;
  playerinforeplymessage_ = playerinforeplymessage;
  if (playerinforeplymessage) {
    set_has_playerinforeplymessage();
  } else {
    clear_has_playerinforeplymessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.playerInfoReplyMessage)
}

// optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
bool PokerTHMessage::has_subscriptionrequestmessage() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PokerTHMessage::set_has_subscriptionrequestmessage() {
  _has_bits_[0] |= 0x00100000u;
}
void PokerTHMessage::clear_has_subscriptionrequestmessage() {
  _has_bits_[0] &= ~0x00100000u;
}
void PokerTHMessage::clear_subscriptionrequestmessage() {
  if (subscriptionrequestmessage_ != NULL) subscriptionrequestmessage_->::SubscriptionRequestMessage::Clear();
  clear_has_subscriptionrequestmessage();
}
const ::SubscriptionRequestMessage& PokerTHMessage::subscriptionrequestmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.subscriptionRequestMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return subscriptionrequestmessage_ != NULL ? *subscriptionrequestmessage_ : *default_instance().subscriptionrequestmessage_;
#else
  return subscriptionrequestmessage_ != NULL ? *subscriptionrequestmessage_ : *default_instance_->subscriptionrequestmessage_;
#endif
}
::SubscriptionRequestMessage* PokerTHMessage::mutable_subscriptionrequestmessage() {
  set_has_subscriptionrequestmessage();
  if (subscriptionrequestmessage_ == NULL) {
    subscriptionrequestmessage_ = new ::SubscriptionRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.subscriptionRequestMessage)
  return subscriptionrequestmessage_;
}
::SubscriptionRequestMessage* PokerTHMessage::release_subscriptionrequestmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.subscriptionRequestMessage)
  clear_has_subscriptionrequestmessage();
  ::SubscriptionRequestMessage* temp = subscriptionrequestmessage_;
  subscriptionrequestmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_subscriptionrequestmessage(::SubscriptionRequestMessage* subscriptionrequestmessage) {
  delete subscriptionrequestmessage_;
  subscriptionrequestmessage_ = subscriptionrequestmessage;
  if (subscriptionrequestmessage) {
    set_has_subscriptionrequestmessage();
  } else {
    clear_has_subscriptionrequestmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.subscriptionRequestMessage)
}

// optional .JoinExistingGameMessage joinExistingGameMessage = 22;
bool PokerTHMessage::has_joinexistinggamemessage() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PokerTHMessage::set_has_joinexistinggamemessage() {
  _has_bits_[0] |= 0x00200000u;
}
void PokerTHMessage::clear_has_joinexistinggamemessage() {
  _has_bits_[0] &= ~0x00200000u;
}
void PokerTHMessage::clear_joinexistinggamemessage() {
  if (joinexistinggamemessage_ != NULL) joinexistinggamemessage_->::JoinExistingGameMessage::Clear();
  clear_has_joinexistinggamemessage();
}
const ::JoinExistingGameMessage& PokerTHMessage::joinexistinggamemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.joinExistingGameMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return joinexistinggamemessage_ != NULL ? *joinexistinggamemessage_ : *default_instance().joinexistinggamemessage_;
#else
  return joinexistinggamemessage_ != NULL ? *joinexistinggamemessage_ : *default_instance_->joinexistinggamemessage_;
#endif
}
::JoinExistingGameMessage* PokerTHMessage::mutable_joinexistinggamemessage() {
  set_has_joinexistinggamemessage();
  if (joinexistinggamemessage_ == NULL) {
    joinexistinggamemessage_ = new ::JoinExistingGameMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.joinExistingGameMessage)
  return joinexistinggamemessage_;
}
::JoinExistingGameMessage* PokerTHMessage::release_joinexistinggamemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.joinExistingGameMessage)
  clear_has_joinexistinggamemessage();
  ::JoinExistingGameMessage* temp = joinexistinggamemessage_;
  joinexistinggamemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_joinexistinggamemessage(::JoinExistingGameMessage* joinexistinggamemessage) {
  delete joinexistinggamemessage_;
  joinexistinggamemessage_ = joinexistinggamemessage;
  if (joinexistinggamemessage) {
    set_has_joinexistinggamemessage();
  } else {
    clear_has_joinexistinggamemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.joinExistingGameMessage)
}

// optional .JoinNewGameMessage joinNewGameMessage = 23;
bool PokerTHMessage::has_joinnewgamemessage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PokerTHMessage::set_has_joinnewgamemessage() {
  _has_bits_[0] |= 0x00400000u;
}
void PokerTHMessage::clear_has_joinnewgamemessage() {
  _has_bits_[0] &= ~0x00400000u;
}
void PokerTHMessage::clear_joinnewgamemessage() {
  if (joinnewgamemessage_ != NULL) joinnewgamemessage_->::JoinNewGameMessage::Clear();
  clear_has_joinnewgamemessage();
}
const ::JoinNewGameMessage& PokerTHMessage::joinnewgamemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.joinNewGameMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return joinnewgamemessage_ != NULL ? *joinnewgamemessage_ : *default_instance().joinnewgamemessage_;
#else
  return joinnewgamemessage_ != NULL ? *joinnewgamemessage_ : *default_instance_->joinnewgamemessage_;
#endif
}
::JoinNewGameMessage* PokerTHMessage::mutable_joinnewgamemessage() {
  set_has_joinnewgamemessage();
  if (joinnewgamemessage_ == NULL) {
    joinnewgamemessage_ = new ::JoinNewGameMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.joinNewGameMessage)
  return joinnewgamemessage_;
}
::JoinNewGameMessage* PokerTHMessage::release_joinnewgamemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.joinNewGameMessage)
  clear_has_joinnewgamemessage();
  ::JoinNewGameMessage* temp = joinnewgamemessage_;
  joinnewgamemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_joinnewgamemessage(::JoinNewGameMessage* joinnewgamemessage) {
  delete joinnewgamemessage_;
  joinnewgamemessage_ = joinnewgamemessage;
  if (joinnewgamemessage) {
    set_has_joinnewgamemessage();
  } else {
    clear_has_joinnewgamemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.joinNewGameMessage)
}

// optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
bool PokerTHMessage::has_rejoinexistinggamemessage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PokerTHMessage::set_has_rejoinexistinggamemessage() {
  _has_bits_[0] |= 0x00800000u;
}
void PokerTHMessage::clear_has_rejoinexistinggamemessage() {
  _has_bits_[0] &= ~0x00800000u;
}
void PokerTHMessage::clear_rejoinexistinggamemessage() {
  if (rejoinexistinggamemessage_ != NULL) rejoinexistinggamemessage_->::RejoinExistingGameMessage::Clear();
  clear_has_rejoinexistinggamemessage();
}
const ::RejoinExistingGameMessage& PokerTHMessage::rejoinexistinggamemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.rejoinExistingGameMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rejoinexistinggamemessage_ != NULL ? *rejoinexistinggamemessage_ : *default_instance().rejoinexistinggamemessage_;
#else
  return rejoinexistinggamemessage_ != NULL ? *rejoinexistinggamemessage_ : *default_instance_->rejoinexistinggamemessage_;
#endif
}
::RejoinExistingGameMessage* PokerTHMessage::mutable_rejoinexistinggamemessage() {
  set_has_rejoinexistinggamemessage();
  if (rejoinexistinggamemessage_ == NULL) {
    rejoinexistinggamemessage_ = new ::RejoinExistingGameMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.rejoinExistingGameMessage)
  return rejoinexistinggamemessage_;
}
::RejoinExistingGameMessage* PokerTHMessage::release_rejoinexistinggamemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.rejoinExistingGameMessage)
  clear_has_rejoinexistinggamemessage();
  ::RejoinExistingGameMessage* temp = rejoinexistinggamemessage_;
  rejoinexistinggamemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_rejoinexistinggamemessage(::RejoinExistingGameMessage* rejoinexistinggamemessage) {
  delete rejoinexistinggamemessage_;
  rejoinexistinggamemessage_ = rejoinexistinggamemessage;
  if (rejoinexistinggamemessage) {
    set_has_rejoinexistinggamemessage();
  } else {
    clear_has_rejoinexistinggamemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.rejoinExistingGameMessage)
}

// optional .JoinGameAckMessage joinGameAckMessage = 25;
bool PokerTHMessage::has_joingameackmessage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void PokerTHMessage::set_has_joingameackmessage() {
  _has_bits_[0] |= 0x01000000u;
}
void PokerTHMessage::clear_has_joingameackmessage() {
  _has_bits_[0] &= ~0x01000000u;
}
void PokerTHMessage::clear_joingameackmessage() {
  if (joingameackmessage_ != NULL) joingameackmessage_->::JoinGameAckMessage::Clear();
  clear_has_joingameackmessage();
}
const ::JoinGameAckMessage& PokerTHMessage::joingameackmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.joinGameAckMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return joingameackmessage_ != NULL ? *joingameackmessage_ : *default_instance().joingameackmessage_;
#else
  return joingameackmessage_ != NULL ? *joingameackmessage_ : *default_instance_->joingameackmessage_;
#endif
}
::JoinGameAckMessage* PokerTHMessage::mutable_joingameackmessage() {
  set_has_joingameackmessage();
  if (joingameackmessage_ == NULL) {
    joingameackmessage_ = new ::JoinGameAckMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.joinGameAckMessage)
  return joingameackmessage_;
}
::JoinGameAckMessage* PokerTHMessage::release_joingameackmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.joinGameAckMessage)
  clear_has_joingameackmessage();
  ::JoinGameAckMessage* temp = joingameackmessage_;
  joingameackmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_joingameackmessage(::JoinGameAckMessage* joingameackmessage) {
  delete joingameackmessage_;
  joingameackmessage_ = joingameackmessage;
  if (joingameackmessage) {
    set_has_joingameackmessage();
  } else {
    clear_has_joingameackmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.joinGameAckMessage)
}

// optional .JoinGameFailedMessage joinGameFailedMessage = 26;
bool PokerTHMessage::has_joingamefailedmessage() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void PokerTHMessage::set_has_joingamefailedmessage() {
  _has_bits_[0] |= 0x02000000u;
}
void PokerTHMessage::clear_has_joingamefailedmessage() {
  _has_bits_[0] &= ~0x02000000u;
}
void PokerTHMessage::clear_joingamefailedmessage() {
  if (joingamefailedmessage_ != NULL) joingamefailedmessage_->::JoinGameFailedMessage::Clear();
  clear_has_joingamefailedmessage();
}
const ::JoinGameFailedMessage& PokerTHMessage::joingamefailedmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.joinGameFailedMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return joingamefailedmessage_ != NULL ? *joingamefailedmessage_ : *default_instance().joingamefailedmessage_;
#else
  return joingamefailedmessage_ != NULL ? *joingamefailedmessage_ : *default_instance_->joingamefailedmessage_;
#endif
}
::JoinGameFailedMessage* PokerTHMessage::mutable_joingamefailedmessage() {
  set_has_joingamefailedmessage();
  if (joingamefailedmessage_ == NULL) {
    joingamefailedmessage_ = new ::JoinGameFailedMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.joinGameFailedMessage)
  return joingamefailedmessage_;
}
::JoinGameFailedMessage* PokerTHMessage::release_joingamefailedmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.joinGameFailedMessage)
  clear_has_joingamefailedmessage();
  ::JoinGameFailedMessage* temp = joingamefailedmessage_;
  joingamefailedmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_joingamefailedmessage(::JoinGameFailedMessage* joingamefailedmessage) {
  delete joingamefailedmessage_;
  joingamefailedmessage_ = joingamefailedmessage;
  if (joingamefailedmessage) {
    set_has_joingamefailedmessage();
  } else {
    clear_has_joingamefailedmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.joinGameFailedMessage)
}

// optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
bool PokerTHMessage::has_gameplayerjoinedmessage() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void PokerTHMessage::set_has_gameplayerjoinedmessage() {
  _has_bits_[0] |= 0x04000000u;
}
void PokerTHMessage::clear_has_gameplayerjoinedmessage() {
  _has_bits_[0] &= ~0x04000000u;
}
void PokerTHMessage::clear_gameplayerjoinedmessage() {
  if (gameplayerjoinedmessage_ != NULL) gameplayerjoinedmessage_->::GamePlayerJoinedMessage::Clear();
  clear_has_gameplayerjoinedmessage();
}
const ::GamePlayerJoinedMessage& PokerTHMessage::gameplayerjoinedmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gamePlayerJoinedMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gameplayerjoinedmessage_ != NULL ? *gameplayerjoinedmessage_ : *default_instance().gameplayerjoinedmessage_;
#else
  return gameplayerjoinedmessage_ != NULL ? *gameplayerjoinedmessage_ : *default_instance_->gameplayerjoinedmessage_;
#endif
}
::GamePlayerJoinedMessage* PokerTHMessage::mutable_gameplayerjoinedmessage() {
  set_has_gameplayerjoinedmessage();
  if (gameplayerjoinedmessage_ == NULL) {
    gameplayerjoinedmessage_ = new ::GamePlayerJoinedMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gamePlayerJoinedMessage)
  return gameplayerjoinedmessage_;
}
::GamePlayerJoinedMessage* PokerTHMessage::release_gameplayerjoinedmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gamePlayerJoinedMessage)
  clear_has_gameplayerjoinedmessage();
  ::GamePlayerJoinedMessage* temp = gameplayerjoinedmessage_;
  gameplayerjoinedmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gameplayerjoinedmessage(::GamePlayerJoinedMessage* gameplayerjoinedmessage) {
  delete gameplayerjoinedmessage_;
  gameplayerjoinedmessage_ = gameplayerjoinedmessage;
  if (gameplayerjoinedmessage) {
    set_has_gameplayerjoinedmessage();
  } else {
    clear_has_gameplayerjoinedmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gamePlayerJoinedMessage)
}

// optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
bool PokerTHMessage::has_gameplayerleftmessage() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void PokerTHMessage::set_has_gameplayerleftmessage() {
  _has_bits_[0] |= 0x08000000u;
}
void PokerTHMessage::clear_has_gameplayerleftmessage() {
  _has_bits_[0] &= ~0x08000000u;
}
void PokerTHMessage::clear_gameplayerleftmessage() {
  if (gameplayerleftmessage_ != NULL) gameplayerleftmessage_->::GamePlayerLeftMessage::Clear();
  clear_has_gameplayerleftmessage();
}
const ::GamePlayerLeftMessage& PokerTHMessage::gameplayerleftmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gamePlayerLeftMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gameplayerleftmessage_ != NULL ? *gameplayerleftmessage_ : *default_instance().gameplayerleftmessage_;
#else
  return gameplayerleftmessage_ != NULL ? *gameplayerleftmessage_ : *default_instance_->gameplayerleftmessage_;
#endif
}
::GamePlayerLeftMessage* PokerTHMessage::mutable_gameplayerleftmessage() {
  set_has_gameplayerleftmessage();
  if (gameplayerleftmessage_ == NULL) {
    gameplayerleftmessage_ = new ::GamePlayerLeftMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gamePlayerLeftMessage)
  return gameplayerleftmessage_;
}
::GamePlayerLeftMessage* PokerTHMessage::release_gameplayerleftmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gamePlayerLeftMessage)
  clear_has_gameplayerleftmessage();
  ::GamePlayerLeftMessage* temp = gameplayerleftmessage_;
  gameplayerleftmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gameplayerleftmessage(::GamePlayerLeftMessage* gameplayerleftmessage) {
  delete gameplayerleftmessage_;
  gameplayerleftmessage_ = gameplayerleftmessage;
  if (gameplayerleftmessage) {
    set_has_gameplayerleftmessage();
  } else {
    clear_has_gameplayerleftmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gamePlayerLeftMessage)
}

// optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
bool PokerTHMessage::has_gameadminchangedmessage() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void PokerTHMessage::set_has_gameadminchangedmessage() {
  _has_bits_[0] |= 0x10000000u;
}
void PokerTHMessage::clear_has_gameadminchangedmessage() {
  _has_bits_[0] &= ~0x10000000u;
}
void PokerTHMessage::clear_gameadminchangedmessage() {
  if (gameadminchangedmessage_ != NULL) gameadminchangedmessage_->::GameAdminChangedMessage::Clear();
  clear_has_gameadminchangedmessage();
}
const ::GameAdminChangedMessage& PokerTHMessage::gameadminchangedmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameAdminChangedMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gameadminchangedmessage_ != NULL ? *gameadminchangedmessage_ : *default_instance().gameadminchangedmessage_;
#else
  return gameadminchangedmessage_ != NULL ? *gameadminchangedmessage_ : *default_instance_->gameadminchangedmessage_;
#endif
}
::GameAdminChangedMessage* PokerTHMessage::mutable_gameadminchangedmessage() {
  set_has_gameadminchangedmessage();
  if (gameadminchangedmessage_ == NULL) {
    gameadminchangedmessage_ = new ::GameAdminChangedMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameAdminChangedMessage)
  return gameadminchangedmessage_;
}
::GameAdminChangedMessage* PokerTHMessage::release_gameadminchangedmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameAdminChangedMessage)
  clear_has_gameadminchangedmessage();
  ::GameAdminChangedMessage* temp = gameadminchangedmessage_;
  gameadminchangedmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gameadminchangedmessage(::GameAdminChangedMessage* gameadminchangedmessage) {
  delete gameadminchangedmessage_;
  gameadminchangedmessage_ = gameadminchangedmessage;
  if (gameadminchangedmessage) {
    set_has_gameadminchangedmessage();
  } else {
    clear_has_gameadminchangedmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameAdminChangedMessage)
}

// optional .RemovedFromGameMessage removedFromGameMessage = 30;
bool PokerTHMessage::has_removedfromgamemessage() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void PokerTHMessage::set_has_removedfromgamemessage() {
  _has_bits_[0] |= 0x20000000u;
}
void PokerTHMessage::clear_has_removedfromgamemessage() {
  _has_bits_[0] &= ~0x20000000u;
}
void PokerTHMessage::clear_removedfromgamemessage() {
  if (removedfromgamemessage_ != NULL) removedfromgamemessage_->::RemovedFromGameMessage::Clear();
  clear_has_removedfromgamemessage();
}
const ::RemovedFromGameMessage& PokerTHMessage::removedfromgamemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.removedFromGameMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return removedfromgamemessage_ != NULL ? *removedfromgamemessage_ : *default_instance().removedfromgamemessage_;
#else
  return removedfromgamemessage_ != NULL ? *removedfromgamemessage_ : *default_instance_->removedfromgamemessage_;
#endif
}
::RemovedFromGameMessage* PokerTHMessage::mutable_removedfromgamemessage() {
  set_has_removedfromgamemessage();
  if (removedfromgamemessage_ == NULL) {
    removedfromgamemessage_ = new ::RemovedFromGameMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.removedFromGameMessage)
  return removedfromgamemessage_;
}
::RemovedFromGameMessage* PokerTHMessage::release_removedfromgamemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.removedFromGameMessage)
  clear_has_removedfromgamemessage();
  ::RemovedFromGameMessage* temp = removedfromgamemessage_;
  removedfromgamemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_removedfromgamemessage(::RemovedFromGameMessage* removedfromgamemessage) {
  delete removedfromgamemessage_;
  removedfromgamemessage_ = removedfromgamemessage;
  if (removedfromgamemessage) {
    set_has_removedfromgamemessage();
  } else {
    clear_has_removedfromgamemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.removedFromGameMessage)
}

// optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
bool PokerTHMessage::has_kickplayerrequestmessage() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void PokerTHMessage::set_has_kickplayerrequestmessage() {
  _has_bits_[0] |= 0x40000000u;
}
void PokerTHMessage::clear_has_kickplayerrequestmessage() {
  _has_bits_[0] &= ~0x40000000u;
}
void PokerTHMessage::clear_kickplayerrequestmessage() {
  if (kickplayerrequestmessage_ != NULL) kickplayerrequestmessage_->::KickPlayerRequestMessage::Clear();
  clear_has_kickplayerrequestmessage();
}
const ::KickPlayerRequestMessage& PokerTHMessage::kickplayerrequestmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.kickPlayerRequestMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return kickplayerrequestmessage_ != NULL ? *kickplayerrequestmessage_ : *default_instance().kickplayerrequestmessage_;
#else
  return kickplayerrequestmessage_ != NULL ? *kickplayerrequestmessage_ : *default_instance_->kickplayerrequestmessage_;
#endif
}
::KickPlayerRequestMessage* PokerTHMessage::mutable_kickplayerrequestmessage() {
  set_has_kickplayerrequestmessage();
  if (kickplayerrequestmessage_ == NULL) {
    kickplayerrequestmessage_ = new ::KickPlayerRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.kickPlayerRequestMessage)
  return kickplayerrequestmessage_;
}
::KickPlayerRequestMessage* PokerTHMessage::release_kickplayerrequestmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.kickPlayerRequestMessage)
  clear_has_kickplayerrequestmessage();
  ::KickPlayerRequestMessage* temp = kickplayerrequestmessage_;
  kickplayerrequestmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_kickplayerrequestmessage(::KickPlayerRequestMessage* kickplayerrequestmessage) {
  delete kickplayerrequestmessage_;
  kickplayerrequestmessage_ = kickplayerrequestmessage;
  if (kickplayerrequestmessage) {
    set_has_kickplayerrequestmessage();
  } else {
    clear_has_kickplayerrequestmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.kickPlayerRequestMessage)
}

// optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
bool PokerTHMessage::has_leavegamerequestmessage() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void PokerTHMessage::set_has_leavegamerequestmessage() {
  _has_bits_[0] |= 0x80000000u;
}
void PokerTHMessage::clear_has_leavegamerequestmessage() {
  _has_bits_[0] &= ~0x80000000u;
}
void PokerTHMessage::clear_leavegamerequestmessage() {
  if (leavegamerequestmessage_ != NULL) leavegamerequestmessage_->::LeaveGameRequestMessage::Clear();
  clear_has_leavegamerequestmessage();
}
const ::LeaveGameRequestMessage& PokerTHMessage::leavegamerequestmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.leaveGameRequestMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return leavegamerequestmessage_ != NULL ? *leavegamerequestmessage_ : *default_instance().leavegamerequestmessage_;
#else
  return leavegamerequestmessage_ != NULL ? *leavegamerequestmessage_ : *default_instance_->leavegamerequestmessage_;
#endif
}
::LeaveGameRequestMessage* PokerTHMessage::mutable_leavegamerequestmessage() {
  set_has_leavegamerequestmessage();
  if (leavegamerequestmessage_ == NULL) {
    leavegamerequestmessage_ = new ::LeaveGameRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.leaveGameRequestMessage)
  return leavegamerequestmessage_;
}
::LeaveGameRequestMessage* PokerTHMessage::release_leavegamerequestmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.leaveGameRequestMessage)
  clear_has_leavegamerequestmessage();
  ::LeaveGameRequestMessage* temp = leavegamerequestmessage_;
  leavegamerequestmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_leavegamerequestmessage(::LeaveGameRequestMessage* leavegamerequestmessage) {
  delete leavegamerequestmessage_;
  leavegamerequestmessage_ = leavegamerequestmessage;
  if (leavegamerequestmessage) {
    set_has_leavegamerequestmessage();
  } else {
    clear_has_leavegamerequestmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.leaveGameRequestMessage)
}

// optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
bool PokerTHMessage::has_inviteplayertogamemessage() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void PokerTHMessage::set_has_inviteplayertogamemessage() {
  _has_bits_[1] |= 0x00000001u;
}
void PokerTHMessage::clear_has_inviteplayertogamemessage() {
  _has_bits_[1] &= ~0x00000001u;
}
void PokerTHMessage::clear_inviteplayertogamemessage() {
  if (inviteplayertogamemessage_ != NULL) inviteplayertogamemessage_->::InvitePlayerToGameMessage::Clear();
  clear_has_inviteplayertogamemessage();
}
const ::InvitePlayerToGameMessage& PokerTHMessage::inviteplayertogamemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.invitePlayerToGameMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return inviteplayertogamemessage_ != NULL ? *inviteplayertogamemessage_ : *default_instance().inviteplayertogamemessage_;
#else
  return inviteplayertogamemessage_ != NULL ? *inviteplayertogamemessage_ : *default_instance_->inviteplayertogamemessage_;
#endif
}
::InvitePlayerToGameMessage* PokerTHMessage::mutable_inviteplayertogamemessage() {
  set_has_inviteplayertogamemessage();
  if (inviteplayertogamemessage_ == NULL) {
    inviteplayertogamemessage_ = new ::InvitePlayerToGameMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.invitePlayerToGameMessage)
  return inviteplayertogamemessage_;
}
::InvitePlayerToGameMessage* PokerTHMessage::release_inviteplayertogamemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.invitePlayerToGameMessage)
  clear_has_inviteplayertogamemessage();
  ::InvitePlayerToGameMessage* temp = inviteplayertogamemessage_;
  inviteplayertogamemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_inviteplayertogamemessage(::InvitePlayerToGameMessage* inviteplayertogamemessage) {
  delete inviteplayertogamemessage_;
  inviteplayertogamemessage_ = inviteplayertogamemessage;
  if (inviteplayertogamemessage) {
    set_has_inviteplayertogamemessage();
  } else {
    clear_has_inviteplayertogamemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.invitePlayerToGameMessage)
}

// optional .InviteNotifyMessage inviteNotifyMessage = 34;
bool PokerTHMessage::has_invitenotifymessage() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void PokerTHMessage::set_has_invitenotifymessage() {
  _has_bits_[1] |= 0x00000002u;
}
void PokerTHMessage::clear_has_invitenotifymessage() {
  _has_bits_[1] &= ~0x00000002u;
}
void PokerTHMessage::clear_invitenotifymessage() {
  if (invitenotifymessage_ != NULL) invitenotifymessage_->::InviteNotifyMessage::Clear();
  clear_has_invitenotifymessage();
}
const ::InviteNotifyMessage& PokerTHMessage::invitenotifymessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.inviteNotifyMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return invitenotifymessage_ != NULL ? *invitenotifymessage_ : *default_instance().invitenotifymessage_;
#else
  return invitenotifymessage_ != NULL ? *invitenotifymessage_ : *default_instance_->invitenotifymessage_;
#endif
}
::InviteNotifyMessage* PokerTHMessage::mutable_invitenotifymessage() {
  set_has_invitenotifymessage();
  if (invitenotifymessage_ == NULL) {
    invitenotifymessage_ = new ::InviteNotifyMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.inviteNotifyMessage)
  return invitenotifymessage_;
}
::InviteNotifyMessage* PokerTHMessage::release_invitenotifymessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.inviteNotifyMessage)
  clear_has_invitenotifymessage();
  ::InviteNotifyMessage* temp = invitenotifymessage_;
  invitenotifymessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_invitenotifymessage(::InviteNotifyMessage* invitenotifymessage) {
  delete invitenotifymessage_;
  invitenotifymessage_ = invitenotifymessage;
  if (invitenotifymessage) {
    set_has_invitenotifymessage();
  } else {
    clear_has_invitenotifymessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.inviteNotifyMessage)
}

// optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
bool PokerTHMessage::has_rejectgameinvitationmessage() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void PokerTHMessage::set_has_rejectgameinvitationmessage() {
  _has_bits_[1] |= 0x00000004u;
}
void PokerTHMessage::clear_has_rejectgameinvitationmessage() {
  _has_bits_[1] &= ~0x00000004u;
}
void PokerTHMessage::clear_rejectgameinvitationmessage() {
  if (rejectgameinvitationmessage_ != NULL) rejectgameinvitationmessage_->::RejectGameInvitationMessage::Clear();
  clear_has_rejectgameinvitationmessage();
}
const ::RejectGameInvitationMessage& PokerTHMessage::rejectgameinvitationmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.rejectGameInvitationMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rejectgameinvitationmessage_ != NULL ? *rejectgameinvitationmessage_ : *default_instance().rejectgameinvitationmessage_;
#else
  return rejectgameinvitationmessage_ != NULL ? *rejectgameinvitationmessage_ : *default_instance_->rejectgameinvitationmessage_;
#endif
}
::RejectGameInvitationMessage* PokerTHMessage::mutable_rejectgameinvitationmessage() {
  set_has_rejectgameinvitationmessage();
  if (rejectgameinvitationmessage_ == NULL) {
    rejectgameinvitationmessage_ = new ::RejectGameInvitationMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.rejectGameInvitationMessage)
  return rejectgameinvitationmessage_;
}
::RejectGameInvitationMessage* PokerTHMessage::release_rejectgameinvitationmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.rejectGameInvitationMessage)
  clear_has_rejectgameinvitationmessage();
  ::RejectGameInvitationMessage* temp = rejectgameinvitationmessage_;
  rejectgameinvitationmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_rejectgameinvitationmessage(::RejectGameInvitationMessage* rejectgameinvitationmessage) {
  delete rejectgameinvitationmessage_;
  rejectgameinvitationmessage_ = rejectgameinvitationmessage;
  if (rejectgameinvitationmessage) {
    set_has_rejectgameinvitationmessage();
  } else {
    clear_has_rejectgameinvitationmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.rejectGameInvitationMessage)
}

// optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
bool PokerTHMessage::has_rejectinvnotifymessage() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void PokerTHMessage::set_has_rejectinvnotifymessage() {
  _has_bits_[1] |= 0x00000008u;
}
void PokerTHMessage::clear_has_rejectinvnotifymessage() {
  _has_bits_[1] &= ~0x00000008u;
}
void PokerTHMessage::clear_rejectinvnotifymessage() {
  if (rejectinvnotifymessage_ != NULL) rejectinvnotifymessage_->::RejectInvNotifyMessage::Clear();
  clear_has_rejectinvnotifymessage();
}
const ::RejectInvNotifyMessage& PokerTHMessage::rejectinvnotifymessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.rejectInvNotifyMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rejectinvnotifymessage_ != NULL ? *rejectinvnotifymessage_ : *default_instance().rejectinvnotifymessage_;
#else
  return rejectinvnotifymessage_ != NULL ? *rejectinvnotifymessage_ : *default_instance_->rejectinvnotifymessage_;
#endif
}
::RejectInvNotifyMessage* PokerTHMessage::mutable_rejectinvnotifymessage() {
  set_has_rejectinvnotifymessage();
  if (rejectinvnotifymessage_ == NULL) {
    rejectinvnotifymessage_ = new ::RejectInvNotifyMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.rejectInvNotifyMessage)
  return rejectinvnotifymessage_;
}
::RejectInvNotifyMessage* PokerTHMessage::release_rejectinvnotifymessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.rejectInvNotifyMessage)
  clear_has_rejectinvnotifymessage();
  ::RejectInvNotifyMessage* temp = rejectinvnotifymessage_;
  rejectinvnotifymessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_rejectinvnotifymessage(::RejectInvNotifyMessage* rejectinvnotifymessage) {
  delete rejectinvnotifymessage_;
  rejectinvnotifymessage_ = rejectinvnotifymessage;
  if (rejectinvnotifymessage) {
    set_has_rejectinvnotifymessage();
  } else {
    clear_has_rejectinvnotifymessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.rejectInvNotifyMessage)
}

// optional .StartEventMessage startEventMessage = 37;
bool PokerTHMessage::has_starteventmessage() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void PokerTHMessage::set_has_starteventmessage() {
  _has_bits_[1] |= 0x00000010u;
}
void PokerTHMessage::clear_has_starteventmessage() {
  _has_bits_[1] &= ~0x00000010u;
}
void PokerTHMessage::clear_starteventmessage() {
  if (starteventmessage_ != NULL) starteventmessage_->::StartEventMessage::Clear();
  clear_has_starteventmessage();
}
const ::StartEventMessage& PokerTHMessage::starteventmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.startEventMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return starteventmessage_ != NULL ? *starteventmessage_ : *default_instance().starteventmessage_;
#else
  return starteventmessage_ != NULL ? *starteventmessage_ : *default_instance_->starteventmessage_;
#endif
}
::StartEventMessage* PokerTHMessage::mutable_starteventmessage() {
  set_has_starteventmessage();
  if (starteventmessage_ == NULL) {
    starteventmessage_ = new ::StartEventMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.startEventMessage)
  return starteventmessage_;
}
::StartEventMessage* PokerTHMessage::release_starteventmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.startEventMessage)
  clear_has_starteventmessage();
  ::StartEventMessage* temp = starteventmessage_;
  starteventmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_starteventmessage(::StartEventMessage* starteventmessage) {
  delete starteventmessage_;
  starteventmessage_ = starteventmessage;
  if (starteventmessage) {
    set_has_starteventmessage();
  } else {
    clear_has_starteventmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.startEventMessage)
}

// optional .StartEventAckMessage startEventAckMessage = 38;
bool PokerTHMessage::has_starteventackmessage() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void PokerTHMessage::set_has_starteventackmessage() {
  _has_bits_[1] |= 0x00000020u;
}
void PokerTHMessage::clear_has_starteventackmessage() {
  _has_bits_[1] &= ~0x00000020u;
}
void PokerTHMessage::clear_starteventackmessage() {
  if (starteventackmessage_ != NULL) starteventackmessage_->::StartEventAckMessage::Clear();
  clear_has_starteventackmessage();
}
const ::StartEventAckMessage& PokerTHMessage::starteventackmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.startEventAckMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return starteventackmessage_ != NULL ? *starteventackmessage_ : *default_instance().starteventackmessage_;
#else
  return starteventackmessage_ != NULL ? *starteventackmessage_ : *default_instance_->starteventackmessage_;
#endif
}
::StartEventAckMessage* PokerTHMessage::mutable_starteventackmessage() {
  set_has_starteventackmessage();
  if (starteventackmessage_ == NULL) {
    starteventackmessage_ = new ::StartEventAckMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.startEventAckMessage)
  return starteventackmessage_;
}
::StartEventAckMessage* PokerTHMessage::release_starteventackmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.startEventAckMessage)
  clear_has_starteventackmessage();
  ::StartEventAckMessage* temp = starteventackmessage_;
  starteventackmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_starteventackmessage(::StartEventAckMessage* starteventackmessage) {
  delete starteventackmessage_;
  starteventackmessage_ = starteventackmessage;
  if (starteventackmessage) {
    set_has_starteventackmessage();
  } else {
    clear_has_starteventackmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.startEventAckMessage)
}

// optional .GameStartInitialMessage gameStartInitialMessage = 39;
bool PokerTHMessage::has_gamestartinitialmessage() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void PokerTHMessage::set_has_gamestartinitialmessage() {
  _has_bits_[1] |= 0x00000040u;
}
void PokerTHMessage::clear_has_gamestartinitialmessage() {
  _has_bits_[1] &= ~0x00000040u;
}
void PokerTHMessage::clear_gamestartinitialmessage() {
  if (gamestartinitialmessage_ != NULL) gamestartinitialmessage_->::GameStartInitialMessage::Clear();
  clear_has_gamestartinitialmessage();
}
const ::GameStartInitialMessage& PokerTHMessage::gamestartinitialmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameStartInitialMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamestartinitialmessage_ != NULL ? *gamestartinitialmessage_ : *default_instance().gamestartinitialmessage_;
#else
  return gamestartinitialmessage_ != NULL ? *gamestartinitialmessage_ : *default_instance_->gamestartinitialmessage_;
#endif
}
::GameStartInitialMessage* PokerTHMessage::mutable_gamestartinitialmessage() {
  set_has_gamestartinitialmessage();
  if (gamestartinitialmessage_ == NULL) {
    gamestartinitialmessage_ = new ::GameStartInitialMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameStartInitialMessage)
  return gamestartinitialmessage_;
}
::GameStartInitialMessage* PokerTHMessage::release_gamestartinitialmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameStartInitialMessage)
  clear_has_gamestartinitialmessage();
  ::GameStartInitialMessage* temp = gamestartinitialmessage_;
  gamestartinitialmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gamestartinitialmessage(::GameStartInitialMessage* gamestartinitialmessage) {
  delete gamestartinitialmessage_;
  gamestartinitialmessage_ = gamestartinitialmessage;
  if (gamestartinitialmessage) {
    set_has_gamestartinitialmessage();
  } else {
    clear_has_gamestartinitialmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameStartInitialMessage)
}

// optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
bool PokerTHMessage::has_gamestartrejoinmessage() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void PokerTHMessage::set_has_gamestartrejoinmessage() {
  _has_bits_[1] |= 0x00000080u;
}
void PokerTHMessage::clear_has_gamestartrejoinmessage() {
  _has_bits_[1] &= ~0x00000080u;
}
void PokerTHMessage::clear_gamestartrejoinmessage() {
  if (gamestartrejoinmessage_ != NULL) gamestartrejoinmessage_->::GameStartRejoinMessage::Clear();
  clear_has_gamestartrejoinmessage();
}
const ::GameStartRejoinMessage& PokerTHMessage::gamestartrejoinmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameStartRejoinMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamestartrejoinmessage_ != NULL ? *gamestartrejoinmessage_ : *default_instance().gamestartrejoinmessage_;
#else
  return gamestartrejoinmessage_ != NULL ? *gamestartrejoinmessage_ : *default_instance_->gamestartrejoinmessage_;
#endif
}
::GameStartRejoinMessage* PokerTHMessage::mutable_gamestartrejoinmessage() {
  set_has_gamestartrejoinmessage();
  if (gamestartrejoinmessage_ == NULL) {
    gamestartrejoinmessage_ = new ::GameStartRejoinMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameStartRejoinMessage)
  return gamestartrejoinmessage_;
}
::GameStartRejoinMessage* PokerTHMessage::release_gamestartrejoinmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameStartRejoinMessage)
  clear_has_gamestartrejoinmessage();
  ::GameStartRejoinMessage* temp = gamestartrejoinmessage_;
  gamestartrejoinmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gamestartrejoinmessage(::GameStartRejoinMessage* gamestartrejoinmessage) {
  delete gamestartrejoinmessage_;
  gamestartrejoinmessage_ = gamestartrejoinmessage;
  if (gamestartrejoinmessage) {
    set_has_gamestartrejoinmessage();
  } else {
    clear_has_gamestartrejoinmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameStartRejoinMessage)
}

// optional .HandStartMessage handStartMessage = 41;
bool PokerTHMessage::has_handstartmessage() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void PokerTHMessage::set_has_handstartmessage() {
  _has_bits_[1] |= 0x00000100u;
}
void PokerTHMessage::clear_has_handstartmessage() {
  _has_bits_[1] &= ~0x00000100u;
}
void PokerTHMessage::clear_handstartmessage() {
  if (handstartmessage_ != NULL) handstartmessage_->::HandStartMessage::Clear();
  clear_has_handstartmessage();
}
const ::HandStartMessage& PokerTHMessage::handstartmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.handStartMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return handstartmessage_ != NULL ? *handstartmessage_ : *default_instance().handstartmessage_;
#else
  return handstartmessage_ != NULL ? *handstartmessage_ : *default_instance_->handstartmessage_;
#endif
}
::HandStartMessage* PokerTHMessage::mutable_handstartmessage() {
  set_has_handstartmessage();
  if (handstartmessage_ == NULL) {
    handstartmessage_ = new ::HandStartMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.handStartMessage)
  return handstartmessage_;
}
::HandStartMessage* PokerTHMessage::release_handstartmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.handStartMessage)
  clear_has_handstartmessage();
  ::HandStartMessage* temp = handstartmessage_;
  handstartmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_handstartmessage(::HandStartMessage* handstartmessage) {
  delete handstartmessage_;
  handstartmessage_ = handstartmessage;
  if (handstartmessage) {
    set_has_handstartmessage();
  } else {
    clear_has_handstartmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.handStartMessage)
}

// optional .PlayersTurnMessage playersTurnMessage = 42;
bool PokerTHMessage::has_playersturnmessage() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void PokerTHMessage::set_has_playersturnmessage() {
  _has_bits_[1] |= 0x00000200u;
}
void PokerTHMessage::clear_has_playersturnmessage() {
  _has_bits_[1] &= ~0x00000200u;
}
void PokerTHMessage::clear_playersturnmessage() {
  if (playersturnmessage_ != NULL) playersturnmessage_->::PlayersTurnMessage::Clear();
  clear_has_playersturnmessage();
}
const ::PlayersTurnMessage& PokerTHMessage::playersturnmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.playersTurnMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playersturnmessage_ != NULL ? *playersturnmessage_ : *default_instance().playersturnmessage_;
#else
  return playersturnmessage_ != NULL ? *playersturnmessage_ : *default_instance_->playersturnmessage_;
#endif
}
::PlayersTurnMessage* PokerTHMessage::mutable_playersturnmessage() {
  set_has_playersturnmessage();
  if (playersturnmessage_ == NULL) {
    playersturnmessage_ = new ::PlayersTurnMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.playersTurnMessage)
  return playersturnmessage_;
}
::PlayersTurnMessage* PokerTHMessage::release_playersturnmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.playersTurnMessage)
  clear_has_playersturnmessage();
  ::PlayersTurnMessage* temp = playersturnmessage_;
  playersturnmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_playersturnmessage(::PlayersTurnMessage* playersturnmessage) {
  delete playersturnmessage_;
  playersturnmessage_ = playersturnmessage;
  if (playersturnmessage) {
    set_has_playersturnmessage();
  } else {
    clear_has_playersturnmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.playersTurnMessage)
}

// optional .MyActionRequestMessage myActionRequestMessage = 43;
bool PokerTHMessage::has_myactionrequestmessage() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void PokerTHMessage::set_has_myactionrequestmessage() {
  _has_bits_[1] |= 0x00000400u;
}
void PokerTHMessage::clear_has_myactionrequestmessage() {
  _has_bits_[1] &= ~0x00000400u;
}
void PokerTHMessage::clear_myactionrequestmessage() {
  if (myactionrequestmessage_ != NULL) myactionrequestmessage_->::MyActionRequestMessage::Clear();
  clear_has_myactionrequestmessage();
}
const ::MyActionRequestMessage& PokerTHMessage::myactionrequestmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.myActionRequestMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return myactionrequestmessage_ != NULL ? *myactionrequestmessage_ : *default_instance().myactionrequestmessage_;
#else
  return myactionrequestmessage_ != NULL ? *myactionrequestmessage_ : *default_instance_->myactionrequestmessage_;
#endif
}
::MyActionRequestMessage* PokerTHMessage::mutable_myactionrequestmessage() {
  set_has_myactionrequestmessage();
  if (myactionrequestmessage_ == NULL) {
    myactionrequestmessage_ = new ::MyActionRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.myActionRequestMessage)
  return myactionrequestmessage_;
}
::MyActionRequestMessage* PokerTHMessage::release_myactionrequestmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.myActionRequestMessage)
  clear_has_myactionrequestmessage();
  ::MyActionRequestMessage* temp = myactionrequestmessage_;
  myactionrequestmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_myactionrequestmessage(::MyActionRequestMessage* myactionrequestmessage) {
  delete myactionrequestmessage_;
  myactionrequestmessage_ = myactionrequestmessage;
  if (myactionrequestmessage) {
    set_has_myactionrequestmessage();
  } else {
    clear_has_myactionrequestmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.myActionRequestMessage)
}

// optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
bool PokerTHMessage::has_youractionrejectedmessage() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void PokerTHMessage::set_has_youractionrejectedmessage() {
  _has_bits_[1] |= 0x00000800u;
}
void PokerTHMessage::clear_has_youractionrejectedmessage() {
  _has_bits_[1] &= ~0x00000800u;
}
void PokerTHMessage::clear_youractionrejectedmessage() {
  if (youractionrejectedmessage_ != NULL) youractionrejectedmessage_->::YourActionRejectedMessage::Clear();
  clear_has_youractionrejectedmessage();
}
const ::YourActionRejectedMessage& PokerTHMessage::youractionrejectedmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.yourActionRejectedMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return youractionrejectedmessage_ != NULL ? *youractionrejectedmessage_ : *default_instance().youractionrejectedmessage_;
#else
  return youractionrejectedmessage_ != NULL ? *youractionrejectedmessage_ : *default_instance_->youractionrejectedmessage_;
#endif
}
::YourActionRejectedMessage* PokerTHMessage::mutable_youractionrejectedmessage() {
  set_has_youractionrejectedmessage();
  if (youractionrejectedmessage_ == NULL) {
    youractionrejectedmessage_ = new ::YourActionRejectedMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.yourActionRejectedMessage)
  return youractionrejectedmessage_;
}
::YourActionRejectedMessage* PokerTHMessage::release_youractionrejectedmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.yourActionRejectedMessage)
  clear_has_youractionrejectedmessage();
  ::YourActionRejectedMessage* temp = youractionrejectedmessage_;
  youractionrejectedmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_youractionrejectedmessage(::YourActionRejectedMessage* youractionrejectedmessage) {
  delete youractionrejectedmessage_;
  youractionrejectedmessage_ = youractionrejectedmessage;
  if (youractionrejectedmessage) {
    set_has_youractionrejectedmessage();
  } else {
    clear_has_youractionrejectedmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.yourActionRejectedMessage)
}

// optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
bool PokerTHMessage::has_playersactiondonemessage() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void PokerTHMessage::set_has_playersactiondonemessage() {
  _has_bits_[1] |= 0x00001000u;
}
void PokerTHMessage::clear_has_playersactiondonemessage() {
  _has_bits_[1] &= ~0x00001000u;
}
void PokerTHMessage::clear_playersactiondonemessage() {
  if (playersactiondonemessage_ != NULL) playersactiondonemessage_->::PlayersActionDoneMessage::Clear();
  clear_has_playersactiondonemessage();
}
const ::PlayersActionDoneMessage& PokerTHMessage::playersactiondonemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.playersActionDoneMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playersactiondonemessage_ != NULL ? *playersactiondonemessage_ : *default_instance().playersactiondonemessage_;
#else
  return playersactiondonemessage_ != NULL ? *playersactiondonemessage_ : *default_instance_->playersactiondonemessage_;
#endif
}
::PlayersActionDoneMessage* PokerTHMessage::mutable_playersactiondonemessage() {
  set_has_playersactiondonemessage();
  if (playersactiondonemessage_ == NULL) {
    playersactiondonemessage_ = new ::PlayersActionDoneMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.playersActionDoneMessage)
  return playersactiondonemessage_;
}
::PlayersActionDoneMessage* PokerTHMessage::release_playersactiondonemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.playersActionDoneMessage)
  clear_has_playersactiondonemessage();
  ::PlayersActionDoneMessage* temp = playersactiondonemessage_;
  playersactiondonemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_playersactiondonemessage(::PlayersActionDoneMessage* playersactiondonemessage) {
  delete playersactiondonemessage_;
  playersactiondonemessage_ = playersactiondonemessage;
  if (playersactiondonemessage) {
    set_has_playersactiondonemessage();
  } else {
    clear_has_playersactiondonemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.playersActionDoneMessage)
}

// optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
bool PokerTHMessage::has_dealflopcardsmessage() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void PokerTHMessage::set_has_dealflopcardsmessage() {
  _has_bits_[1] |= 0x00002000u;
}
void PokerTHMessage::clear_has_dealflopcardsmessage() {
  _has_bits_[1] &= ~0x00002000u;
}
void PokerTHMessage::clear_dealflopcardsmessage() {
  if (dealflopcardsmessage_ != NULL) dealflopcardsmessage_->::DealFlopCardsMessage::Clear();
  clear_has_dealflopcardsmessage();
}
const ::DealFlopCardsMessage& PokerTHMessage::dealflopcardsmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.dealFlopCardsMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return dealflopcardsmessage_ != NULL ? *dealflopcardsmessage_ : *default_instance().dealflopcardsmessage_;
#else
  return dealflopcardsmessage_ != NULL ? *dealflopcardsmessage_ : *default_instance_->dealflopcardsmessage_;
#endif
}
::DealFlopCardsMessage* PokerTHMessage::mutable_dealflopcardsmessage() {
  set_has_dealflopcardsmessage();
  if (dealflopcardsmessage_ == NULL) {
    dealflopcardsmessage_ = new ::DealFlopCardsMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.dealFlopCardsMessage)
  return dealflopcardsmessage_;
}
::DealFlopCardsMessage* PokerTHMessage::release_dealflopcardsmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.dealFlopCardsMessage)
  clear_has_dealflopcardsmessage();
  ::DealFlopCardsMessage* temp = dealflopcardsmessage_;
  dealflopcardsmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_dealflopcardsmessage(::DealFlopCardsMessage* dealflopcardsmessage) {
  delete dealflopcardsmessage_;
  dealflopcardsmessage_ = dealflopcardsmessage;
  if (dealflopcardsmessage) {
    set_has_dealflopcardsmessage();
  } else {
    clear_has_dealflopcardsmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.dealFlopCardsMessage)
}

// optional .DealTurnCardMessage dealTurnCardMessage = 47;
bool PokerTHMessage::has_dealturncardmessage() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void PokerTHMessage::set_has_dealturncardmessage() {
  _has_bits_[1] |= 0x00004000u;
}
void PokerTHMessage::clear_has_dealturncardmessage() {
  _has_bits_[1] &= ~0x00004000u;
}
void PokerTHMessage::clear_dealturncardmessage() {
  if (dealturncardmessage_ != NULL) dealturncardmessage_->::DealTurnCardMessage::Clear();
  clear_has_dealturncardmessage();
}
const ::DealTurnCardMessage& PokerTHMessage::dealturncardmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.dealTurnCardMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return dealturncardmessage_ != NULL ? *dealturncardmessage_ : *default_instance().dealturncardmessage_;
#else
  return dealturncardmessage_ != NULL ? *dealturncardmessage_ : *default_instance_->dealturncardmessage_;
#endif
}
::DealTurnCardMessage* PokerTHMessage::mutable_dealturncardmessage() {
  set_has_dealturncardmessage();
  if (dealturncardmessage_ == NULL) {
    dealturncardmessage_ = new ::DealTurnCardMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.dealTurnCardMessage)
  return dealturncardmessage_;
}
::DealTurnCardMessage* PokerTHMessage::release_dealturncardmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.dealTurnCardMessage)
  clear_has_dealturncardmessage();
  ::DealTurnCardMessage* temp = dealturncardmessage_;
  dealturncardmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_dealturncardmessage(::DealTurnCardMessage* dealturncardmessage) {
  delete dealturncardmessage_;
  dealturncardmessage_ = dealturncardmessage;
  if (dealturncardmessage) {
    set_has_dealturncardmessage();
  } else {
    clear_has_dealturncardmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.dealTurnCardMessage)
}

// optional .DealRiverCardMessage dealRiverCardMessage = 48;
bool PokerTHMessage::has_dealrivercardmessage() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void PokerTHMessage::set_has_dealrivercardmessage() {
  _has_bits_[1] |= 0x00008000u;
}
void PokerTHMessage::clear_has_dealrivercardmessage() {
  _has_bits_[1] &= ~0x00008000u;
}
void PokerTHMessage::clear_dealrivercardmessage() {
  if (dealrivercardmessage_ != NULL) dealrivercardmessage_->::DealRiverCardMessage::Clear();
  clear_has_dealrivercardmessage();
}
const ::DealRiverCardMessage& PokerTHMessage::dealrivercardmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.dealRiverCardMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return dealrivercardmessage_ != NULL ? *dealrivercardmessage_ : *default_instance().dealrivercardmessage_;
#else
  return dealrivercardmessage_ != NULL ? *dealrivercardmessage_ : *default_instance_->dealrivercardmessage_;
#endif
}
::DealRiverCardMessage* PokerTHMessage::mutable_dealrivercardmessage() {
  set_has_dealrivercardmessage();
  if (dealrivercardmessage_ == NULL) {
    dealrivercardmessage_ = new ::DealRiverCardMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.dealRiverCardMessage)
  return dealrivercardmessage_;
}
::DealRiverCardMessage* PokerTHMessage::release_dealrivercardmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.dealRiverCardMessage)
  clear_has_dealrivercardmessage();
  ::DealRiverCardMessage* temp = dealrivercardmessage_;
  dealrivercardmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_dealrivercardmessage(::DealRiverCardMessage* dealrivercardmessage) {
  delete dealrivercardmessage_;
  dealrivercardmessage_ = dealrivercardmessage;
  if (dealrivercardmessage) {
    set_has_dealrivercardmessage();
  } else {
    clear_has_dealrivercardmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.dealRiverCardMessage)
}

// optional .AllInShowCardsMessage allInShowCardsMessage = 49;
bool PokerTHMessage::has_allinshowcardsmessage() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void PokerTHMessage::set_has_allinshowcardsmessage() {
  _has_bits_[1] |= 0x00010000u;
}
void PokerTHMessage::clear_has_allinshowcardsmessage() {
  _has_bits_[1] &= ~0x00010000u;
}
void PokerTHMessage::clear_allinshowcardsmessage() {
  if (allinshowcardsmessage_ != NULL) allinshowcardsmessage_->::AllInShowCardsMessage::Clear();
  clear_has_allinshowcardsmessage();
}
const ::AllInShowCardsMessage& PokerTHMessage::allinshowcardsmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.allInShowCardsMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return allinshowcardsmessage_ != NULL ? *allinshowcardsmessage_ : *default_instance().allinshowcardsmessage_;
#else
  return allinshowcardsmessage_ != NULL ? *allinshowcardsmessage_ : *default_instance_->allinshowcardsmessage_;
#endif
}
::AllInShowCardsMessage* PokerTHMessage::mutable_allinshowcardsmessage() {
  set_has_allinshowcardsmessage();
  if (allinshowcardsmessage_ == NULL) {
    allinshowcardsmessage_ = new ::AllInShowCardsMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.allInShowCardsMessage)
  return allinshowcardsmessage_;
}
::AllInShowCardsMessage* PokerTHMessage::release_allinshowcardsmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.allInShowCardsMessage)
  clear_has_allinshowcardsmessage();
  ::AllInShowCardsMessage* temp = allinshowcardsmessage_;
  allinshowcardsmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_allinshowcardsmessage(::AllInShowCardsMessage* allinshowcardsmessage) {
  delete allinshowcardsmessage_;
  allinshowcardsmessage_ = allinshowcardsmessage;
  if (allinshowcardsmessage) {
    set_has_allinshowcardsmessage();
  } else {
    clear_has_allinshowcardsmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.allInShowCardsMessage)
}

// optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
bool PokerTHMessage::has_endofhandshowcardsmessage() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void PokerTHMessage::set_has_endofhandshowcardsmessage() {
  _has_bits_[1] |= 0x00020000u;
}
void PokerTHMessage::clear_has_endofhandshowcardsmessage() {
  _has_bits_[1] &= ~0x00020000u;
}
void PokerTHMessage::clear_endofhandshowcardsmessage() {
  if (endofhandshowcardsmessage_ != NULL) endofhandshowcardsmessage_->::EndOfHandShowCardsMessage::Clear();
  clear_has_endofhandshowcardsmessage();
}
const ::EndOfHandShowCardsMessage& PokerTHMessage::endofhandshowcardsmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.endOfHandShowCardsMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return endofhandshowcardsmessage_ != NULL ? *endofhandshowcardsmessage_ : *default_instance().endofhandshowcardsmessage_;
#else
  return endofhandshowcardsmessage_ != NULL ? *endofhandshowcardsmessage_ : *default_instance_->endofhandshowcardsmessage_;
#endif
}
::EndOfHandShowCardsMessage* PokerTHMessage::mutable_endofhandshowcardsmessage() {
  set_has_endofhandshowcardsmessage();
  if (endofhandshowcardsmessage_ == NULL) {
    endofhandshowcardsmessage_ = new ::EndOfHandShowCardsMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.endOfHandShowCardsMessage)
  return endofhandshowcardsmessage_;
}
::EndOfHandShowCardsMessage* PokerTHMessage::release_endofhandshowcardsmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.endOfHandShowCardsMessage)
  clear_has_endofhandshowcardsmessage();
  ::EndOfHandShowCardsMessage* temp = endofhandshowcardsmessage_;
  endofhandshowcardsmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_endofhandshowcardsmessage(::EndOfHandShowCardsMessage* endofhandshowcardsmessage) {
  delete endofhandshowcardsmessage_;
  endofhandshowcardsmessage_ = endofhandshowcardsmessage;
  if (endofhandshowcardsmessage) {
    set_has_endofhandshowcardsmessage();
  } else {
    clear_has_endofhandshowcardsmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.endOfHandShowCardsMessage)
}

// optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
bool PokerTHMessage::has_endofhandhidecardsmessage() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void PokerTHMessage::set_has_endofhandhidecardsmessage() {
  _has_bits_[1] |= 0x00040000u;
}
void PokerTHMessage::clear_has_endofhandhidecardsmessage() {
  _has_bits_[1] &= ~0x00040000u;
}
void PokerTHMessage::clear_endofhandhidecardsmessage() {
  if (endofhandhidecardsmessage_ != NULL) endofhandhidecardsmessage_->::EndOfHandHideCardsMessage::Clear();
  clear_has_endofhandhidecardsmessage();
}
const ::EndOfHandHideCardsMessage& PokerTHMessage::endofhandhidecardsmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.endOfHandHideCardsMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return endofhandhidecardsmessage_ != NULL ? *endofhandhidecardsmessage_ : *default_instance().endofhandhidecardsmessage_;
#else
  return endofhandhidecardsmessage_ != NULL ? *endofhandhidecardsmessage_ : *default_instance_->endofhandhidecardsmessage_;
#endif
}
::EndOfHandHideCardsMessage* PokerTHMessage::mutable_endofhandhidecardsmessage() {
  set_has_endofhandhidecardsmessage();
  if (endofhandhidecardsmessage_ == NULL) {
    endofhandhidecardsmessage_ = new ::EndOfHandHideCardsMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.endOfHandHideCardsMessage)
  return endofhandhidecardsmessage_;
}
::EndOfHandHideCardsMessage* PokerTHMessage::release_endofhandhidecardsmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.endOfHandHideCardsMessage)
  clear_has_endofhandhidecardsmessage();
  ::EndOfHandHideCardsMessage* temp = endofhandhidecardsmessage_;
  endofhandhidecardsmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_endofhandhidecardsmessage(::EndOfHandHideCardsMessage* endofhandhidecardsmessage) {
  delete endofhandhidecardsmessage_;
  endofhandhidecardsmessage_ = endofhandhidecardsmessage;
  if (endofhandhidecardsmessage) {
    set_has_endofhandhidecardsmessage();
  } else {
    clear_has_endofhandhidecardsmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.endOfHandHideCardsMessage)
}

// optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
bool PokerTHMessage::has_showmycardsrequestmessage() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void PokerTHMessage::set_has_showmycardsrequestmessage() {
  _has_bits_[1] |= 0x00080000u;
}
void PokerTHMessage::clear_has_showmycardsrequestmessage() {
  _has_bits_[1] &= ~0x00080000u;
}
void PokerTHMessage::clear_showmycardsrequestmessage() {
  if (showmycardsrequestmessage_ != NULL) showmycardsrequestmessage_->::ShowMyCardsRequestMessage::Clear();
  clear_has_showmycardsrequestmessage();
}
const ::ShowMyCardsRequestMessage& PokerTHMessage::showmycardsrequestmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.showMyCardsRequestMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return showmycardsrequestmessage_ != NULL ? *showmycardsrequestmessage_ : *default_instance().showmycardsrequestmessage_;
#else
  return showmycardsrequestmessage_ != NULL ? *showmycardsrequestmessage_ : *default_instance_->showmycardsrequestmessage_;
#endif
}
::ShowMyCardsRequestMessage* PokerTHMessage::mutable_showmycardsrequestmessage() {
  set_has_showmycardsrequestmessage();
  if (showmycardsrequestmessage_ == NULL) {
    showmycardsrequestmessage_ = new ::ShowMyCardsRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.showMyCardsRequestMessage)
  return showmycardsrequestmessage_;
}
::ShowMyCardsRequestMessage* PokerTHMessage::release_showmycardsrequestmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.showMyCardsRequestMessage)
  clear_has_showmycardsrequestmessage();
  ::ShowMyCardsRequestMessage* temp = showmycardsrequestmessage_;
  showmycardsrequestmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_showmycardsrequestmessage(::ShowMyCardsRequestMessage* showmycardsrequestmessage) {
  delete showmycardsrequestmessage_;
  showmycardsrequestmessage_ = showmycardsrequestmessage;
  if (showmycardsrequestmessage) {
    set_has_showmycardsrequestmessage();
  } else {
    clear_has_showmycardsrequestmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.showMyCardsRequestMessage)
}

// optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
bool PokerTHMessage::has_afterhandshowcardsmessage() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void PokerTHMessage::set_has_afterhandshowcardsmessage() {
  _has_bits_[1] |= 0x00100000u;
}
void PokerTHMessage::clear_has_afterhandshowcardsmessage() {
  _has_bits_[1] &= ~0x00100000u;
}
void PokerTHMessage::clear_afterhandshowcardsmessage() {
  if (afterhandshowcardsmessage_ != NULL) afterhandshowcardsmessage_->::AfterHandShowCardsMessage::Clear();
  clear_has_afterhandshowcardsmessage();
}
const ::AfterHandShowCardsMessage& PokerTHMessage::afterhandshowcardsmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.afterHandShowCardsMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return afterhandshowcardsmessage_ != NULL ? *afterhandshowcardsmessage_ : *default_instance().afterhandshowcardsmessage_;
#else
  return afterhandshowcardsmessage_ != NULL ? *afterhandshowcardsmessage_ : *default_instance_->afterhandshowcardsmessage_;
#endif
}
::AfterHandShowCardsMessage* PokerTHMessage::mutable_afterhandshowcardsmessage() {
  set_has_afterhandshowcardsmessage();
  if (afterhandshowcardsmessage_ == NULL) {
    afterhandshowcardsmessage_ = new ::AfterHandShowCardsMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.afterHandShowCardsMessage)
  return afterhandshowcardsmessage_;
}
::AfterHandShowCardsMessage* PokerTHMessage::release_afterhandshowcardsmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.afterHandShowCardsMessage)
  clear_has_afterhandshowcardsmessage();
  ::AfterHandShowCardsMessage* temp = afterhandshowcardsmessage_;
  afterhandshowcardsmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_afterhandshowcardsmessage(::AfterHandShowCardsMessage* afterhandshowcardsmessage) {
  delete afterhandshowcardsmessage_;
  afterhandshowcardsmessage_ = afterhandshowcardsmessage;
  if (afterhandshowcardsmessage) {
    set_has_afterhandshowcardsmessage();
  } else {
    clear_has_afterhandshowcardsmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.afterHandShowCardsMessage)
}

// optional .EndOfGameMessage endOfGameMessage = 54;
bool PokerTHMessage::has_endofgamemessage() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void PokerTHMessage::set_has_endofgamemessage() {
  _has_bits_[1] |= 0x00200000u;
}
void PokerTHMessage::clear_has_endofgamemessage() {
  _has_bits_[1] &= ~0x00200000u;
}
void PokerTHMessage::clear_endofgamemessage() {
  if (endofgamemessage_ != NULL) endofgamemessage_->::EndOfGameMessage::Clear();
  clear_has_endofgamemessage();
}
const ::EndOfGameMessage& PokerTHMessage::endofgamemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.endOfGameMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return endofgamemessage_ != NULL ? *endofgamemessage_ : *default_instance().endofgamemessage_;
#else
  return endofgamemessage_ != NULL ? *endofgamemessage_ : *default_instance_->endofgamemessage_;
#endif
}
::EndOfGameMessage* PokerTHMessage::mutable_endofgamemessage() {
  set_has_endofgamemessage();
  if (endofgamemessage_ == NULL) {
    endofgamemessage_ = new ::EndOfGameMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.endOfGameMessage)
  return endofgamemessage_;
}
::EndOfGameMessage* PokerTHMessage::release_endofgamemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.endOfGameMessage)
  clear_has_endofgamemessage();
  ::EndOfGameMessage* temp = endofgamemessage_;
  endofgamemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_endofgamemessage(::EndOfGameMessage* endofgamemessage) {
  delete endofgamemessage_;
  endofgamemessage_ = endofgamemessage;
  if (endofgamemessage) {
    set_has_endofgamemessage();
  } else {
    clear_has_endofgamemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.endOfGameMessage)
}

// optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
bool PokerTHMessage::has_playeridchangedmessage() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void PokerTHMessage::set_has_playeridchangedmessage() {
  _has_bits_[1] |= 0x00400000u;
}
void PokerTHMessage::clear_has_playeridchangedmessage() {
  _has_bits_[1] &= ~0x00400000u;
}
void PokerTHMessage::clear_playeridchangedmessage() {
  if (playeridchangedmessage_ != NULL) playeridchangedmessage_->::PlayerIdChangedMessage::Clear();
  clear_has_playeridchangedmessage();
}
const ::PlayerIdChangedMessage& PokerTHMessage::playeridchangedmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.playerIdChangedMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playeridchangedmessage_ != NULL ? *playeridchangedmessage_ : *default_instance().playeridchangedmessage_;
#else
  return playeridchangedmessage_ != NULL ? *playeridchangedmessage_ : *default_instance_->playeridchangedmessage_;
#endif
}
::PlayerIdChangedMessage* PokerTHMessage::mutable_playeridchangedmessage() {
  set_has_playeridchangedmessage();
  if (playeridchangedmessage_ == NULL) {
    playeridchangedmessage_ = new ::PlayerIdChangedMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.playerIdChangedMessage)
  return playeridchangedmessage_;
}
::PlayerIdChangedMessage* PokerTHMessage::release_playeridchangedmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.playerIdChangedMessage)
  clear_has_playeridchangedmessage();
  ::PlayerIdChangedMessage* temp = playeridchangedmessage_;
  playeridchangedmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_playeridchangedmessage(::PlayerIdChangedMessage* playeridchangedmessage) {
  delete playeridchangedmessage_;
  playeridchangedmessage_ = playeridchangedmessage;
  if (playeridchangedmessage) {
    set_has_playeridchangedmessage();
  } else {
    clear_has_playeridchangedmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.playerIdChangedMessage)
}

// optional .AskKickPlayerMessage askKickPlayerMessage = 56;
bool PokerTHMessage::has_askkickplayermessage() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void PokerTHMessage::set_has_askkickplayermessage() {
  _has_bits_[1] |= 0x00800000u;
}
void PokerTHMessage::clear_has_askkickplayermessage() {
  _has_bits_[1] &= ~0x00800000u;
}
void PokerTHMessage::clear_askkickplayermessage() {
  if (askkickplayermessage_ != NULL) askkickplayermessage_->::AskKickPlayerMessage::Clear();
  clear_has_askkickplayermessage();
}
const ::AskKickPlayerMessage& PokerTHMessage::askkickplayermessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.askKickPlayerMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return askkickplayermessage_ != NULL ? *askkickplayermessage_ : *default_instance().askkickplayermessage_;
#else
  return askkickplayermessage_ != NULL ? *askkickplayermessage_ : *default_instance_->askkickplayermessage_;
#endif
}
::AskKickPlayerMessage* PokerTHMessage::mutable_askkickplayermessage() {
  set_has_askkickplayermessage();
  if (askkickplayermessage_ == NULL) {
    askkickplayermessage_ = new ::AskKickPlayerMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.askKickPlayerMessage)
  return askkickplayermessage_;
}
::AskKickPlayerMessage* PokerTHMessage::release_askkickplayermessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.askKickPlayerMessage)
  clear_has_askkickplayermessage();
  ::AskKickPlayerMessage* temp = askkickplayermessage_;
  askkickplayermessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_askkickplayermessage(::AskKickPlayerMessage* askkickplayermessage) {
  delete askkickplayermessage_;
  askkickplayermessage_ = askkickplayermessage;
  if (askkickplayermessage) {
    set_has_askkickplayermessage();
  } else {
    clear_has_askkickplayermessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.askKickPlayerMessage)
}

// optional .AskKickDeniedMessage askKickDeniedMessage = 57;
bool PokerTHMessage::has_askkickdeniedmessage() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void PokerTHMessage::set_has_askkickdeniedmessage() {
  _has_bits_[1] |= 0x01000000u;
}
void PokerTHMessage::clear_has_askkickdeniedmessage() {
  _has_bits_[1] &= ~0x01000000u;
}
void PokerTHMessage::clear_askkickdeniedmessage() {
  if (askkickdeniedmessage_ != NULL) askkickdeniedmessage_->::AskKickDeniedMessage::Clear();
  clear_has_askkickdeniedmessage();
}
const ::AskKickDeniedMessage& PokerTHMessage::askkickdeniedmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.askKickDeniedMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return askkickdeniedmessage_ != NULL ? *askkickdeniedmessage_ : *default_instance().askkickdeniedmessage_;
#else
  return askkickdeniedmessage_ != NULL ? *askkickdeniedmessage_ : *default_instance_->askkickdeniedmessage_;
#endif
}
::AskKickDeniedMessage* PokerTHMessage::mutable_askkickdeniedmessage() {
  set_has_askkickdeniedmessage();
  if (askkickdeniedmessage_ == NULL) {
    askkickdeniedmessage_ = new ::AskKickDeniedMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.askKickDeniedMessage)
  return askkickdeniedmessage_;
}
::AskKickDeniedMessage* PokerTHMessage::release_askkickdeniedmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.askKickDeniedMessage)
  clear_has_askkickdeniedmessage();
  ::AskKickDeniedMessage* temp = askkickdeniedmessage_;
  askkickdeniedmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_askkickdeniedmessage(::AskKickDeniedMessage* askkickdeniedmessage) {
  delete askkickdeniedmessage_;
  askkickdeniedmessage_ = askkickdeniedmessage;
  if (askkickdeniedmessage) {
    set_has_askkickdeniedmessage();
  } else {
    clear_has_askkickdeniedmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.askKickDeniedMessage)
}

// optional .StartKickPetitionMessage startKickPetitionMessage = 58;
bool PokerTHMessage::has_startkickpetitionmessage() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void PokerTHMessage::set_has_startkickpetitionmessage() {
  _has_bits_[1] |= 0x02000000u;
}
void PokerTHMessage::clear_has_startkickpetitionmessage() {
  _has_bits_[1] &= ~0x02000000u;
}
void PokerTHMessage::clear_startkickpetitionmessage() {
  if (startkickpetitionmessage_ != NULL) startkickpetitionmessage_->::StartKickPetitionMessage::Clear();
  clear_has_startkickpetitionmessage();
}
const ::StartKickPetitionMessage& PokerTHMessage::startkickpetitionmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.startKickPetitionMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return startkickpetitionmessage_ != NULL ? *startkickpetitionmessage_ : *default_instance().startkickpetitionmessage_;
#else
  return startkickpetitionmessage_ != NULL ? *startkickpetitionmessage_ : *default_instance_->startkickpetitionmessage_;
#endif
}
::StartKickPetitionMessage* PokerTHMessage::mutable_startkickpetitionmessage() {
  set_has_startkickpetitionmessage();
  if (startkickpetitionmessage_ == NULL) {
    startkickpetitionmessage_ = new ::StartKickPetitionMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.startKickPetitionMessage)
  return startkickpetitionmessage_;
}
::StartKickPetitionMessage* PokerTHMessage::release_startkickpetitionmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.startKickPetitionMessage)
  clear_has_startkickpetitionmessage();
  ::StartKickPetitionMessage* temp = startkickpetitionmessage_;
  startkickpetitionmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_startkickpetitionmessage(::StartKickPetitionMessage* startkickpetitionmessage) {
  delete startkickpetitionmessage_;
  startkickpetitionmessage_ = startkickpetitionmessage;
  if (startkickpetitionmessage) {
    set_has_startkickpetitionmessage();
  } else {
    clear_has_startkickpetitionmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.startKickPetitionMessage)
}

// optional .VoteKickRequestMessage voteKickRequestMessage = 59;
bool PokerTHMessage::has_votekickrequestmessage() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void PokerTHMessage::set_has_votekickrequestmessage() {
  _has_bits_[1] |= 0x04000000u;
}
void PokerTHMessage::clear_has_votekickrequestmessage() {
  _has_bits_[1] &= ~0x04000000u;
}
void PokerTHMessage::clear_votekickrequestmessage() {
  if (votekickrequestmessage_ != NULL) votekickrequestmessage_->::VoteKickRequestMessage::Clear();
  clear_has_votekickrequestmessage();
}
const ::VoteKickRequestMessage& PokerTHMessage::votekickrequestmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.voteKickRequestMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return votekickrequestmessage_ != NULL ? *votekickrequestmessage_ : *default_instance().votekickrequestmessage_;
#else
  return votekickrequestmessage_ != NULL ? *votekickrequestmessage_ : *default_instance_->votekickrequestmessage_;
#endif
}
::VoteKickRequestMessage* PokerTHMessage::mutable_votekickrequestmessage() {
  set_has_votekickrequestmessage();
  if (votekickrequestmessage_ == NULL) {
    votekickrequestmessage_ = new ::VoteKickRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.voteKickRequestMessage)
  return votekickrequestmessage_;
}
::VoteKickRequestMessage* PokerTHMessage::release_votekickrequestmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.voteKickRequestMessage)
  clear_has_votekickrequestmessage();
  ::VoteKickRequestMessage* temp = votekickrequestmessage_;
  votekickrequestmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_votekickrequestmessage(::VoteKickRequestMessage* votekickrequestmessage) {
  delete votekickrequestmessage_;
  votekickrequestmessage_ = votekickrequestmessage;
  if (votekickrequestmessage) {
    set_has_votekickrequestmessage();
  } else {
    clear_has_votekickrequestmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.voteKickRequestMessage)
}

// optional .VoteKickReplyMessage voteKickReplyMessage = 60;
bool PokerTHMessage::has_votekickreplymessage() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void PokerTHMessage::set_has_votekickreplymessage() {
  _has_bits_[1] |= 0x08000000u;
}
void PokerTHMessage::clear_has_votekickreplymessage() {
  _has_bits_[1] &= ~0x08000000u;
}
void PokerTHMessage::clear_votekickreplymessage() {
  if (votekickreplymessage_ != NULL) votekickreplymessage_->::VoteKickReplyMessage::Clear();
  clear_has_votekickreplymessage();
}
const ::VoteKickReplyMessage& PokerTHMessage::votekickreplymessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.voteKickReplyMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return votekickreplymessage_ != NULL ? *votekickreplymessage_ : *default_instance().votekickreplymessage_;
#else
  return votekickreplymessage_ != NULL ? *votekickreplymessage_ : *default_instance_->votekickreplymessage_;
#endif
}
::VoteKickReplyMessage* PokerTHMessage::mutable_votekickreplymessage() {
  set_has_votekickreplymessage();
  if (votekickreplymessage_ == NULL) {
    votekickreplymessage_ = new ::VoteKickReplyMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.voteKickReplyMessage)
  return votekickreplymessage_;
}
::VoteKickReplyMessage* PokerTHMessage::release_votekickreplymessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.voteKickReplyMessage)
  clear_has_votekickreplymessage();
  ::VoteKickReplyMessage* temp = votekickreplymessage_;
  votekickreplymessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_votekickreplymessage(::VoteKickReplyMessage* votekickreplymessage) {
  delete votekickreplymessage_;
  votekickreplymessage_ = votekickreplymessage;
  if (votekickreplymessage) {
    set_has_votekickreplymessage();
  } else {
    clear_has_votekickreplymessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.voteKickReplyMessage)
}

// optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
bool PokerTHMessage::has_kickpetitionupdatemessage() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void PokerTHMessage::set_has_kickpetitionupdatemessage() {
  _has_bits_[1] |= 0x10000000u;
}
void PokerTHMessage::clear_has_kickpetitionupdatemessage() {
  _has_bits_[1] &= ~0x10000000u;
}
void PokerTHMessage::clear_kickpetitionupdatemessage() {
  if (kickpetitionupdatemessage_ != NULL) kickpetitionupdatemessage_->::KickPetitionUpdateMessage::Clear();
  clear_has_kickpetitionupdatemessage();
}
const ::KickPetitionUpdateMessage& PokerTHMessage::kickpetitionupdatemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.kickPetitionUpdateMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return kickpetitionupdatemessage_ != NULL ? *kickpetitionupdatemessage_ : *default_instance().kickpetitionupdatemessage_;
#else
  return kickpetitionupdatemessage_ != NULL ? *kickpetitionupdatemessage_ : *default_instance_->kickpetitionupdatemessage_;
#endif
}
::KickPetitionUpdateMessage* PokerTHMessage::mutable_kickpetitionupdatemessage() {
  set_has_kickpetitionupdatemessage();
  if (kickpetitionupdatemessage_ == NULL) {
    kickpetitionupdatemessage_ = new ::KickPetitionUpdateMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.kickPetitionUpdateMessage)
  return kickpetitionupdatemessage_;
}
::KickPetitionUpdateMessage* PokerTHMessage::release_kickpetitionupdatemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.kickPetitionUpdateMessage)
  clear_has_kickpetitionupdatemessage();
  ::KickPetitionUpdateMessage* temp = kickpetitionupdatemessage_;
  kickpetitionupdatemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_kickpetitionupdatemessage(::KickPetitionUpdateMessage* kickpetitionupdatemessage) {
  delete kickpetitionupdatemessage_;
  kickpetitionupdatemessage_ = kickpetitionupdatemessage;
  if (kickpetitionupdatemessage) {
    set_has_kickpetitionupdatemessage();
  } else {
    clear_has_kickpetitionupdatemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.kickPetitionUpdateMessage)
}

// optional .EndKickPetitionMessage endKickPetitionMessage = 62;
bool PokerTHMessage::has_endkickpetitionmessage() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void PokerTHMessage::set_has_endkickpetitionmessage() {
  _has_bits_[1] |= 0x20000000u;
}
void PokerTHMessage::clear_has_endkickpetitionmessage() {
  _has_bits_[1] &= ~0x20000000u;
}
void PokerTHMessage::clear_endkickpetitionmessage() {
  if (endkickpetitionmessage_ != NULL) endkickpetitionmessage_->::EndKickPetitionMessage::Clear();
  clear_has_endkickpetitionmessage();
}
const ::EndKickPetitionMessage& PokerTHMessage::endkickpetitionmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.endKickPetitionMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return endkickpetitionmessage_ != NULL ? *endkickpetitionmessage_ : *default_instance().endkickpetitionmessage_;
#else
  return endkickpetitionmessage_ != NULL ? *endkickpetitionmessage_ : *default_instance_->endkickpetitionmessage_;
#endif
}
::EndKickPetitionMessage* PokerTHMessage::mutable_endkickpetitionmessage() {
  set_has_endkickpetitionmessage();
  if (endkickpetitionmessage_ == NULL) {
    endkickpetitionmessage_ = new ::EndKickPetitionMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.endKickPetitionMessage)
  return endkickpetitionmessage_;
}
::EndKickPetitionMessage* PokerTHMessage::release_endkickpetitionmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.endKickPetitionMessage)
  clear_has_endkickpetitionmessage();
  ::EndKickPetitionMessage* temp = endkickpetitionmessage_;
  endkickpetitionmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_endkickpetitionmessage(::EndKickPetitionMessage* endkickpetitionmessage) {
  delete endkickpetitionmessage_;
  endkickpetitionmessage_ = endkickpetitionmessage;
  if (endkickpetitionmessage) {
    set_has_endkickpetitionmessage();
  } else {
    clear_has_endkickpetitionmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.endKickPetitionMessage)
}

// optional .StatisticsMessage statisticsMessage = 63;
bool PokerTHMessage::has_statisticsmessage() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void PokerTHMessage::set_has_statisticsmessage() {
  _has_bits_[1] |= 0x40000000u;
}
void PokerTHMessage::clear_has_statisticsmessage() {
  _has_bits_[1] &= ~0x40000000u;
}
void PokerTHMessage::clear_statisticsmessage() {
  if (statisticsmessage_ != NULL) statisticsmessage_->::StatisticsMessage::Clear();
  clear_has_statisticsmessage();
}
const ::StatisticsMessage& PokerTHMessage::statisticsmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.statisticsMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return statisticsmessage_ != NULL ? *statisticsmessage_ : *default_instance().statisticsmessage_;
#else
  return statisticsmessage_ != NULL ? *statisticsmessage_ : *default_instance_->statisticsmessage_;
#endif
}
::StatisticsMessage* PokerTHMessage::mutable_statisticsmessage() {
  set_has_statisticsmessage();
  if (statisticsmessage_ == NULL) {
    statisticsmessage_ = new ::StatisticsMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.statisticsMessage)
  return statisticsmessage_;
}
::StatisticsMessage* PokerTHMessage::release_statisticsmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.statisticsMessage)
  clear_has_statisticsmessage();
  ::StatisticsMessage* temp = statisticsmessage_;
  statisticsmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_statisticsmessage(::StatisticsMessage* statisticsmessage) {
  delete statisticsmessage_;
  statisticsmessage_ = statisticsmessage;
  if (statisticsmessage) {
    set_has_statisticsmessage();
  } else {
    clear_has_statisticsmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.statisticsMessage)
}

// optional .ChatRequestMessage chatRequestMessage = 64;
bool PokerTHMessage::has_chatrequestmessage() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void PokerTHMessage::set_has_chatrequestmessage() {
  _has_bits_[1] |= 0x80000000u;
}
void PokerTHMessage::clear_has_chatrequestmessage() {
  _has_bits_[1] &= ~0x80000000u;
}
void PokerTHMessage::clear_chatrequestmessage() {
  if (chatrequestmessage_ != NULL) chatrequestmessage_->::ChatRequestMessage::Clear();
  clear_has_chatrequestmessage();
}
const ::ChatRequestMessage& PokerTHMessage::chatrequestmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.chatRequestMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return chatrequestmessage_ != NULL ? *chatrequestmessage_ : *default_instance().chatrequestmessage_;
#else
  return chatrequestmessage_ != NULL ? *chatrequestmessage_ : *default_instance_->chatrequestmessage_;
#endif
}
::ChatRequestMessage* PokerTHMessage::mutable_chatrequestmessage() {
  set_has_chatrequestmessage();
  if (chatrequestmessage_ == NULL) {
    chatrequestmessage_ = new ::ChatRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.chatRequestMessage)
  return chatrequestmessage_;
}
::ChatRequestMessage* PokerTHMessage::release_chatrequestmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.chatRequestMessage)
  clear_has_chatrequestmessage();
  ::ChatRequestMessage* temp = chatrequestmessage_;
  chatrequestmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_chatrequestmessage(::ChatRequestMessage* chatrequestmessage) {
  delete chatrequestmessage_;
  chatrequestmessage_ = chatrequestmessage;
  if (chatrequestmessage) {
    set_has_chatrequestmessage();
  } else {
    clear_has_chatrequestmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.chatRequestMessage)
}

// optional .ChatMessage chatMessage = 65;
bool PokerTHMessage::has_chatmessage() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void PokerTHMessage::set_has_chatmessage() {
  _has_bits_[2] |= 0x00000001u;
}
void PokerTHMessage::clear_has_chatmessage() {
  _has_bits_[2] &= ~0x00000001u;
}
void PokerTHMessage::clear_chatmessage() {
  if (chatmessage_ != NULL) chatmessage_->::ChatMessage::Clear();
  clear_has_chatmessage();
}
const ::ChatMessage& PokerTHMessage::chatmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.chatMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return chatmessage_ != NULL ? *chatmessage_ : *default_instance().chatmessage_;
#else
  return chatmessage_ != NULL ? *chatmessage_ : *default_instance_->chatmessage_;
#endif
}
::ChatMessage* PokerTHMessage::mutable_chatmessage() {
  set_has_chatmessage();
  if (chatmessage_ == NULL) {
    chatmessage_ = new ::ChatMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.chatMessage)
  return chatmessage_;
}
::ChatMessage* PokerTHMessage::release_chatmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.chatMessage)
  clear_has_chatmessage();
  ::ChatMessage* temp = chatmessage_;
  chatmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_chatmessage(::ChatMessage* chatmessage) {
  delete chatmessage_;
  chatmessage_ = chatmessage;
  if (chatmessage) {
    set_has_chatmessage();
  } else {
    clear_has_chatmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.chatMessage)
}

// optional .ChatRejectMessage chatRejectMessage = 66;
bool PokerTHMessage::has_chatrejectmessage() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void PokerTHMessage::set_has_chatrejectmessage() {
  _has_bits_[2] |= 0x00000002u;
}
void PokerTHMessage::clear_has_chatrejectmessage() {
  _has_bits_[2] &= ~0x00000002u;
}
void PokerTHMessage::clear_chatrejectmessage() {
  if (chatrejectmessage_ != NULL) chatrejectmessage_->::ChatRejectMessage::Clear();
  clear_has_chatrejectmessage();
}
const ::ChatRejectMessage& PokerTHMessage::chatrejectmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.chatRejectMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return chatrejectmessage_ != NULL ? *chatrejectmessage_ : *default_instance().chatrejectmessage_;
#else
  return chatrejectmessage_ != NULL ? *chatrejectmessage_ : *default_instance_->chatrejectmessage_;
#endif
}
::ChatRejectMessage* PokerTHMessage::mutable_chatrejectmessage() {
  set_has_chatrejectmessage();
  if (chatrejectmessage_ == NULL) {
    chatrejectmessage_ = new ::ChatRejectMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.chatRejectMessage)
  return chatrejectmessage_;
}
::ChatRejectMessage* PokerTHMessage::release_chatrejectmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.chatRejectMessage)
  clear_has_chatrejectmessage();
  ::ChatRejectMessage* temp = chatrejectmessage_;
  chatrejectmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_chatrejectmessage(::ChatRejectMessage* chatrejectmessage) {
  delete chatrejectmessage_;
  chatrejectmessage_ = chatrejectmessage;
  if (chatrejectmessage) {
    set_has_chatrejectmessage();
  } else {
    clear_has_chatrejectmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.chatRejectMessage)
}

// optional .DialogMessage dialogMessage = 67;
bool PokerTHMessage::has_dialogmessage() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void PokerTHMessage::set_has_dialogmessage() {
  _has_bits_[2] |= 0x00000004u;
}
void PokerTHMessage::clear_has_dialogmessage() {
  _has_bits_[2] &= ~0x00000004u;
}
void PokerTHMessage::clear_dialogmessage() {
  if (dialogmessage_ != NULL) dialogmessage_->::DialogMessage::Clear();
  clear_has_dialogmessage();
}
const ::DialogMessage& PokerTHMessage::dialogmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.dialogMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return dialogmessage_ != NULL ? *dialogmessage_ : *default_instance().dialogmessage_;
#else
  return dialogmessage_ != NULL ? *dialogmessage_ : *default_instance_->dialogmessage_;
#endif
}
::DialogMessage* PokerTHMessage::mutable_dialogmessage() {
  set_has_dialogmessage();
  if (dialogmessage_ == NULL) {
    dialogmessage_ = new ::DialogMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.dialogMessage)
  return dialogmessage_;
}
::DialogMessage* PokerTHMessage::release_dialogmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.dialogMessage)
  clear_has_dialogmessage();
  ::DialogMessage* temp = dialogmessage_;
  dialogmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_dialogmessage(::DialogMessage* dialogmessage) {
  delete dialogmessage_;
  dialogmessage_ = dialogmessage;
  if (dialogmessage) {
    set_has_dialogmessage();
  } else {
    clear_has_dialogmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.dialogMessage)
}

// optional .TimeoutWarningMessage timeoutWarningMessage = 68;
bool PokerTHMessage::has_timeoutwarningmessage() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
void PokerTHMessage::set_has_timeoutwarningmessage() {
  _has_bits_[2] |= 0x00000008u;
}
void PokerTHMessage::clear_has_timeoutwarningmessage() {
  _has_bits_[2] &= ~0x00000008u;
}
void PokerTHMessage::clear_timeoutwarningmessage() {
  if (timeoutwarningmessage_ != NULL) timeoutwarningmessage_->::TimeoutWarningMessage::Clear();
  clear_has_timeoutwarningmessage();
}
const ::TimeoutWarningMessage& PokerTHMessage::timeoutwarningmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.timeoutWarningMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return timeoutwarningmessage_ != NULL ? *timeoutwarningmessage_ : *default_instance().timeoutwarningmessage_;
#else
  return timeoutwarningmessage_ != NULL ? *timeoutwarningmessage_ : *default_instance_->timeoutwarningmessage_;
#endif
}
::TimeoutWarningMessage* PokerTHMessage::mutable_timeoutwarningmessage() {
  set_has_timeoutwarningmessage();
  if (timeoutwarningmessage_ == NULL) {
    timeoutwarningmessage_ = new ::TimeoutWarningMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.timeoutWarningMessage)
  return timeoutwarningmessage_;
}
::TimeoutWarningMessage* PokerTHMessage::release_timeoutwarningmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.timeoutWarningMessage)
  clear_has_timeoutwarningmessage();
  ::TimeoutWarningMessage* temp = timeoutwarningmessage_;
  timeoutwarningmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_timeoutwarningmessage(::TimeoutWarningMessage* timeoutwarningmessage) {
  delete timeoutwarningmessage_;
  timeoutwarningmessage_ = timeoutwarningmessage;
  if (timeoutwarningmessage) {
    set_has_timeoutwarningmessage();
  } else {
    clear_has_timeoutwarningmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.timeoutWarningMessage)
}

// optional .ResetTimeoutMessage resetTimeoutMessage = 69;
bool PokerTHMessage::has_resettimeoutmessage() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
void PokerTHMessage::set_has_resettimeoutmessage() {
  _has_bits_[2] |= 0x00000010u;
}
void PokerTHMessage::clear_has_resettimeoutmessage() {
  _has_bits_[2] &= ~0x00000010u;
}
void PokerTHMessage::clear_resettimeoutmessage() {
  if (resettimeoutmessage_ != NULL) resettimeoutmessage_->::ResetTimeoutMessage::Clear();
  clear_has_resettimeoutmessage();
}
const ::ResetTimeoutMessage& PokerTHMessage::resettimeoutmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.resetTimeoutMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return resettimeoutmessage_ != NULL ? *resettimeoutmessage_ : *default_instance().resettimeoutmessage_;
#else
  return resettimeoutmessage_ != NULL ? *resettimeoutmessage_ : *default_instance_->resettimeoutmessage_;
#endif
}
::ResetTimeoutMessage* PokerTHMessage::mutable_resettimeoutmessage() {
  set_has_resettimeoutmessage();
  if (resettimeoutmessage_ == NULL) {
    resettimeoutmessage_ = new ::ResetTimeoutMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.resetTimeoutMessage)
  return resettimeoutmessage_;
}
::ResetTimeoutMessage* PokerTHMessage::release_resettimeoutmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.resetTimeoutMessage)
  clear_has_resettimeoutmessage();
  ::ResetTimeoutMessage* temp = resettimeoutmessage_;
  resettimeoutmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_resettimeoutmessage(::ResetTimeoutMessage* resettimeoutmessage) {
  delete resettimeoutmessage_;
  resettimeoutmessage_ = resettimeoutmessage;
  if (resettimeoutmessage) {
    set_has_resettimeoutmessage();
  } else {
    clear_has_resettimeoutmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.resetTimeoutMessage)
}

// optional .ReportAvatarMessage reportAvatarMessage = 70;
bool PokerTHMessage::has_reportavatarmessage() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
void PokerTHMessage::set_has_reportavatarmessage() {
  _has_bits_[2] |= 0x00000020u;
}
void PokerTHMessage::clear_has_reportavatarmessage() {
  _has_bits_[2] &= ~0x00000020u;
}
void PokerTHMessage::clear_reportavatarmessage() {
  if (reportavatarmessage_ != NULL) reportavatarmessage_->::ReportAvatarMessage::Clear();
  clear_has_reportavatarmessage();
}
const ::ReportAvatarMessage& PokerTHMessage::reportavatarmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.reportAvatarMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return reportavatarmessage_ != NULL ? *reportavatarmessage_ : *default_instance().reportavatarmessage_;
#else
  return reportavatarmessage_ != NULL ? *reportavatarmessage_ : *default_instance_->reportavatarmessage_;
#endif
}
::ReportAvatarMessage* PokerTHMessage::mutable_reportavatarmessage() {
  set_has_reportavatarmessage();
  if (reportavatarmessage_ == NULL) {
    reportavatarmessage_ = new ::ReportAvatarMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.reportAvatarMessage)
  return reportavatarmessage_;
}
::ReportAvatarMessage* PokerTHMessage::release_reportavatarmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.reportAvatarMessage)
  clear_has_reportavatarmessage();
  ::ReportAvatarMessage* temp = reportavatarmessage_;
  reportavatarmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_reportavatarmessage(::ReportAvatarMessage* reportavatarmessage) {
  delete reportavatarmessage_;
  reportavatarmessage_ = reportavatarmessage;
  if (reportavatarmessage) {
    set_has_reportavatarmessage();
  } else {
    clear_has_reportavatarmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.reportAvatarMessage)
}

// optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
bool PokerTHMessage::has_reportavatarackmessage() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
void PokerTHMessage::set_has_reportavatarackmessage() {
  _has_bits_[2] |= 0x00000040u;
}
void PokerTHMessage::clear_has_reportavatarackmessage() {
  _has_bits_[2] &= ~0x00000040u;
}
void PokerTHMessage::clear_reportavatarackmessage() {
  if (reportavatarackmessage_ != NULL) reportavatarackmessage_->::ReportAvatarAckMessage::Clear();
  clear_has_reportavatarackmessage();
}
const ::ReportAvatarAckMessage& PokerTHMessage::reportavatarackmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.reportAvatarAckMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return reportavatarackmessage_ != NULL ? *reportavatarackmessage_ : *default_instance().reportavatarackmessage_;
#else
  return reportavatarackmessage_ != NULL ? *reportavatarackmessage_ : *default_instance_->reportavatarackmessage_;
#endif
}
::ReportAvatarAckMessage* PokerTHMessage::mutable_reportavatarackmessage() {
  set_has_reportavatarackmessage();
  if (reportavatarackmessage_ == NULL) {
    reportavatarackmessage_ = new ::ReportAvatarAckMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.reportAvatarAckMessage)
  return reportavatarackmessage_;
}
::ReportAvatarAckMessage* PokerTHMessage::release_reportavatarackmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.reportAvatarAckMessage)
  clear_has_reportavatarackmessage();
  ::ReportAvatarAckMessage* temp = reportavatarackmessage_;
  reportavatarackmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_reportavatarackmessage(::ReportAvatarAckMessage* reportavatarackmessage) {
  delete reportavatarackmessage_;
  reportavatarackmessage_ = reportavatarackmessage;
  if (reportavatarackmessage) {
    set_has_reportavatarackmessage();
  } else {
    clear_has_reportavatarackmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.reportAvatarAckMessage)
}

// optional .ReportGameMessage reportGameMessage = 72;
bool PokerTHMessage::has_reportgamemessage() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
void PokerTHMessage::set_has_reportgamemessage() {
  _has_bits_[2] |= 0x00000080u;
}
void PokerTHMessage::clear_has_reportgamemessage() {
  _has_bits_[2] &= ~0x00000080u;
}
void PokerTHMessage::clear_reportgamemessage() {
  if (reportgamemessage_ != NULL) reportgamemessage_->::ReportGameMessage::Clear();
  clear_has_reportgamemessage();
}
const ::ReportGameMessage& PokerTHMessage::reportgamemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.reportGameMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return reportgamemessage_ != NULL ? *reportgamemessage_ : *default_instance().reportgamemessage_;
#else
  return reportgamemessage_ != NULL ? *reportgamemessage_ : *default_instance_->reportgamemessage_;
#endif
}
::ReportGameMessage* PokerTHMessage::mutable_reportgamemessage() {
  set_has_reportgamemessage();
  if (reportgamemessage_ == NULL) {
    reportgamemessage_ = new ::ReportGameMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.reportGameMessage)
  return reportgamemessage_;
}
::ReportGameMessage* PokerTHMessage::release_reportgamemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.reportGameMessage)
  clear_has_reportgamemessage();
  ::ReportGameMessage* temp = reportgamemessage_;
  reportgamemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_reportgamemessage(::ReportGameMessage* reportgamemessage) {
  delete reportgamemessage_;
  reportgamemessage_ = reportgamemessage;
  if (reportgamemessage) {
    set_has_reportgamemessage();
  } else {
    clear_has_reportgamemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.reportGameMessage)
}

// optional .ReportGameAckMessage reportGameAckMessage = 73;
bool PokerTHMessage::has_reportgameackmessage() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
void PokerTHMessage::set_has_reportgameackmessage() {
  _has_bits_[2] |= 0x00000100u;
}
void PokerTHMessage::clear_has_reportgameackmessage() {
  _has_bits_[2] &= ~0x00000100u;
}
void PokerTHMessage::clear_reportgameackmessage() {
  if (reportgameackmessage_ != NULL) reportgameackmessage_->::ReportGameAckMessage::Clear();
  clear_has_reportgameackmessage();
}
const ::ReportGameAckMessage& PokerTHMessage::reportgameackmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.reportGameAckMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return reportgameackmessage_ != NULL ? *reportgameackmessage_ : *default_instance().reportgameackmessage_;
#else
  return reportgameackmessage_ != NULL ? *reportgameackmessage_ : *default_instance_->reportgameackmessage_;
#endif
}
::ReportGameAckMessage* PokerTHMessage::mutable_reportgameackmessage() {
  set_has_reportgameackmessage();
  if (reportgameackmessage_ == NULL) {
    reportgameackmessage_ = new ::ReportGameAckMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.reportGameAckMessage)
  return reportgameackmessage_;
}
::ReportGameAckMessage* PokerTHMessage::release_reportgameackmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.reportGameAckMessage)
  clear_has_reportgameackmessage();
  ::ReportGameAckMessage* temp = reportgameackmessage_;
  reportgameackmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_reportgameackmessage(::ReportGameAckMessage* reportgameackmessage) {
  delete reportgameackmessage_;
  reportgameackmessage_ = reportgameackmessage;
  if (reportgameackmessage) {
    set_has_reportgameackmessage();
  } else {
    clear_has_reportgameackmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.reportGameAckMessage)
}

// optional .ErrorMessage errorMessage = 74;
bool PokerTHMessage::has_errormessage() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
void PokerTHMessage::set_has_errormessage() {
  _has_bits_[2] |= 0x00000200u;
}
void PokerTHMessage::clear_has_errormessage() {
  _has_bits_[2] &= ~0x00000200u;
}
void PokerTHMessage::clear_errormessage() {
  if (errormessage_ != NULL) errormessage_->::ErrorMessage::Clear();
  clear_has_errormessage();
}
const ::ErrorMessage& PokerTHMessage::errormessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.errorMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return errormessage_ != NULL ? *errormessage_ : *default_instance().errormessage_;
#else
  return errormessage_ != NULL ? *errormessage_ : *default_instance_->errormessage_;
#endif
}
::ErrorMessage* PokerTHMessage::mutable_errormessage() {
  set_has_errormessage();
  if (errormessage_ == NULL) {
    errormessage_ = new ::ErrorMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.errorMessage)
  return errormessage_;
}
::ErrorMessage* PokerTHMessage::release_errormessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.errorMessage)
  clear_has_errormessage();
  ::ErrorMessage* temp = errormessage_;
  errormessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_errormessage(::ErrorMessage* errormessage) {
  delete errormessage_;
  errormessage_ = errormessage;
  if (errormessage) {
    set_has_errormessage();
  } else {
    clear_has_errormessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.errorMessage)
}

// optional .AdminRemoveGameMessage adminRemoveGameMessage = 75;
bool PokerTHMessage::has_adminremovegamemessage() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
void PokerTHMessage::set_has_adminremovegamemessage() {
  _has_bits_[2] |= 0x00000400u;
}
void PokerTHMessage::clear_has_adminremovegamemessage() {
  _has_bits_[2] &= ~0x00000400u;
}
void PokerTHMessage::clear_adminremovegamemessage() {
  if (adminremovegamemessage_ != NULL) adminremovegamemessage_->::AdminRemoveGameMessage::Clear();
  clear_has_adminremovegamemessage();
}
const ::AdminRemoveGameMessage& PokerTHMessage::adminremovegamemessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.adminRemoveGameMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return adminremovegamemessage_ != NULL ? *adminremovegamemessage_ : *default_instance().adminremovegamemessage_;
#else
  return adminremovegamemessage_ != NULL ? *adminremovegamemessage_ : *default_instance_->adminremovegamemessage_;
#endif
}
::AdminRemoveGameMessage* PokerTHMessage::mutable_adminremovegamemessage() {
  set_has_adminremovegamemessage();
  if (adminremovegamemessage_ == NULL) {
    adminremovegamemessage_ = new ::AdminRemoveGameMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.adminRemoveGameMessage)
  return adminremovegamemessage_;
}
::AdminRemoveGameMessage* PokerTHMessage::release_adminremovegamemessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.adminRemoveGameMessage)
  clear_has_adminremovegamemessage();
  ::AdminRemoveGameMessage* temp = adminremovegamemessage_;
  adminremovegamemessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_adminremovegamemessage(::AdminRemoveGameMessage* adminremovegamemessage) {
  delete adminremovegamemessage_;
  adminremovegamemessage_ = adminremovegamemessage;
  if (adminremovegamemessage) {
    set_has_adminremovegamemessage();
  } else {
    clear_has_adminremovegamemessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.adminRemoveGameMessage)
}

// optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 76;
bool PokerTHMessage::has_adminremovegameackmessage() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
void PokerTHMessage::set_has_adminremovegameackmessage() {
  _has_bits_[2] |= 0x00000800u;
}
void PokerTHMessage::clear_has_adminremovegameackmessage() {
  _has_bits_[2] &= ~0x00000800u;
}
void PokerTHMessage::clear_adminremovegameackmessage() {
  if (adminremovegameackmessage_ != NULL) adminremovegameackmessage_->::AdminRemoveGameAckMessage::Clear();
  clear_has_adminremovegameackmessage();
}
const ::AdminRemoveGameAckMessage& PokerTHMessage::adminremovegameackmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.adminRemoveGameAckMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return adminremovegameackmessage_ != NULL ? *adminremovegameackmessage_ : *default_instance().adminremovegameackmessage_;
#else
  return adminremovegameackmessage_ != NULL ? *adminremovegameackmessage_ : *default_instance_->adminremovegameackmessage_;
#endif
}
::AdminRemoveGameAckMessage* PokerTHMessage::mutable_adminremovegameackmessage() {
  set_has_adminremovegameackmessage();
  if (adminremovegameackmessage_ == NULL) {
    adminremovegameackmessage_ = new ::AdminRemoveGameAckMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.adminRemoveGameAckMessage)
  return adminremovegameackmessage_;
}
::AdminRemoveGameAckMessage* PokerTHMessage::release_adminremovegameackmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.adminRemoveGameAckMessage)
  clear_has_adminremovegameackmessage();
  ::AdminRemoveGameAckMessage* temp = adminremovegameackmessage_;
  adminremovegameackmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_adminremovegameackmessage(::AdminRemoveGameAckMessage* adminremovegameackmessage) {
  delete adminremovegameackmessage_;
  adminremovegameackmessage_ = adminremovegameackmessage;
  if (adminremovegameackmessage) {
    set_has_adminremovegameackmessage();
  } else {
    clear_has_adminremovegameackmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.adminRemoveGameAckMessage)
}

// optional .AdminBanPlayerMessage adminBanPlayerMessage = 77;
bool PokerTHMessage::has_adminbanplayermessage() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
void PokerTHMessage::set_has_adminbanplayermessage() {
  _has_bits_[2] |= 0x00001000u;
}
void PokerTHMessage::clear_has_adminbanplayermessage() {
  _has_bits_[2] &= ~0x00001000u;
}
void PokerTHMessage::clear_adminbanplayermessage() {
  if (adminbanplayermessage_ != NULL) adminbanplayermessage_->::AdminBanPlayerMessage::Clear();
  clear_has_adminbanplayermessage();
}
const ::AdminBanPlayerMessage& PokerTHMessage::adminbanplayermessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.adminBanPlayerMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return adminbanplayermessage_ != NULL ? *adminbanplayermessage_ : *default_instance().adminbanplayermessage_;
#else
  return adminbanplayermessage_ != NULL ? *adminbanplayermessage_ : *default_instance_->adminbanplayermessage_;
#endif
}
::AdminBanPlayerMessage* PokerTHMessage::mutable_adminbanplayermessage() {
  set_has_adminbanplayermessage();
  if (adminbanplayermessage_ == NULL) {
    adminbanplayermessage_ = new ::AdminBanPlayerMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.adminBanPlayerMessage)
  return adminbanplayermessage_;
}
::AdminBanPlayerMessage* PokerTHMessage::release_adminbanplayermessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.adminBanPlayerMessage)
  clear_has_adminbanplayermessage();
  ::AdminBanPlayerMessage* temp = adminbanplayermessage_;
  adminbanplayermessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_adminbanplayermessage(::AdminBanPlayerMessage* adminbanplayermessage) {
  delete adminbanplayermessage_;
  adminbanplayermessage_ = adminbanplayermessage;
  if (adminbanplayermessage) {
    set_has_adminbanplayermessage();
  } else {
    clear_has_adminbanplayermessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.adminBanPlayerMessage)
}

// optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 78;
bool PokerTHMessage::has_adminbanplayerackmessage() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
void PokerTHMessage::set_has_adminbanplayerackmessage() {
  _has_bits_[2] |= 0x00002000u;
}
void PokerTHMessage::clear_has_adminbanplayerackmessage() {
  _has_bits_[2] &= ~0x00002000u;
}
void PokerTHMessage::clear_adminbanplayerackmessage() {
  if (adminbanplayerackmessage_ != NULL) adminbanplayerackmessage_->::AdminBanPlayerAckMessage::Clear();
  clear_has_adminbanplayerackmessage();
}
const ::AdminBanPlayerAckMessage& PokerTHMessage::adminbanplayerackmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.adminBanPlayerAckMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return adminbanplayerackmessage_ != NULL ? *adminbanplayerackmessage_ : *default_instance().adminbanplayerackmessage_;
#else
  return adminbanplayerackmessage_ != NULL ? *adminbanplayerackmessage_ : *default_instance_->adminbanplayerackmessage_;
#endif
}
::AdminBanPlayerAckMessage* PokerTHMessage::mutable_adminbanplayerackmessage() {
  set_has_adminbanplayerackmessage();
  if (adminbanplayerackmessage_ == NULL) {
    adminbanplayerackmessage_ = new ::AdminBanPlayerAckMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.adminBanPlayerAckMessage)
  return adminbanplayerackmessage_;
}
::AdminBanPlayerAckMessage* PokerTHMessage::release_adminbanplayerackmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.adminBanPlayerAckMessage)
  clear_has_adminbanplayerackmessage();
  ::AdminBanPlayerAckMessage* temp = adminbanplayerackmessage_;
  adminbanplayerackmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_adminbanplayerackmessage(::AdminBanPlayerAckMessage* adminbanplayerackmessage) {
  delete adminbanplayerackmessage_;
  adminbanplayerackmessage_ = adminbanplayerackmessage;
  if (adminbanplayerackmessage) {
    set_has_adminbanplayerackmessage();
  } else {
    clear_has_adminbanplayerackmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.adminBanPlayerAckMessage)
}

// optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 79;
bool PokerTHMessage::has_gamelistspectatorjoinedmessage() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
void PokerTHMessage::set_has_gamelistspectatorjoinedmessage() {
  _has_bits_[2] |= 0x00004000u;
}
void PokerTHMessage::clear_has_gamelistspectatorjoinedmessage() {
  _has_bits_[2] &= ~0x00004000u;
}
void PokerTHMessage::clear_gamelistspectatorjoinedmessage() {
  if (gamelistspectatorjoinedmessage_ != NULL) gamelistspectatorjoinedmessage_->::GameListSpectatorJoinedMessage::Clear();
  clear_has_gamelistspectatorjoinedmessage();
}
const ::GameListSpectatorJoinedMessage& PokerTHMessage::gamelistspectatorjoinedmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameListSpectatorJoinedMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamelistspectatorjoinedmessage_ != NULL ? *gamelistspectatorjoinedmessage_ : *default_instance().gamelistspectatorjoinedmessage_;
#else
  return gamelistspectatorjoinedmessage_ != NULL ? *gamelistspectatorjoinedmessage_ : *default_instance_->gamelistspectatorjoinedmessage_;
#endif
}
::GameListSpectatorJoinedMessage* PokerTHMessage::mutable_gamelistspectatorjoinedmessage() {
  set_has_gamelistspectatorjoinedmessage();
  if (gamelistspectatorjoinedmessage_ == NULL) {
    gamelistspectatorjoinedmessage_ = new ::GameListSpectatorJoinedMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameListSpectatorJoinedMessage)
  return gamelistspectatorjoinedmessage_;
}
::GameListSpectatorJoinedMessage* PokerTHMessage::release_gamelistspectatorjoinedmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameListSpectatorJoinedMessage)
  clear_has_gamelistspectatorjoinedmessage();
  ::GameListSpectatorJoinedMessage* temp = gamelistspectatorjoinedmessage_;
  gamelistspectatorjoinedmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gamelistspectatorjoinedmessage(::GameListSpectatorJoinedMessage* gamelistspectatorjoinedmessage) {
  delete gamelistspectatorjoinedmessage_;
  gamelistspectatorjoinedmessage_ = gamelistspectatorjoinedmessage;
  if (gamelistspectatorjoinedmessage) {
    set_has_gamelistspectatorjoinedmessage();
  } else {
    clear_has_gamelistspectatorjoinedmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameListSpectatorJoinedMessage)
}

// optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 80;
bool PokerTHMessage::has_gamelistspectatorleftmessage() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
void PokerTHMessage::set_has_gamelistspectatorleftmessage() {
  _has_bits_[2] |= 0x00008000u;
}
void PokerTHMessage::clear_has_gamelistspectatorleftmessage() {
  _has_bits_[2] &= ~0x00008000u;
}
void PokerTHMessage::clear_gamelistspectatorleftmessage() {
  if (gamelistspectatorleftmessage_ != NULL) gamelistspectatorleftmessage_->::GameListSpectatorLeftMessage::Clear();
  clear_has_gamelistspectatorleftmessage();
}
const ::GameListSpectatorLeftMessage& PokerTHMessage::gamelistspectatorleftmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameListSpectatorLeftMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamelistspectatorleftmessage_ != NULL ? *gamelistspectatorleftmessage_ : *default_instance().gamelistspectatorleftmessage_;
#else
  return gamelistspectatorleftmessage_ != NULL ? *gamelistspectatorleftmessage_ : *default_instance_->gamelistspectatorleftmessage_;
#endif
}
::GameListSpectatorLeftMessage* PokerTHMessage::mutable_gamelistspectatorleftmessage() {
  set_has_gamelistspectatorleftmessage();
  if (gamelistspectatorleftmessage_ == NULL) {
    gamelistspectatorleftmessage_ = new ::GameListSpectatorLeftMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameListSpectatorLeftMessage)
  return gamelistspectatorleftmessage_;
}
::GameListSpectatorLeftMessage* PokerTHMessage::release_gamelistspectatorleftmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameListSpectatorLeftMessage)
  clear_has_gamelistspectatorleftmessage();
  ::GameListSpectatorLeftMessage* temp = gamelistspectatorleftmessage_;
  gamelistspectatorleftmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gamelistspectatorleftmessage(::GameListSpectatorLeftMessage* gamelistspectatorleftmessage) {
  delete gamelistspectatorleftmessage_;
  gamelistspectatorleftmessage_ = gamelistspectatorleftmessage;
  if (gamelistspectatorleftmessage) {
    set_has_gamelistspectatorleftmessage();
  } else {
    clear_has_gamelistspectatorleftmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameListSpectatorLeftMessage)
}

// optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 81;
bool PokerTHMessage::has_gamespectatorjoinedmessage() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
void PokerTHMessage::set_has_gamespectatorjoinedmessage() {
  _has_bits_[2] |= 0x00010000u;
}
void PokerTHMessage::clear_has_gamespectatorjoinedmessage() {
  _has_bits_[2] &= ~0x00010000u;
}
void PokerTHMessage::clear_gamespectatorjoinedmessage() {
  if (gamespectatorjoinedmessage_ != NULL) gamespectatorjoinedmessage_->::GameSpectatorJoinedMessage::Clear();
  clear_has_gamespectatorjoinedmessage();
}
const ::GameSpectatorJoinedMessage& PokerTHMessage::gamespectatorjoinedmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameSpectatorJoinedMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamespectatorjoinedmessage_ != NULL ? *gamespectatorjoinedmessage_ : *default_instance().gamespectatorjoinedmessage_;
#else
  return gamespectatorjoinedmessage_ != NULL ? *gamespectatorjoinedmessage_ : *default_instance_->gamespectatorjoinedmessage_;
#endif
}
::GameSpectatorJoinedMessage* PokerTHMessage::mutable_gamespectatorjoinedmessage() {
  set_has_gamespectatorjoinedmessage();
  if (gamespectatorjoinedmessage_ == NULL) {
    gamespectatorjoinedmessage_ = new ::GameSpectatorJoinedMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameSpectatorJoinedMessage)
  return gamespectatorjoinedmessage_;
}
::GameSpectatorJoinedMessage* PokerTHMessage::release_gamespectatorjoinedmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameSpectatorJoinedMessage)
  clear_has_gamespectatorjoinedmessage();
  ::GameSpectatorJoinedMessage* temp = gamespectatorjoinedmessage_;
  gamespectatorjoinedmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gamespectatorjoinedmessage(::GameSpectatorJoinedMessage* gamespectatorjoinedmessage) {
  delete gamespectatorjoinedmessage_;
  gamespectatorjoinedmessage_ = gamespectatorjoinedmessage;
  if (gamespectatorjoinedmessage) {
    set_has_gamespectatorjoinedmessage();
  } else {
    clear_has_gamespectatorjoinedmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameSpectatorJoinedMessage)
}

// optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 82;
bool PokerTHMessage::has_gamespectatorleftmessage() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
void PokerTHMessage::set_has_gamespectatorleftmessage() {
  _has_bits_[2] |= 0x00020000u;
}
void PokerTHMessage::clear_has_gamespectatorleftmessage() {
  _has_bits_[2] &= ~0x00020000u;
}
void PokerTHMessage::clear_gamespectatorleftmessage() {
  if (gamespectatorleftmessage_ != NULL) gamespectatorleftmessage_->::GameSpectatorLeftMessage::Clear();
  clear_has_gamespectatorleftmessage();
}
const ::GameSpectatorLeftMessage& PokerTHMessage::gamespectatorleftmessage() const {
  // @@protoc_insertion_point(field_get:PokerTHMessage.gameSpectatorLeftMessage)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gamespectatorleftmessage_ != NULL ? *gamespectatorleftmessage_ : *default_instance().gamespectatorleftmessage_;
#else
  return gamespectatorleftmessage_ != NULL ? *gamespectatorleftmessage_ : *default_instance_->gamespectatorleftmessage_;
#endif
}
::GameSpectatorLeftMessage* PokerTHMessage::mutable_gamespectatorleftmessage() {
  set_has_gamespectatorleftmessage();
  if (gamespectatorleftmessage_ == NULL) {
    gamespectatorleftmessage_ = new ::GameSpectatorLeftMessage;
  }
  // @@protoc_insertion_point(field_mutable:PokerTHMessage.gameSpectatorLeftMessage)
  return gamespectatorleftmessage_;
}
::GameSpectatorLeftMessage* PokerTHMessage::release_gamespectatorleftmessage() {
  // @@protoc_insertion_point(field_release:PokerTHMessage.gameSpectatorLeftMessage)
  clear_has_gamespectatorleftmessage();
  ::GameSpectatorLeftMessage* temp = gamespectatorleftmessage_;
  gamespectatorleftmessage_ = NULL;
  return temp;
}
void PokerTHMessage::set_allocated_gamespectatorleftmessage(::GameSpectatorLeftMessage* gamespectatorleftmessage) {
  delete gamespectatorleftmessage_;
  gamespectatorleftmessage_ = gamespectatorleftmessage;
  if (gamespectatorleftmessage) {
    set_has_gamespectatorleftmessage();
  } else {
    clear_has_gamespectatorleftmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:PokerTHMessage.gameSpectatorLeftMessage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
